// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: fairyring/pep/request_id.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { KeyshareList } from "../common/shared_types";

export const protobufPackage = "fairyring.pep";

export interface RequestId {
  creator: string;
  reqId: string;
}

export interface PrivateRequest {
  creator: string;
  reqId: string;
  pubkey: string;
  amount: Coin | undefined;
  encryptedKeyshares: { [key: string]: KeyshareList };
}

export interface PrivateRequest_EncryptedKeysharesEntry {
  key: string;
  value: KeyshareList | undefined;
}

function createBaseRequestId(): RequestId {
  return { creator: "", reqId: "" };
}

export const RequestId = {
  encode(message: RequestId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.reqId !== "") {
      writer.uint32(18).string(message.reqId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reqId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestId {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      reqId: isSet(object.reqId) ? globalThis.String(object.reqId) : "",
    };
  },

  toJSON(message: RequestId): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.reqId !== "") {
      obj.reqId = message.reqId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestId>, I>>(base?: I): RequestId {
    return RequestId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestId>, I>>(object: I): RequestId {
    const message = createBaseRequestId();
    message.creator = object.creator ?? "";
    message.reqId = object.reqId ?? "";
    return message;
  },
};

function createBasePrivateRequest(): PrivateRequest {
  return { creator: "", reqId: "", pubkey: "", amount: undefined, encryptedKeyshares: {} };
}

export const PrivateRequest = {
  encode(message: PrivateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.reqId !== "") {
      writer.uint32(18).string(message.reqId);
    }
    if (message.pubkey !== "") {
      writer.uint32(26).string(message.pubkey);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();
    }
    Object.entries(message.encryptedKeyshares).forEach(([key, value]) => {
      PrivateRequest_EncryptedKeysharesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PrivateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reqId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pubkey = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = PrivateRequest_EncryptedKeysharesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.encryptedKeyshares[entry5.key] = entry5.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateRequest {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      reqId: isSet(object.reqId) ? globalThis.String(object.reqId) : "",
      pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      encryptedKeyshares: isObject(object.encryptedKeyshares)
        ? Object.entries(object.encryptedKeyshares).reduce<{ [key: string]: KeyshareList }>((acc, [key, value]) => {
          acc[key] = KeyshareList.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: PrivateRequest): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.reqId !== "") {
      obj.reqId = message.reqId;
    }
    if (message.pubkey !== "") {
      obj.pubkey = message.pubkey;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.encryptedKeyshares) {
      const entries = Object.entries(message.encryptedKeyshares);
      if (entries.length > 0) {
        obj.encryptedKeyshares = {};
        entries.forEach(([k, v]) => {
          obj.encryptedKeyshares[k] = KeyshareList.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateRequest>, I>>(base?: I): PrivateRequest {
    return PrivateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateRequest>, I>>(object: I): PrivateRequest {
    const message = createBasePrivateRequest();
    message.creator = object.creator ?? "";
    message.reqId = object.reqId ?? "";
    message.pubkey = object.pubkey ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.encryptedKeyshares = Object.entries(object.encryptedKeyshares ?? {}).reduce<
      { [key: string]: KeyshareList }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = KeyshareList.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBasePrivateRequest_EncryptedKeysharesEntry(): PrivateRequest_EncryptedKeysharesEntry {
  return { key: "", value: undefined };
}

export const PrivateRequest_EncryptedKeysharesEntry = {
  encode(message: PrivateRequest_EncryptedKeysharesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      KeyshareList.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PrivateRequest_EncryptedKeysharesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateRequest_EncryptedKeysharesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = KeyshareList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateRequest_EncryptedKeysharesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? KeyshareList.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: PrivateRequest_EncryptedKeysharesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = KeyshareList.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateRequest_EncryptedKeysharesEntry>, I>>(
    base?: I,
  ): PrivateRequest_EncryptedKeysharesEntry {
    return PrivateRequest_EncryptedKeysharesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateRequest_EncryptedKeysharesEntry>, I>>(
    object: I,
  ): PrivateRequest_EncryptedKeysharesEntry {
    const message = createBasePrivateRequest_EncryptedKeysharesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? KeyshareList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
