// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: fairyring/pep/request_id.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { EncryptedKeyshare } from "../common/shared_types";

export const protobufPackage = "fairyring.pep";

export interface RequestId {
  creator: string;
  reqId: string;
}

export interface PrivateRequest {
  creator: string;
  reqId: string;
  pubkey: string;
  amount: Coin | undefined;
  encryptedKeyshares: EncryptedKeyshare[];
}

function createBaseRequestId(): RequestId {
  return { creator: "", reqId: "" };
}

export const RequestId = {
  encode(message: RequestId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.reqId !== "") {
      writer.uint32(18).string(message.reqId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reqId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestId {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      reqId: isSet(object.reqId) ? globalThis.String(object.reqId) : "",
    };
  },

  toJSON(message: RequestId): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.reqId !== "") {
      obj.reqId = message.reqId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestId>, I>>(base?: I): RequestId {
    return RequestId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestId>, I>>(object: I): RequestId {
    const message = createBaseRequestId();
    message.creator = object.creator ?? "";
    message.reqId = object.reqId ?? "";
    return message;
  },
};

function createBasePrivateRequest(): PrivateRequest {
  return { creator: "", reqId: "", pubkey: "", amount: undefined, encryptedKeyshares: [] };
}

export const PrivateRequest = {
  encode(message: PrivateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.reqId !== "") {
      writer.uint32(18).string(message.reqId);
    }
    if (message.pubkey !== "") {
      writer.uint32(26).string(message.pubkey);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.encryptedKeyshares) {
      EncryptedKeyshare.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PrivateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reqId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pubkey = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.encryptedKeyshares.push(EncryptedKeyshare.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateRequest {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      reqId: isSet(object.reqId) ? globalThis.String(object.reqId) : "",
      pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      encryptedKeyshares: globalThis.Array.isArray(object?.encryptedKeyshares)
        ? object.encryptedKeyshares.map((e: any) => EncryptedKeyshare.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PrivateRequest): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.reqId !== "") {
      obj.reqId = message.reqId;
    }
    if (message.pubkey !== "") {
      obj.pubkey = message.pubkey;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.encryptedKeyshares?.length) {
      obj.encryptedKeyshares = message.encryptedKeyshares.map((e) => EncryptedKeyshare.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateRequest>, I>>(base?: I): PrivateRequest {
    return PrivateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateRequest>, I>>(object: I): PrivateRequest {
    const message = createBasePrivateRequest();
    message.creator = object.creator ?? "";
    message.reqId = object.reqId ?? "";
    message.pubkey = object.pubkey ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.encryptedKeyshares = object.encryptedKeyshares?.map((e) => EncryptedKeyshare.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
