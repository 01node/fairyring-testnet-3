syntax = "proto3";

package fairyring.Conditionalenc;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "fairyring/Conditionalenc/params.proto";
import "fairyring/Conditionalenc/encrypted_tx.proto";
import "fairyring/Conditionalenc/Conditionalenc_nonce.proto";
import "fairyring/Conditionalenc/aggregated_key_share.proto";
import "fairyring/Conditionalenc/pub_key.proto";

// this line is used by starport scaffolding # 1

option go_package = "fairyring/x/conditionalenc/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/fairyring/Conditionalenc/params";
  
  }
  
  // Queries a EncryptedTx by index.
  rpc EncryptedTx (QueryGetEncryptedTxRequest) returns (QueryGetEncryptedTxResponse) {
    option (google.api.http).get = "/fairyring/Conditionalenc/encrypted_tx/{targetcondition}/{index}";
  
  }
  
  // Queries a list of EncryptedTx items.
  rpc EncryptedTxAll (QueryAllEncryptedTxRequest) returns (QueryAllEncryptedTxResponse) {
    option (google.api.http).get = "/fairyring/Conditionalenc/encrypted_tx";
  
  }
  
  // Queries a list of EncryptedTx items.
  rpc EncryptedTxAllFromCondition (QueryAllEncryptedTxFromConditionRequest) returns (QueryAllEncryptedTxFromconditionResponse) {
    option (google.api.http).get = "/fairyring/Conditionalenc/encrypted_tx/{targetcondition}";
  
  }
  
  // Queries a list of Latestcondition items.
  rpc LatestCondition (QueryLatestconditionRequest) returns (QueryLatestconditionResponse) {
    option (google.api.http).get = "/fairyring/Conditionalenc/latest_condition";
  
  }
  
  // Queries a ConditionalencNonce by index.
  rpc ConditionalencNonce (QueryGetConditionalencNonceRequest) returns (QueryGetConditionalencNonceResponse) {
    option (google.api.http).get = "/fairyring/Conditionalenc/Conditionalenc_nonce/{address}";
  
  }
  
  // Queries a list of ConditionalencNonce items.
  rpc ConditionalencNonceAll (QueryAllConditionalencNonceRequest) returns (QueryAllConditionalencNonceResponse) {
    option (google.api.http).get = "/fairyring/Conditionalenc/Conditionalenc_nonce";
  
  }

  // Queries the public keys
  rpc PubKey    (QueryPubKeyRequest) returns (QueryPubKeyResponse) {
    option (google.api.http).get = "/fairyring/Conditionalenc/pub_key";
  
  }

  // this line is used by starport scaffolding # 2
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetEncryptedTxRequest {
  string targetcondition = 1;
  uint64 index        = 2;
}

message QueryGetEncryptedTxResponse {
  EncryptedTx encryptedTx = 1 [(gogoproto.nullable) = false];
}

message QueryAllEncryptedTxRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEncryptedTxResponse {
  repeated EncryptedTxArray                       encryptedTxArray = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination       = 2;
}

message QueryAllEncryptedTxFromConditionRequest {
  string targetcondition = 1;
}

message QueryAllEncryptedTxFromconditionResponse {
  EncryptedTxArray encryptedTxArray = 1 [(gogoproto.nullable) = false];
}

message QueryLatestconditionRequest {}

message QueryLatestconditionResponse {
  string condition = 1;
}

message QueryGetConditionalencNonceRequest {
  string address = 1;
}

message QueryGetConditionalencNonceResponse {
  ConditionalencNonce ConditionalencNonce = 1 [(gogoproto.nullable) = false];
}

message QueryAllConditionalencNonceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllConditionalencNonceResponse {
  repeated ConditionalencNonce                         ConditionalencNonce = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination     = 2;
}

message QueryPubKeyRequest {}

message QueryPubKeyResponse {
  ActivePubKey activePubKey   = 1 [(gogoproto.nullable) = false];
  QueuedPubKey queuedPubKey = 2 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3