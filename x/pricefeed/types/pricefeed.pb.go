// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/pricefeed/pricefeed.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Price is a message that represents a price data structure.
// It contains the symbol or name of the price being stored,
// the most recent price of the specified symbol, and the
// timestamp (in Unix time) when the price was last resolved.
type Price struct {
	Symbol      string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price       uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	ResolveTime int64  `protobuf:"varint,3,opt,name=resolve_time,json=resolveTime,proto3" json:"resolve_time,omitempty"`
	Nonce       uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee5b73ce7368ae2, []int{0}
}
func (m *Price) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Price.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return m.Size()
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Price) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Price) GetResolveTime() int64 {
	if m != nil {
		return m.ResolveTime
	}
	return 0
}

func (m *Price) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// SymbolRequest is a message that represents a symbol request data structure.
// It contains the symbol or name of the requested price data, the ID of the
// oracle script used to fetch the requested price data, and the block interval
// at which the price data should be update every n block.
type SymbolRequest struct {
	Symbol         string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OracleScriptID uint64 `protobuf:"varint,2,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty"`
	BlockInterval  uint64 `protobuf:"varint,3,opt,name=block_interval,json=blockInterval,proto3" json:"block_interval,omitempty"`
	PriceStep      uint64 `protobuf:"varint,4,opt,name=price_step,json=priceStep,proto3" json:"price_step,omitempty"`
}

func (m *SymbolRequest) Reset()         { *m = SymbolRequest{} }
func (m *SymbolRequest) String() string { return proto.CompactTextString(m) }
func (*SymbolRequest) ProtoMessage()    {}
func (*SymbolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee5b73ce7368ae2, []int{1}
}
func (m *SymbolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SymbolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SymbolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SymbolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SymbolRequest.Merge(m, src)
}
func (m *SymbolRequest) XXX_Size() int {
	return m.Size()
}
func (m *SymbolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SymbolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SymbolRequest proto.InternalMessageInfo

func (m *SymbolRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *SymbolRequest) GetOracleScriptID() uint64 {
	if m != nil {
		return m.OracleScriptID
	}
	return 0
}

func (m *SymbolRequest) GetBlockInterval() uint64 {
	if m != nil {
		return m.BlockInterval
	}
	return 0
}

func (m *SymbolRequest) GetPriceStep() uint64 {
	if m != nil {
		return m.PriceStep
	}
	return 0
}

// UpdateSymbolRequestProposal is a message that represents a proposal to update
// a symbol request. It contains a title, description, and a list of symbol
// requests to be updated. Once approved, the data will update the SymbolRequest
// in the state.
type UpdateSymbolRequestProposal struct {
	Title          string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SymbolRequests []SymbolRequest `protobuf:"bytes,3,rep,name=symbol_requests,json=symbolRequests,proto3" json:"symbol_requests"`
}

func (m *UpdateSymbolRequestProposal) Reset()         { *m = UpdateSymbolRequestProposal{} }
func (m *UpdateSymbolRequestProposal) String() string { return proto.CompactTextString(m) }
func (*UpdateSymbolRequestProposal) ProtoMessage()    {}
func (*UpdateSymbolRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee5b73ce7368ae2, []int{2}
}
func (m *UpdateSymbolRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSymbolRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSymbolRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSymbolRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSymbolRequestProposal.Merge(m, src)
}
func (m *UpdateSymbolRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSymbolRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSymbolRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSymbolRequestProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Price)(nil), "pricefeed.Price")
	proto.RegisterType((*SymbolRequest)(nil), "pricefeed.SymbolRequest")
	proto.RegisterType((*UpdateSymbolRequestProposal)(nil), "pricefeed.UpdateSymbolRequestProposal")
}

func init() {
	proto.RegisterFile("fairyring/pricefeed/pricefeed.proto", fileDescriptor_4ee5b73ce7368ae2)
}

var fileDescriptor_4ee5b73ce7368ae2 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0xce, 0xd3, 0x30,
	0x10, 0xc7, 0x63, 0x92, 0x56, 0xaa, 0x4b, 0x03, 0xb2, 0x2a, 0x14, 0x51, 0x91, 0x86, 0x22, 0xa4,
	0x4c, 0xad, 0x04, 0x13, 0x88, 0xa9, 0x42, 0x42, 0x9d, 0xa8, 0x5c, 0x58, 0x58, 0xa2, 0x34, 0xb9,
	0x56, 0x16, 0x69, 0x6c, 0x6c, 0x53, 0xd1, 0x37, 0x60, 0xe4, 0x11, 0x18, 0x18, 0x90, 0x78, 0x91,
	0x8e, 0x1d, 0x99, 0xaa, 0x4f, 0xe9, 0x8b, 0x7c, 0xaa, 0x1d, 0x7d, 0x4d, 0x87, 0x6f, 0xf3, 0xff,
	0x6f, 0xdf, 0xdd, 0xef, 0xce, 0x87, 0x5f, 0xac, 0x52, 0x26, 0x77, 0x92, 0x95, 0xeb, 0x89, 0x90,
	0x2c, 0x83, 0x15, 0x40, 0x7e, 0x39, 0x8d, 0x85, 0xe4, 0x9a, 0x93, 0xce, 0x9d, 0xf1, 0xb4, 0xbf,
	0xe6, 0x6b, 0x6e, 0xdc, 0xc9, 0xf9, 0x64, 0x1f, 0x8c, 0x4a, 0xdc, 0x9a, 0x9f, 0x9f, 0x90, 0x27,
	0xb8, 0xad, 0x76, 0x9b, 0x25, 0x2f, 0x02, 0x14, 0xa1, 0xb8, 0x43, 0x6b, 0x45, 0xfa, 0xb8, 0x65,
	0x72, 0x04, 0x0f, 0x22, 0x14, 0x7b, 0xd4, 0x0a, 0xf2, 0x1c, 0x3f, 0x94, 0xa0, 0x78, 0xb1, 0x85,
	0x44, 0xb3, 0x0d, 0x04, 0x6e, 0x84, 0x62, 0x97, 0x76, 0x6b, 0xef, 0x13, 0xdb, 0xc0, 0x39, 0xb0,
	0xe4, 0x65, 0x06, 0x81, 0x67, 0x03, 0x8d, 0x18, 0xfd, 0x43, 0xb8, 0xb7, 0x30, 0x99, 0x29, 0x7c,
	0xfb, 0x0e, 0x4a, 0xdf, 0x5b, 0xf8, 0x1d, 0x7e, 0xcc, 0x65, 0x9a, 0x15, 0x90, 0xa8, 0x4c, 0x32,
	0xa1, 0x13, 0x96, 0x5b, 0x86, 0x29, 0xa9, 0x8e, 0x43, 0xff, 0xa3, 0xb9, 0x5b, 0x98, 0xab, 0xd9,
	0x7b, 0xea, 0xf3, 0xa6, 0xce, 0xc9, 0x4b, 0xec, 0x2f, 0x0b, 0x9e, 0x7d, 0x4d, 0x58, 0xa9, 0x41,
	0x6e, 0xd3, 0xc2, 0x20, 0x7a, 0xb4, 0x67, 0xdc, 0x59, 0x6d, 0x92, 0x67, 0x18, 0x9b, 0x86, 0x12,
	0xa5, 0x41, 0xd4, 0xa4, 0x76, 0x66, 0x0b, 0x0d, 0x62, 0xf4, 0x07, 0xe1, 0xc1, 0x67, 0x91, 0xa7,
	0x1a, 0xae, 0x98, 0xe7, 0x92, 0x0b, 0xae, 0x52, 0x33, 0x1c, 0xcd, 0x74, 0x01, 0x35, 0xba, 0x15,
	0x24, 0xc2, 0xdd, 0x1c, 0x2c, 0x34, 0xe3, 0xa5, 0x81, 0xee, 0xd0, 0xa6, 0x45, 0x3e, 0xe0, 0x47,
	0xb6, 0xcb, 0x44, 0xda, 0x8c, 0x2a, 0x70, 0x23, 0x37, 0xee, 0xbe, 0x0a, 0xc6, 0x97, 0x1f, 0xbc,
	0x2a, 0x39, 0xf5, 0xf6, 0xc7, 0xa1, 0x43, 0x7d, 0xd5, 0x34, 0xd5, 0x5b, 0xef, 0xe7, 0xef, 0xa1,
	0x33, 0x7d, 0xf3, 0xb7, 0x0a, 0xd1, 0xbe, 0x0a, 0xd1, 0xa1, 0x0a, 0xd1, 0x4d, 0x15, 0xa2, 0x5f,
	0xa7, 0xd0, 0x39, 0x9c, 0x42, 0xe7, 0xff, 0x29, 0x74, 0xbe, 0x0c, 0x2e, 0x8b, 0xf2, 0xa3, 0xb1,
	0x2a, 0x7a, 0x27, 0x40, 0x2d, 0xdb, 0x66, 0x0d, 0x5e, 0xdf, 0x06, 0x00, 0x00, 0xff, 0xff, 0x3f,
	0xc8, 0xad, 0x7c, 0x4e, 0x02, 0x00, 0x00,
}

func (this *Price) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Price)
	if !ok {
		that2, ok := that.(Price)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.ResolveTime != that1.ResolveTime {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	return true
}
func (this *SymbolRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SymbolRequest)
	if !ok {
		that2, ok := that.(SymbolRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.OracleScriptID != that1.OracleScriptID {
		return false
	}
	if this.BlockInterval != that1.BlockInterval {
		return false
	}
	if this.PriceStep != that1.PriceStep {
		return false
	}
	return true
}
func (this *UpdateSymbolRequestProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSymbolRequestProposal)
	if !ok {
		that2, ok := that.(UpdateSymbolRequestProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.SymbolRequests) != len(that1.SymbolRequests) {
		return false
	}
	for i := range this.SymbolRequests {
		if !this.SymbolRequests[i].Equal(&that1.SymbolRequests[i]) {
			return false
		}
	}
	return true
}
func (m *Price) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Price) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Price) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintPricefeed(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if m.ResolveTime != 0 {
		i = encodeVarintPricefeed(dAtA, i, uint64(m.ResolveTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Price != 0 {
		i = encodeVarintPricefeed(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintPricefeed(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SymbolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SymbolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SymbolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PriceStep != 0 {
		i = encodeVarintPricefeed(dAtA, i, uint64(m.PriceStep))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockInterval != 0 {
		i = encodeVarintPricefeed(dAtA, i, uint64(m.BlockInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.OracleScriptID != 0 {
		i = encodeVarintPricefeed(dAtA, i, uint64(m.OracleScriptID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintPricefeed(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSymbolRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSymbolRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSymbolRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SymbolRequests) > 0 {
		for iNdEx := len(m.SymbolRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SymbolRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPricefeed(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPricefeed(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPricefeed(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPricefeed(dAtA []byte, offset int, v uint64) int {
	offset -= sovPricefeed(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Price) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovPricefeed(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovPricefeed(uint64(m.Price))
	}
	if m.ResolveTime != 0 {
		n += 1 + sovPricefeed(uint64(m.ResolveTime))
	}
	if m.Nonce != 0 {
		n += 1 + sovPricefeed(uint64(m.Nonce))
	}
	return n
}

func (m *SymbolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovPricefeed(uint64(l))
	}
	if m.OracleScriptID != 0 {
		n += 1 + sovPricefeed(uint64(m.OracleScriptID))
	}
	if m.BlockInterval != 0 {
		n += 1 + sovPricefeed(uint64(m.BlockInterval))
	}
	if m.PriceStep != 0 {
		n += 1 + sovPricefeed(uint64(m.PriceStep))
	}
	return n
}

func (m *UpdateSymbolRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPricefeed(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPricefeed(uint64(l))
	}
	if len(m.SymbolRequests) > 0 {
		for _, e := range m.SymbolRequests {
			l = e.Size()
			n += 1 + l + sovPricefeed(uint64(l))
		}
	}
	return n
}

func sovPricefeed(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPricefeed(x uint64) (n int) {
	return sovPricefeed(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Price) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPricefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Price: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Price: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPricefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPricefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveTime", wireType)
			}
			m.ResolveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPricefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPricefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SymbolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPricefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymbolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymbolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPricefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPricefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptID", wireType)
			}
			m.OracleScriptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInterval", wireType)
			}
			m.BlockInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStep", wireType)
			}
			m.PriceStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceStep |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPricefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPricefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSymbolRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPricefeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSymbolRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSymbolRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPricefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPricefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPricefeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPricefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPricefeed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPricefeed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolRequests = append(m.SymbolRequests, SymbolRequest{})
			if err := m.SymbolRequests[len(m.SymbolRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPricefeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPricefeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPricefeed(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPricefeed
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPricefeed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPricefeed
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPricefeed
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPricefeed
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPricefeed        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPricefeed          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPricefeed = fmt.Errorf("proto: unexpected end of group")
)
