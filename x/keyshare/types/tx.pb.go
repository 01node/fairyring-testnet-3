// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/keyshare/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterValidator struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgRegisterValidator) Reset()         { *m = MsgRegisterValidator{} }
func (m *MsgRegisterValidator) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterValidator) ProtoMessage()    {}
func (*MsgRegisterValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{0}
}
func (m *MsgRegisterValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterValidator.Merge(m, src)
}
func (m *MsgRegisterValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterValidator proto.InternalMessageInfo

func (m *MsgRegisterValidator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgRegisterValidatorResponse struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgRegisterValidatorResponse) Reset()         { *m = MsgRegisterValidatorResponse{} }
func (m *MsgRegisterValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterValidatorResponse) ProtoMessage()    {}
func (*MsgRegisterValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{1}
}
func (m *MsgRegisterValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterValidatorResponse.Merge(m, src)
}
func (m *MsgRegisterValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterValidatorResponse proto.InternalMessageInfo

func (m *MsgRegisterValidatorResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgSendKeyshare struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	KeyShareIndex uint64 `protobuf:"varint,3,opt,name=keyShareIndex,proto3" json:"keyShareIndex,omitempty"`
	BlockHeight   uint64 `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (m *MsgSendKeyshare) Reset()         { *m = MsgSendKeyshare{} }
func (m *MsgSendKeyshare) String() string { return proto.CompactTextString(m) }
func (*MsgSendKeyshare) ProtoMessage()    {}
func (*MsgSendKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{2}
}
func (m *MsgSendKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendKeyshare.Merge(m, src)
}
func (m *MsgSendKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendKeyshare proto.InternalMessageInfo

func (m *MsgSendKeyshare) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendKeyshare) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MsgSendKeyshare) GetKeyShareIndex() uint64 {
	if m != nil {
		return m.KeyShareIndex
	}
	return 0
}

func (m *MsgSendKeyshare) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type MsgSendKeyshareResponse struct {
	Creator             string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Keyshare            string `protobuf:"bytes,2,opt,name=keyshare,proto3" json:"keyshare,omitempty"`
	KeyshareIndex       uint64 `protobuf:"varint,3,opt,name=keyshareIndex,proto3" json:"keyshareIndex,omitempty"`
	BlockHeight         uint64 `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	ReceivedBlockHeight uint64 `protobuf:"varint,5,opt,name=receivedBlockHeight,proto3" json:"receivedBlockHeight,omitempty"`
	Success             bool   `protobuf:"varint,6,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage        string `protobuf:"bytes,7,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (m *MsgSendKeyshareResponse) Reset()         { *m = MsgSendKeyshareResponse{} }
func (m *MsgSendKeyshareResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendKeyshareResponse) ProtoMessage()    {}
func (*MsgSendKeyshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{3}
}
func (m *MsgSendKeyshareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendKeyshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendKeyshareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendKeyshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendKeyshareResponse.Merge(m, src)
}
func (m *MsgSendKeyshareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendKeyshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendKeyshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendKeyshareResponse proto.InternalMessageInfo

func (m *MsgSendKeyshareResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendKeyshareResponse) GetKeyshare() string {
	if m != nil {
		return m.Keyshare
	}
	return ""
}

func (m *MsgSendKeyshareResponse) GetKeyshareIndex() uint64 {
	if m != nil {
		return m.KeyshareIndex
	}
	return 0
}

func (m *MsgSendKeyshareResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgSendKeyshareResponse) GetReceivedBlockHeight() uint64 {
	if m != nil {
		return m.ReceivedBlockHeight
	}
	return 0
}

func (m *MsgSendKeyshareResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgSendKeyshareResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// this line is used by starport scaffolding # proto/tx/message
type MsgCreateLatestPubKey struct {
	Creator            string               `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PublicKey          string               `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Commitments        []string             `protobuf:"bytes,3,rep,name=commitments,proto3" json:"commitments,omitempty"`
	NumberOfValidators uint64               `protobuf:"varint,4,opt,name=numberOfValidators,proto3" json:"numberOfValidators,omitempty"`
	EncryptedKeyShares []*EncryptedKeyShare `protobuf:"bytes,5,rep,name=encryptedKeyShares,proto3" json:"encryptedKeyShares,omitempty"`
}

func (m *MsgCreateLatestPubKey) Reset()         { *m = MsgCreateLatestPubKey{} }
func (m *MsgCreateLatestPubKey) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLatestPubKey) ProtoMessage()    {}
func (*MsgCreateLatestPubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{4}
}
func (m *MsgCreateLatestPubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLatestPubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLatestPubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLatestPubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLatestPubKey.Merge(m, src)
}
func (m *MsgCreateLatestPubKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLatestPubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLatestPubKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLatestPubKey proto.InternalMessageInfo

func (m *MsgCreateLatestPubKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateLatestPubKey) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *MsgCreateLatestPubKey) GetCommitments() []string {
	if m != nil {
		return m.Commitments
	}
	return nil
}

func (m *MsgCreateLatestPubKey) GetNumberOfValidators() uint64 {
	if m != nil {
		return m.NumberOfValidators
	}
	return 0
}

func (m *MsgCreateLatestPubKey) GetEncryptedKeyShares() []*EncryptedKeyShare {
	if m != nil {
		return m.EncryptedKeyShares
	}
	return nil
}

type MsgCreateLatestPubKeyResponse struct {
}

func (m *MsgCreateLatestPubKeyResponse) Reset()         { *m = MsgCreateLatestPubKeyResponse{} }
func (m *MsgCreateLatestPubKeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLatestPubKeyResponse) ProtoMessage()    {}
func (*MsgCreateLatestPubKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{5}
}
func (m *MsgCreateLatestPubKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLatestPubKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLatestPubKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLatestPubKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLatestPubKeyResponse.Merge(m, src)
}
func (m *MsgCreateLatestPubKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLatestPubKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLatestPubKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLatestPubKeyResponse proto.InternalMessageInfo

type MsgOverrideLatestPubKey struct {
	Creator            string               `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PublicKey          string               `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Commitments        []string             `protobuf:"bytes,3,rep,name=commitments,proto3" json:"commitments,omitempty"`
	NumberOfValidators uint64               `protobuf:"varint,4,opt,name=numberOfValidators,proto3" json:"numberOfValidators,omitempty"`
	EncryptedKeyShares []*EncryptedKeyShare `protobuf:"bytes,5,rep,name=encryptedKeyShares,proto3" json:"encryptedKeyShares,omitempty"`
	IsQueuedPubKey     bool                 `protobuf:"varint,6,opt,name=isQueuedPubKey,proto3" json:"isQueuedPubKey,omitempty"`
}

func (m *MsgOverrideLatestPubKey) Reset()         { *m = MsgOverrideLatestPubKey{} }
func (m *MsgOverrideLatestPubKey) String() string { return proto.CompactTextString(m) }
func (*MsgOverrideLatestPubKey) ProtoMessage()    {}
func (*MsgOverrideLatestPubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{6}
}
func (m *MsgOverrideLatestPubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOverrideLatestPubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOverrideLatestPubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOverrideLatestPubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOverrideLatestPubKey.Merge(m, src)
}
func (m *MsgOverrideLatestPubKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgOverrideLatestPubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOverrideLatestPubKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOverrideLatestPubKey proto.InternalMessageInfo

func (m *MsgOverrideLatestPubKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgOverrideLatestPubKey) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *MsgOverrideLatestPubKey) GetCommitments() []string {
	if m != nil {
		return m.Commitments
	}
	return nil
}

func (m *MsgOverrideLatestPubKey) GetNumberOfValidators() uint64 {
	if m != nil {
		return m.NumberOfValidators
	}
	return 0
}

func (m *MsgOverrideLatestPubKey) GetEncryptedKeyShares() []*EncryptedKeyShare {
	if m != nil {
		return m.EncryptedKeyShares
	}
	return nil
}

func (m *MsgOverrideLatestPubKey) GetIsQueuedPubKey() bool {
	if m != nil {
		return m.IsQueuedPubKey
	}
	return false
}

type MsgOverrideLatestPubKeyResponse struct {
}

func (m *MsgOverrideLatestPubKeyResponse) Reset()         { *m = MsgOverrideLatestPubKeyResponse{} }
func (m *MsgOverrideLatestPubKeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOverrideLatestPubKeyResponse) ProtoMessage()    {}
func (*MsgOverrideLatestPubKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{7}
}
func (m *MsgOverrideLatestPubKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOverrideLatestPubKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOverrideLatestPubKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOverrideLatestPubKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOverrideLatestPubKeyResponse.Merge(m, src)
}
func (m *MsgOverrideLatestPubKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOverrideLatestPubKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOverrideLatestPubKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOverrideLatestPubKeyResponse proto.InternalMessageInfo

type MsgCreateAuthorizedAddress struct {
	Target  string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgCreateAuthorizedAddress) Reset()         { *m = MsgCreateAuthorizedAddress{} }
func (m *MsgCreateAuthorizedAddress) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAuthorizedAddress) ProtoMessage()    {}
func (*MsgCreateAuthorizedAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{8}
}
func (m *MsgCreateAuthorizedAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAuthorizedAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAuthorizedAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAuthorizedAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAuthorizedAddress.Merge(m, src)
}
func (m *MsgCreateAuthorizedAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAuthorizedAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAuthorizedAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAuthorizedAddress proto.InternalMessageInfo

func (m *MsgCreateAuthorizedAddress) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *MsgCreateAuthorizedAddress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgCreateAuthorizedAddressResponse struct {
}

func (m *MsgCreateAuthorizedAddressResponse) Reset()         { *m = MsgCreateAuthorizedAddressResponse{} }
func (m *MsgCreateAuthorizedAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAuthorizedAddressResponse) ProtoMessage()    {}
func (*MsgCreateAuthorizedAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{9}
}
func (m *MsgCreateAuthorizedAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAuthorizedAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAuthorizedAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAuthorizedAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAuthorizedAddressResponse.Merge(m, src)
}
func (m *MsgCreateAuthorizedAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAuthorizedAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAuthorizedAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAuthorizedAddressResponse proto.InternalMessageInfo

type MsgUpdateAuthorizedAddress struct {
	Target       string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	IsAuthorized bool   `protobuf:"varint,2,opt,name=isAuthorized,proto3" json:"isAuthorized,omitempty"`
	Creator      string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgUpdateAuthorizedAddress) Reset()         { *m = MsgUpdateAuthorizedAddress{} }
func (m *MsgUpdateAuthorizedAddress) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAuthorizedAddress) ProtoMessage()    {}
func (*MsgUpdateAuthorizedAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{10}
}
func (m *MsgUpdateAuthorizedAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAuthorizedAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAuthorizedAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAuthorizedAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAuthorizedAddress.Merge(m, src)
}
func (m *MsgUpdateAuthorizedAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAuthorizedAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAuthorizedAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAuthorizedAddress proto.InternalMessageInfo

func (m *MsgUpdateAuthorizedAddress) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *MsgUpdateAuthorizedAddress) GetIsAuthorized() bool {
	if m != nil {
		return m.IsAuthorized
	}
	return false
}

func (m *MsgUpdateAuthorizedAddress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgUpdateAuthorizedAddressResponse struct {
}

func (m *MsgUpdateAuthorizedAddressResponse) Reset()         { *m = MsgUpdateAuthorizedAddressResponse{} }
func (m *MsgUpdateAuthorizedAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAuthorizedAddressResponse) ProtoMessage()    {}
func (*MsgUpdateAuthorizedAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{11}
}
func (m *MsgUpdateAuthorizedAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAuthorizedAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAuthorizedAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAuthorizedAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAuthorizedAddressResponse.Merge(m, src)
}
func (m *MsgUpdateAuthorizedAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAuthorizedAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAuthorizedAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAuthorizedAddressResponse proto.InternalMessageInfo

type MsgDeleteAuthorizedAddress struct {
	Target  string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgDeleteAuthorizedAddress) Reset()         { *m = MsgDeleteAuthorizedAddress{} }
func (m *MsgDeleteAuthorizedAddress) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAuthorizedAddress) ProtoMessage()    {}
func (*MsgDeleteAuthorizedAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{12}
}
func (m *MsgDeleteAuthorizedAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAuthorizedAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAuthorizedAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAuthorizedAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAuthorizedAddress.Merge(m, src)
}
func (m *MsgDeleteAuthorizedAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAuthorizedAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAuthorizedAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAuthorizedAddress proto.InternalMessageInfo

func (m *MsgDeleteAuthorizedAddress) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *MsgDeleteAuthorizedAddress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgDeleteAuthorizedAddressResponse struct {
}

func (m *MsgDeleteAuthorizedAddressResponse) Reset()         { *m = MsgDeleteAuthorizedAddressResponse{} }
func (m *MsgDeleteAuthorizedAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAuthorizedAddressResponse) ProtoMessage()    {}
func (*MsgDeleteAuthorizedAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{13}
}
func (m *MsgDeleteAuthorizedAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAuthorizedAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAuthorizedAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAuthorizedAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAuthorizedAddressResponse.Merge(m, src)
}
func (m *MsgDeleteAuthorizedAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAuthorizedAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAuthorizedAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAuthorizedAddressResponse proto.InternalMessageInfo

type MsgCreateGeneralKeyShare struct {
	Creator             string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	IdType              string `protobuf:"bytes,2,opt,name=idType,proto3" json:"idType,omitempty"`
	IdValue             string `protobuf:"bytes,3,opt,name=idValue,proto3" json:"idValue,omitempty"`
	KeyShare            string `protobuf:"bytes,4,opt,name=keyShare,proto3" json:"keyShare,omitempty"`
	KeyShareIndex       uint64 `protobuf:"varint,5,opt,name=keyShareIndex,proto3" json:"keyShareIndex,omitempty"`
	ReceivedTimestamp   uint64 `protobuf:"varint,6,opt,name=receivedTimestamp,proto3" json:"receivedTimestamp,omitempty"`
	ReceivedBlockHeight uint64 `protobuf:"varint,7,opt,name=receivedBlockHeight,proto3" json:"receivedBlockHeight,omitempty"`
}

func (m *MsgCreateGeneralKeyShare) Reset()         { *m = MsgCreateGeneralKeyShare{} }
func (m *MsgCreateGeneralKeyShare) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGeneralKeyShare) ProtoMessage()    {}
func (*MsgCreateGeneralKeyShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{14}
}
func (m *MsgCreateGeneralKeyShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGeneralKeyShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGeneralKeyShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGeneralKeyShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGeneralKeyShare.Merge(m, src)
}
func (m *MsgCreateGeneralKeyShare) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGeneralKeyShare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGeneralKeyShare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGeneralKeyShare proto.InternalMessageInfo

func (m *MsgCreateGeneralKeyShare) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateGeneralKeyShare) GetIdType() string {
	if m != nil {
		return m.IdType
	}
	return ""
}

func (m *MsgCreateGeneralKeyShare) GetIdValue() string {
	if m != nil {
		return m.IdValue
	}
	return ""
}

func (m *MsgCreateGeneralKeyShare) GetKeyShare() string {
	if m != nil {
		return m.KeyShare
	}
	return ""
}

func (m *MsgCreateGeneralKeyShare) GetKeyShareIndex() uint64 {
	if m != nil {
		return m.KeyShareIndex
	}
	return 0
}

func (m *MsgCreateGeneralKeyShare) GetReceivedTimestamp() uint64 {
	if m != nil {
		return m.ReceivedTimestamp
	}
	return 0
}

func (m *MsgCreateGeneralKeyShare) GetReceivedBlockHeight() uint64 {
	if m != nil {
		return m.ReceivedBlockHeight
	}
	return 0
}

type MsgCreateGeneralKeyShareResponse struct {
	Creator             string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	IdType              string `protobuf:"bytes,2,opt,name=idType,proto3" json:"idType,omitempty"`
	IdValue             string `protobuf:"bytes,3,opt,name=idValue,proto3" json:"idValue,omitempty"`
	KeyShare            string `protobuf:"bytes,4,opt,name=keyShare,proto3" json:"keyShare,omitempty"`
	KeyShareIndex       uint64 `protobuf:"varint,5,opt,name=keyShareIndex,proto3" json:"keyShareIndex,omitempty"`
	ReceivedBlockHeight uint64 `protobuf:"varint,6,opt,name=receivedBlockHeight,proto3" json:"receivedBlockHeight,omitempty"`
	Success             bool   `protobuf:"varint,7,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage        string `protobuf:"bytes,8,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (m *MsgCreateGeneralKeyShareResponse) Reset()         { *m = MsgCreateGeneralKeyShareResponse{} }
func (m *MsgCreateGeneralKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGeneralKeyShareResponse) ProtoMessage()    {}
func (*MsgCreateGeneralKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f96ac6a55f1845c, []int{15}
}
func (m *MsgCreateGeneralKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGeneralKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGeneralKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGeneralKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGeneralKeyShareResponse.Merge(m, src)
}
func (m *MsgCreateGeneralKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGeneralKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGeneralKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGeneralKeyShareResponse proto.InternalMessageInfo

func (m *MsgCreateGeneralKeyShareResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateGeneralKeyShareResponse) GetIdType() string {
	if m != nil {
		return m.IdType
	}
	return ""
}

func (m *MsgCreateGeneralKeyShareResponse) GetIdValue() string {
	if m != nil {
		return m.IdValue
	}
	return ""
}

func (m *MsgCreateGeneralKeyShareResponse) GetKeyShare() string {
	if m != nil {
		return m.KeyShare
	}
	return ""
}

func (m *MsgCreateGeneralKeyShareResponse) GetKeyShareIndex() uint64 {
	if m != nil {
		return m.KeyShareIndex
	}
	return 0
}

func (m *MsgCreateGeneralKeyShareResponse) GetReceivedBlockHeight() uint64 {
	if m != nil {
		return m.ReceivedBlockHeight
	}
	return 0
}

func (m *MsgCreateGeneralKeyShareResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgCreateGeneralKeyShareResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgRegisterValidator)(nil), "fairyring.keyshare.MsgRegisterValidator")
	proto.RegisterType((*MsgRegisterValidatorResponse)(nil), "fairyring.keyshare.MsgRegisterValidatorResponse")
	proto.RegisterType((*MsgSendKeyshare)(nil), "fairyring.keyshare.MsgSendKeyshare")
	proto.RegisterType((*MsgSendKeyshareResponse)(nil), "fairyring.keyshare.MsgSendKeyshareResponse")
	proto.RegisterType((*MsgCreateLatestPubKey)(nil), "fairyring.keyshare.MsgCreateLatestPubKey")
	proto.RegisterType((*MsgCreateLatestPubKeyResponse)(nil), "fairyring.keyshare.MsgCreateLatestPubKeyResponse")
	proto.RegisterType((*MsgOverrideLatestPubKey)(nil), "fairyring.keyshare.MsgOverrideLatestPubKey")
	proto.RegisterType((*MsgOverrideLatestPubKeyResponse)(nil), "fairyring.keyshare.MsgOverrideLatestPubKeyResponse")
	proto.RegisterType((*MsgCreateAuthorizedAddress)(nil), "fairyring.keyshare.MsgCreateAuthorizedAddress")
	proto.RegisterType((*MsgCreateAuthorizedAddressResponse)(nil), "fairyring.keyshare.MsgCreateAuthorizedAddressResponse")
	proto.RegisterType((*MsgUpdateAuthorizedAddress)(nil), "fairyring.keyshare.MsgUpdateAuthorizedAddress")
	proto.RegisterType((*MsgUpdateAuthorizedAddressResponse)(nil), "fairyring.keyshare.MsgUpdateAuthorizedAddressResponse")
	proto.RegisterType((*MsgDeleteAuthorizedAddress)(nil), "fairyring.keyshare.MsgDeleteAuthorizedAddress")
	proto.RegisterType((*MsgDeleteAuthorizedAddressResponse)(nil), "fairyring.keyshare.MsgDeleteAuthorizedAddressResponse")
	proto.RegisterType((*MsgCreateGeneralKeyShare)(nil), "fairyring.keyshare.MsgCreateGeneralKeyShare")
	proto.RegisterType((*MsgCreateGeneralKeyShareResponse)(nil), "fairyring.keyshare.MsgCreateGeneralKeyShareResponse")
}

func init() { proto.RegisterFile("fairyring/keyshare/tx.proto", fileDescriptor_1f96ac6a55f1845c) }

var fileDescriptor_1f96ac6a55f1845c = []byte{
	// 851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0x4b, 0x6f, 0xe3, 0x54,
	0x14, 0xae, 0x93, 0x36, 0x49, 0xcf, 0x14, 0xd0, 0x5c, 0xe6, 0x61, 0x99, 0x21, 0x63, 0xcc, 0x80,
	0x02, 0x8c, 0x92, 0x32, 0x83, 0x10, 0xdb, 0x19, 0x9e, 0x55, 0x09, 0x05, 0xf7, 0xb1, 0x60, 0x53,
	0x1c, 0xfb, 0xd4, 0xb9, 0x4a, 0xfc, 0xd0, 0xbd, 0x76, 0x15, 0xc3, 0x8a, 0x15, 0x6c, 0x90, 0xf8,
	0x09, 0x88, 0x5f, 0xc3, 0x8e, 0x2e, 0x59, 0xa2, 0xf6, 0x4f, 0xb0, 0x44, 0x76, 0x6c, 0xd7, 0x49,
	0xee, 0x4d, 0x13, 0x09, 0x89, 0xc5, 0xec, 0x72, 0xcf, 0xfd, 0xee, 0x3d, 0xdf, 0xf9, 0x7c, 0xf2,
	0x1d, 0x1b, 0x5e, 0x3b, 0xb3, 0x28, 0x4b, 0x18, 0xf5, 0xdd, 0xde, 0x08, 0x13, 0x3e, 0xb4, 0x18,
	0xf6, 0xa2, 0x49, 0x37, 0x64, 0x41, 0x14, 0x10, 0x52, 0x6e, 0x76, 0x8b, 0x4d, 0xed, 0x5d, 0xc1,
	0x01, 0x17, 0x7d, 0x64, 0xd6, 0xf8, 0x74, 0x84, 0xc9, 0x69, 0x16, 0x99, 0x9e, 0xd7, 0x74, 0x01,
	0x36, 0x8c, 0x07, 0x29, 0x6e, 0x8a, 0x30, 0x76, 0xe1, 0x4e, 0x9f, 0xbb, 0x26, 0xba, 0x94, 0x47,
	0xc8, 0x4e, 0xac, 0x31, 0x75, 0xac, 0x28, 0x60, 0x44, 0x85, 0xa6, 0xcd, 0x30, 0xfd, 0xa9, 0x2a,
	0xba, 0xd2, 0xd9, 0x36, 0x8b, 0xa5, 0xf1, 0x11, 0x3c, 0x10, 0x9d, 0x30, 0x91, 0x87, 0x81, 0xcf,
	0x71, 0xc9, 0xc9, 0x5f, 0x14, 0x78, 0xa5, 0xcf, 0xdd, 0x43, 0xf4, 0x9d, 0xfd, 0x9c, 0x8d, 0x1c,
	0x9d, 0xee, 0x78, 0xc8, 0xb9, 0xe5, 0xa2, 0x5a, 0x9b, 0xee, 0xe4, 0x4b, 0xf2, 0x08, 0x5e, 0x1a,
	0x61, 0x72, 0x98, 0x9e, 0xdf, 0xf3, 0x1d, 0x9c, 0xa8, 0x75, 0x5d, 0xe9, 0x6c, 0x9a, 0xb3, 0x41,
	0xa2, 0xc3, 0xad, 0xc1, 0x38, 0xb0, 0x47, 0x5f, 0x20, 0x75, 0x87, 0x91, 0xba, 0x99, 0x61, 0xaa,
	0x21, 0xe3, 0xa7, 0x1a, 0xdc, 0x9f, 0xe3, 0x73, 0x73, 0x15, 0x44, 0x83, 0x56, 0xa1, 0x65, 0x4e,
	0xac, 0x5c, 0xe7, 0xcc, 0xb8, 0x88, 0x19, 0x5f, 0x83, 0x19, 0xd9, 0x85, 0x57, 0x19, 0xda, 0x48,
	0xcf, 0xd1, 0x79, 0x5e, 0x41, 0x6e, 0x65, 0x48, 0xd1, 0x56, 0xca, 0x97, 0xc7, 0xb6, 0x8d, 0x9c,
	0xab, 0x0d, 0x5d, 0xe9, 0xb4, 0xcc, 0x62, 0x49, 0x0c, 0xd8, 0x41, 0xc6, 0x02, 0xd6, 0xcf, 0xc5,
	0x6c, 0x66, 0x9c, 0x67, 0x62, 0xc6, 0x3f, 0x0a, 0xdc, 0xed, 0x73, 0xf7, 0xe3, 0xb4, 0x44, 0xfc,
	0xd2, 0x8a, 0x90, 0x47, 0x5f, 0xc7, 0x83, 0x7d, 0x4c, 0x96, 0xe8, 0xf0, 0x00, 0xb6, 0xc3, 0x78,
	0x30, 0xa6, 0xf6, 0x3e, 0x26, 0xb9, 0x10, 0xd7, 0x81, 0xb4, 0x46, 0x3b, 0xf0, 0x3c, 0x1a, 0x79,
	0xe8, 0x47, 0x5c, 0xad, 0xeb, 0xf5, 0xce, 0xb6, 0x59, 0x0d, 0x91, 0x2e, 0x10, 0x3f, 0xf6, 0x06,
	0xc8, 0x0e, 0xce, 0xca, 0x26, 0xe2, 0xb9, 0x18, 0x82, 0x1d, 0x72, 0x0c, 0x04, 0x7d, 0x9b, 0x25,
	0x61, 0x84, 0xe9, 0xe3, 0xca, 0x9e, 0x34, 0x57, 0xb7, 0xf4, 0x7a, 0xe7, 0xd6, 0x93, 0xb7, 0xba,
	0x8b, 0x7f, 0x94, 0xee, 0xa7, 0xf3, 0x68, 0x53, 0x70, 0x81, 0xf1, 0x10, 0x5e, 0x17, 0x56, 0x5e,
	0x74, 0x82, 0xf1, 0xfb, 0xb4, 0x4b, 0x0e, 0xce, 0x91, 0x31, 0xea, 0xbc, 0x58, 0xea, 0x90, 0xb7,
	0xe1, 0x65, 0xca, 0xbf, 0x89, 0x31, 0x46, 0x67, 0x5a, 0x72, 0xde, 0x5d, 0x73, 0x51, 0xe3, 0x0d,
	0x78, 0x28, 0xd1, 0xa8, 0xd4, 0xf1, 0x2b, 0xd0, 0x4a, 0xa1, 0x9f, 0xc5, 0xd1, 0x30, 0x60, 0xf4,
	0x7b, 0x74, 0x9e, 0x39, 0x0e, 0x4b, 0xbb, 0xf4, 0x1e, 0x34, 0x22, 0x8b, 0xb9, 0x18, 0xe5, 0x42,
	0xe6, 0xab, 0xaa, 0xc2, 0xb5, 0x59, 0x37, 0x79, 0x04, 0x86, 0xfc, 0xbe, 0x32, 0x2b, 0xcb, 0xb2,
	0x1e, 0x87, 0xce, 0x5a, 0x59, 0x0d, 0xd8, 0xa1, 0xfc, 0x1a, 0x9e, 0xa5, 0x6e, 0x99, 0x33, 0xb1,
	0x2a, 0xb3, 0xba, 0x88, 0x99, 0x24, 0xe7, 0x9c, 0x1e, 0x9f, 0xe0, 0x18, 0xff, 0x4b, 0x3d, 0x24,
	0xf7, 0x95, 0x59, 0x7f, 0xae, 0x81, 0x5a, 0xca, 0xf6, 0xf9, 0x74, 0x6c, 0x14, 0x8f, 0x7b, 0x49,
	0x3b, 0xdf, 0x83, 0x06, 0x75, 0x8e, 0x92, 0xb0, 0xb0, 0xbc, 0x7c, 0x95, 0x9e, 0xa0, 0xce, 0x89,
	0x35, 0x8e, 0xb1, 0x10, 0x21, 0x5f, 0xe6, 0x36, 0x99, 0xdd, 0x9b, 0xb5, 0xed, 0xd4, 0x26, 0x0f,
	0x2b, 0x36, 0x59, 0x31, 0xf0, 0x2d, 0x91, 0x81, 0x3f, 0x86, 0xdb, 0x85, 0xd3, 0x1d, 0x51, 0x0f,
	0x79, 0x64, 0x79, 0x61, 0xd6, 0x7e, 0x9b, 0xe6, 0xe2, 0x86, 0xcc, 0x32, 0x9b, 0x52, 0xcb, 0x34,
	0x7e, 0xab, 0x81, 0x2e, 0x93, 0x62, 0x85, 0x39, 0xf0, 0x7f, 0x48, 0x22, 0x29, 0xb2, 0xb1, 0xd2,
	0x5c, 0x68, 0x2e, 0x9f, 0x0b, 0xad, 0xc5, 0xb9, 0xf0, 0xe4, 0xcf, 0x26, 0xd4, 0xfb, 0xdc, 0x25,
	0x01, 0xdc, 0x5e, 0x7c, 0x45, 0xe8, 0x88, 0x6c, 0x45, 0xf4, 0x6a, 0xa0, 0xed, 0xae, 0x8a, 0x2c,
	0x65, 0xff, 0x0e, 0x76, 0x66, 0x5e, 0x13, 0xde, 0x94, 0xdc, 0x50, 0x05, 0x69, 0xef, 0xad, 0x00,
	0x2a, 0x33, 0x30, 0x20, 0x82, 0x71, 0xf7, 0x8e, 0xe4, 0x8a, 0x45, 0xa8, 0xf6, 0xfe, 0xca, 0xd0,
	0x32, 0xe7, 0x04, 0xee, 0x08, 0xc7, 0x88, 0x8c, 0xb8, 0x08, 0xac, 0x3d, 0x5d, 0x03, 0x5c, 0x66,
	0xfe, 0x51, 0x81, 0xfb, 0x32, 0xeb, 0xed, 0x2e, 0x2d, 0x64, 0x01, 0xaf, 0x7d, 0xb8, 0x1e, 0x7e,
	0x86, 0x83, 0xcc, 0x88, 0x65, 0x1c, 0x24, 0x78, 0x29, 0x87, 0x1b, 0x4c, 0x37, 0xe3, 0x20, 0xb3,
	0x5c, 0x19, 0x07, 0x09, 0x5e, 0xca, 0xe1, 0x06, 0x0b, 0x26, 0x3f, 0xc0, 0x5d, 0xb1, 0xfd, 0x3e,
	0x5e, 0x2a, 0xec, 0x1c, 0x5a, 0xfb, 0x60, 0x1d, 0x74, 0x91, 0xfc, 0xf9, 0xde, 0x1f, 0x97, 0x6d,
	0xe5, 0xe2, 0xb2, 0xad, 0xfc, 0x7d, 0xd9, 0x56, 0x7e, 0xbd, 0x6a, 0x6f, 0x5c, 0x5c, 0xb5, 0x37,
	0xfe, 0xba, 0x6a, 0x6f, 0x7c, 0xdb, 0x73, 0x69, 0x34, 0x8c, 0x07, 0x5d, 0x3b, 0xf0, 0x7a, 0x9f,
	0x59, 0x94, 0x65, 0xef, 0xa3, 0xbd, 0xeb, 0x0f, 0x88, 0x49, 0xe5, 0xfb, 0x24, 0x09, 0x91, 0x0f,
	0x1a, 0xd9, 0x17, 0xc4, 0xd3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x76, 0xf0, 0x85, 0xb2, 0xc2,
	0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterValidator(ctx context.Context, in *MsgRegisterValidator, opts ...grpc.CallOption) (*MsgRegisterValidatorResponse, error)
	SendKeyshare(ctx context.Context, in *MsgSendKeyshare, opts ...grpc.CallOption) (*MsgSendKeyshareResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	CreateLatestPubKey(ctx context.Context, in *MsgCreateLatestPubKey, opts ...grpc.CallOption) (*MsgCreateLatestPubKeyResponse, error)
	OverrideLatestPubKey(ctx context.Context, in *MsgOverrideLatestPubKey, opts ...grpc.CallOption) (*MsgOverrideLatestPubKeyResponse, error)
	CreateAuthorizedAddress(ctx context.Context, in *MsgCreateAuthorizedAddress, opts ...grpc.CallOption) (*MsgCreateAuthorizedAddressResponse, error)
	UpdateAuthorizedAddress(ctx context.Context, in *MsgUpdateAuthorizedAddress, opts ...grpc.CallOption) (*MsgUpdateAuthorizedAddressResponse, error)
	DeleteAuthorizedAddress(ctx context.Context, in *MsgDeleteAuthorizedAddress, opts ...grpc.CallOption) (*MsgDeleteAuthorizedAddressResponse, error)
	CreateGeneralKeyShare(ctx context.Context, in *MsgCreateGeneralKeyShare, opts ...grpc.CallOption) (*MsgCreateGeneralKeyShareResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterValidator(ctx context.Context, in *MsgRegisterValidator, opts ...grpc.CallOption) (*MsgRegisterValidatorResponse, error) {
	out := new(MsgRegisterValidatorResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Msg/RegisterValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendKeyshare(ctx context.Context, in *MsgSendKeyshare, opts ...grpc.CallOption) (*MsgSendKeyshareResponse, error) {
	out := new(MsgSendKeyshareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Msg/SendKeyshare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateLatestPubKey(ctx context.Context, in *MsgCreateLatestPubKey, opts ...grpc.CallOption) (*MsgCreateLatestPubKeyResponse, error) {
	out := new(MsgCreateLatestPubKeyResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Msg/CreateLatestPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OverrideLatestPubKey(ctx context.Context, in *MsgOverrideLatestPubKey, opts ...grpc.CallOption) (*MsgOverrideLatestPubKeyResponse, error) {
	out := new(MsgOverrideLatestPubKeyResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Msg/OverrideLatestPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAuthorizedAddress(ctx context.Context, in *MsgCreateAuthorizedAddress, opts ...grpc.CallOption) (*MsgCreateAuthorizedAddressResponse, error) {
	out := new(MsgCreateAuthorizedAddressResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Msg/CreateAuthorizedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAuthorizedAddress(ctx context.Context, in *MsgUpdateAuthorizedAddress, opts ...grpc.CallOption) (*MsgUpdateAuthorizedAddressResponse, error) {
	out := new(MsgUpdateAuthorizedAddressResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Msg/UpdateAuthorizedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteAuthorizedAddress(ctx context.Context, in *MsgDeleteAuthorizedAddress, opts ...grpc.CallOption) (*MsgDeleteAuthorizedAddressResponse, error) {
	out := new(MsgDeleteAuthorizedAddressResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Msg/DeleteAuthorizedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGeneralKeyShare(ctx context.Context, in *MsgCreateGeneralKeyShare, opts ...grpc.CallOption) (*MsgCreateGeneralKeyShareResponse, error) {
	out := new(MsgCreateGeneralKeyShareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Msg/CreateGeneralKeyShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterValidator(context.Context, *MsgRegisterValidator) (*MsgRegisterValidatorResponse, error)
	SendKeyshare(context.Context, *MsgSendKeyshare) (*MsgSendKeyshareResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	CreateLatestPubKey(context.Context, *MsgCreateLatestPubKey) (*MsgCreateLatestPubKeyResponse, error)
	OverrideLatestPubKey(context.Context, *MsgOverrideLatestPubKey) (*MsgOverrideLatestPubKeyResponse, error)
	CreateAuthorizedAddress(context.Context, *MsgCreateAuthorizedAddress) (*MsgCreateAuthorizedAddressResponse, error)
	UpdateAuthorizedAddress(context.Context, *MsgUpdateAuthorizedAddress) (*MsgUpdateAuthorizedAddressResponse, error)
	DeleteAuthorizedAddress(context.Context, *MsgDeleteAuthorizedAddress) (*MsgDeleteAuthorizedAddressResponse, error)
	CreateGeneralKeyShare(context.Context, *MsgCreateGeneralKeyShare) (*MsgCreateGeneralKeyShareResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterValidator(ctx context.Context, req *MsgRegisterValidator) (*MsgRegisterValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterValidator not implemented")
}
func (*UnimplementedMsgServer) SendKeyshare(ctx context.Context, req *MsgSendKeyshare) (*MsgSendKeyshareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyshare not implemented")
}
func (*UnimplementedMsgServer) CreateLatestPubKey(ctx context.Context, req *MsgCreateLatestPubKey) (*MsgCreateLatestPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLatestPubKey not implemented")
}
func (*UnimplementedMsgServer) OverrideLatestPubKey(ctx context.Context, req *MsgOverrideLatestPubKey) (*MsgOverrideLatestPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideLatestPubKey not implemented")
}
func (*UnimplementedMsgServer) CreateAuthorizedAddress(ctx context.Context, req *MsgCreateAuthorizedAddress) (*MsgCreateAuthorizedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorizedAddress not implemented")
}
func (*UnimplementedMsgServer) UpdateAuthorizedAddress(ctx context.Context, req *MsgUpdateAuthorizedAddress) (*MsgUpdateAuthorizedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthorizedAddress not implemented")
}
func (*UnimplementedMsgServer) DeleteAuthorizedAddress(ctx context.Context, req *MsgDeleteAuthorizedAddress) (*MsgDeleteAuthorizedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorizedAddress not implemented")
}
func (*UnimplementedMsgServer) CreateGeneralKeyShare(ctx context.Context, req *MsgCreateGeneralKeyShare) (*MsgCreateGeneralKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGeneralKeyShare not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Msg/RegisterValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterValidator(ctx, req.(*MsgRegisterValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendKeyshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendKeyshare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendKeyshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Msg/SendKeyshare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendKeyshare(ctx, req.(*MsgSendKeyshare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateLatestPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLatestPubKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLatestPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Msg/CreateLatestPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLatestPubKey(ctx, req.(*MsgCreateLatestPubKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OverrideLatestPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOverrideLatestPubKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OverrideLatestPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Msg/OverrideLatestPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OverrideLatestPubKey(ctx, req.(*MsgOverrideLatestPubKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAuthorizedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAuthorizedAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAuthorizedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Msg/CreateAuthorizedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAuthorizedAddress(ctx, req.(*MsgCreateAuthorizedAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAuthorizedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAuthorizedAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAuthorizedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Msg/UpdateAuthorizedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAuthorizedAddress(ctx, req.(*MsgUpdateAuthorizedAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteAuthorizedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteAuthorizedAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteAuthorizedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Msg/DeleteAuthorizedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteAuthorizedAddress(ctx, req.(*MsgDeleteAuthorizedAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGeneralKeyShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGeneralKeyShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGeneralKeyShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Msg/CreateGeneralKeyShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGeneralKeyShare(ctx, req.(*MsgCreateGeneralKeyShare))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairyring.keyshare.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterValidator",
			Handler:    _Msg_RegisterValidator_Handler,
		},
		{
			MethodName: "SendKeyshare",
			Handler:    _Msg_SendKeyshare_Handler,
		},
		{
			MethodName: "CreateLatestPubKey",
			Handler:    _Msg_CreateLatestPubKey_Handler,
		},
		{
			MethodName: "OverrideLatestPubKey",
			Handler:    _Msg_OverrideLatestPubKey_Handler,
		},
		{
			MethodName: "CreateAuthorizedAddress",
			Handler:    _Msg_CreateAuthorizedAddress_Handler,
		},
		{
			MethodName: "UpdateAuthorizedAddress",
			Handler:    _Msg_UpdateAuthorizedAddress_Handler,
		},
		{
			MethodName: "DeleteAuthorizedAddress",
			Handler:    _Msg_DeleteAuthorizedAddress_Handler,
		},
		{
			MethodName: "CreateGeneralKeyShare",
			Handler:    _Msg_CreateGeneralKeyShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fairyring/keyshare/tx.proto",
}

func (m *MsgRegisterValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.KeyShareIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeyShareIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendKeyshareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendKeyshareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendKeyshareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ReceivedBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReceivedBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.KeyshareIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeyshareIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Keyshare) > 0 {
		i -= len(m.Keyshare)
		copy(dAtA[i:], m.Keyshare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Keyshare)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLatestPubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLatestPubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLatestPubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedKeyShares) > 0 {
		for iNdEx := len(m.EncryptedKeyShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedKeyShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NumberOfValidators != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumberOfValidators))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Commitments) > 0 {
		for iNdEx := len(m.Commitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commitments[iNdEx])
			copy(dAtA[i:], m.Commitments[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Commitments[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLatestPubKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLatestPubKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLatestPubKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOverrideLatestPubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOverrideLatestPubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOverrideLatestPubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsQueuedPubKey {
		i--
		if m.IsQueuedPubKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.EncryptedKeyShares) > 0 {
		for iNdEx := len(m.EncryptedKeyShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedKeyShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NumberOfValidators != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumberOfValidators))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Commitments) > 0 {
		for iNdEx := len(m.Commitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commitments[iNdEx])
			copy(dAtA[i:], m.Commitments[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Commitments[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOverrideLatestPubKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOverrideLatestPubKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOverrideLatestPubKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateAuthorizedAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAuthorizedAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAuthorizedAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAuthorizedAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAuthorizedAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAuthorizedAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAuthorizedAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAuthorizedAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAuthorizedAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsAuthorized {
		i--
		if m.IsAuthorized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAuthorizedAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAuthorizedAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAuthorizedAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAuthorizedAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAuthorizedAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAuthorizedAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteAuthorizedAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAuthorizedAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAuthorizedAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateGeneralKeyShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGeneralKeyShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGeneralKeyShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReceivedBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReceivedBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.ReceivedTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReceivedTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.KeyShareIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeyShareIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.KeyShare) > 0 {
		i -= len(m.KeyShare)
		copy(dAtA[i:], m.KeyShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyShare)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IdValue) > 0 {
		i -= len(m.IdValue)
		copy(dAtA[i:], m.IdValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IdValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IdType) > 0 {
		i -= len(m.IdType)
		copy(dAtA[i:], m.IdType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IdType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateGeneralKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGeneralKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGeneralKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x42
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ReceivedBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ReceivedBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.KeyShareIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeyShareIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.KeyShare) > 0 {
		i -= len(m.KeyShare)
		copy(dAtA[i:], m.KeyShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyShare)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IdValue) > 0 {
		i -= len(m.IdValue)
		copy(dAtA[i:], m.IdValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IdValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IdType) > 0 {
		i -= len(m.IdType)
		copy(dAtA[i:], m.IdType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IdType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.KeyShareIndex != 0 {
		n += 1 + sovTx(uint64(m.KeyShareIndex))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	return n
}

func (m *MsgSendKeyshareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Keyshare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.KeyshareIndex != 0 {
		n += 1 + sovTx(uint64(m.KeyshareIndex))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	if m.ReceivedBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.ReceivedBlockHeight))
	}
	if m.Success {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateLatestPubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Commitments) > 0 {
		for _, s := range m.Commitments {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.NumberOfValidators != 0 {
		n += 1 + sovTx(uint64(m.NumberOfValidators))
	}
	if len(m.EncryptedKeyShares) > 0 {
		for _, e := range m.EncryptedKeyShares {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateLatestPubKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOverrideLatestPubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Commitments) > 0 {
		for _, s := range m.Commitments {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.NumberOfValidators != 0 {
		n += 1 + sovTx(uint64(m.NumberOfValidators))
	}
	if len(m.EncryptedKeyShares) > 0 {
		for _, e := range m.EncryptedKeyShares {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.IsQueuedPubKey {
		n += 2
	}
	return n
}

func (m *MsgOverrideLatestPubKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateAuthorizedAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateAuthorizedAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAuthorizedAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsAuthorized {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAuthorizedAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteAuthorizedAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteAuthorizedAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateGeneralKeyShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IdType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IdValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KeyShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.KeyShareIndex != 0 {
		n += 1 + sovTx(uint64(m.KeyShareIndex))
	}
	if m.ReceivedTimestamp != 0 {
		n += 1 + sovTx(uint64(m.ReceivedTimestamp))
	}
	if m.ReceivedBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.ReceivedBlockHeight))
	}
	return n
}

func (m *MsgCreateGeneralKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IdType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IdValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KeyShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.KeyShareIndex != 0 {
		n += 1 + sovTx(uint64(m.KeyShareIndex))
	}
	if m.ReceivedBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.ReceivedBlockHeight))
	}
	if m.Success {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShareIndex", wireType)
			}
			m.KeyShareIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyShareIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendKeyshareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendKeyshareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendKeyshareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyshare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyshare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyshareIndex", wireType)
			}
			m.KeyshareIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyshareIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedBlockHeight", wireType)
			}
			m.ReceivedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLatestPubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLatestPubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLatestPubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitments = append(m.Commitments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfValidators", wireType)
			}
			m.NumberOfValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfValidators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKeyShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedKeyShares = append(m.EncryptedKeyShares, &EncryptedKeyShare{})
			if err := m.EncryptedKeyShares[len(m.EncryptedKeyShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLatestPubKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLatestPubKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLatestPubKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOverrideLatestPubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOverrideLatestPubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOverrideLatestPubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitments = append(m.Commitments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfValidators", wireType)
			}
			m.NumberOfValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfValidators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKeyShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedKeyShares = append(m.EncryptedKeyShares, &EncryptedKeyShare{})
			if err := m.EncryptedKeyShares[len(m.EncryptedKeyShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsQueuedPubKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsQueuedPubKey = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOverrideLatestPubKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOverrideLatestPubKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOverrideLatestPubKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAuthorizedAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAuthorizedAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAuthorizedAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAuthorizedAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAuthorizedAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAuthorizedAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAuthorizedAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAuthorizedAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAuthorizedAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuthorized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuthorized = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAuthorizedAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAuthorizedAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAuthorizedAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAuthorizedAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAuthorizedAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAuthorizedAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteAuthorizedAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAuthorizedAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAuthorizedAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGeneralKeyShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGeneralKeyShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGeneralKeyShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShareIndex", wireType)
			}
			m.KeyShareIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyShareIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedTimestamp", wireType)
			}
			m.ReceivedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedBlockHeight", wireType)
			}
			m.ReceivedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGeneralKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGeneralKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGeneralKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShareIndex", wireType)
			}
			m.KeyShareIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyShareIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedBlockHeight", wireType)
			}
			m.ReceivedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
