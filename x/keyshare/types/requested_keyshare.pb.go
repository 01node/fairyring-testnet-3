// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/keyshare/requested_keyshare.proto

package types

import (
	fmt "fmt"
	types "github.com/Fairblock/fairyring/x/common/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// KeyShareRequest defines the storage structure for general keyshare requests
type KeyShareRequest struct {
	Identity     string               `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey       string               `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	IbcInfo      *IBCInfo             `protobuf:"bytes,3,opt,name=ibc_info,json=ibcInfo,proto3" json:"ibc_info,omitempty"`
	Counterparty *CounterPartyIBCInfo `protobuf:"bytes,4,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	AggrKeyshare string               `protobuf:"bytes,5,opt,name=aggr_keyshare,json=aggrKeyshare,proto3" json:"aggr_keyshare,omitempty"`
	ProposalId   string               `protobuf:"bytes,6,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	RequestId    string               `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Sent         bool                 `protobuf:"varint,8,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (m *KeyShareRequest) Reset()         { *m = KeyShareRequest{} }
func (m *KeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*KeyShareRequest) ProtoMessage()    {}
func (*KeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8ed024b19ae59bd, []int{0}
}
func (m *KeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyShareRequest.Merge(m, src)
}
func (m *KeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyShareRequest proto.InternalMessageInfo

func (m *KeyShareRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *KeyShareRequest) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *KeyShareRequest) GetIbcInfo() *IBCInfo {
	if m != nil {
		return m.IbcInfo
	}
	return nil
}

func (m *KeyShareRequest) GetCounterparty() *CounterPartyIBCInfo {
	if m != nil {
		return m.Counterparty
	}
	return nil
}

func (m *KeyShareRequest) GetAggrKeyshare() string {
	if m != nil {
		return m.AggrKeyshare
	}
	return ""
}

func (m *KeyShareRequest) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *KeyShareRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *KeyShareRequest) GetSent() bool {
	if m != nil {
		return m.Sent
	}
	return false
}

// IBCInfo defines the structure to verify request for
// aggregated and encrypted keyshares in case the request was made over IBC
type IBCInfo struct {
	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChannelId    string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId       string `protobuf:"bytes,4,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *IBCInfo) Reset()         { *m = IBCInfo{} }
func (m *IBCInfo) String() string { return proto.CompactTextString(m) }
func (*IBCInfo) ProtoMessage()    {}
func (*IBCInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8ed024b19ae59bd, []int{1}
}
func (m *IBCInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCInfo.Merge(m, src)
}
func (m *IBCInfo) XXX_Size() int {
	return m.Size()
}
func (m *IBCInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IBCInfo proto.InternalMessageInfo

func (m *IBCInfo) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *IBCInfo) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *IBCInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *IBCInfo) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

// CounterPartyIBCInfo defines the structure to send aggregated
// and encrypted keyshares if the request was made over IBC
type CounterPartyIBCInfo struct {
	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChannelId    string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId       string `protobuf:"bytes,4,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *CounterPartyIBCInfo) Reset()         { *m = CounterPartyIBCInfo{} }
func (m *CounterPartyIBCInfo) String() string { return proto.CompactTextString(m) }
func (*CounterPartyIBCInfo) ProtoMessage()    {}
func (*CounterPartyIBCInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8ed024b19ae59bd, []int{2}
}
func (m *CounterPartyIBCInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterPartyIBCInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterPartyIBCInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterPartyIBCInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterPartyIBCInfo.Merge(m, src)
}
func (m *CounterPartyIBCInfo) XXX_Size() int {
	return m.Size()
}
func (m *CounterPartyIBCInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterPartyIBCInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CounterPartyIBCInfo proto.InternalMessageInfo

func (m *CounterPartyIBCInfo) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *CounterPartyIBCInfo) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *CounterPartyIBCInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *CounterPartyIBCInfo) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

// PrivateKeyshareRequest defines the stroage structure for private
// encrypted and unaggregated keyshare requests
type PrivateKeyshareRequest struct {
	Identity           string                     `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey             string                     `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	IbcInfo            *IBCInfo                   `protobuf:"bytes,3,opt,name=ibc_info,json=ibcInfo,proto3" json:"ibc_info,omitempty"`
	Counterparty       *CounterPartyIBCInfo       `protobuf:"bytes,4,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	EncryptedKeyshares []*types.EncryptedKeyshare `protobuf:"bytes,5,rep,name=encrypted_keyshares,json=encryptedKeyshares,proto3" json:"encrypted_keyshares,omitempty"`
	RequestId          string                     `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Sent               bool                       `protobuf:"varint,7,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (m *PrivateKeyshareRequest) Reset()         { *m = PrivateKeyshareRequest{} }
func (m *PrivateKeyshareRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateKeyshareRequest) ProtoMessage()    {}
func (*PrivateKeyshareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8ed024b19ae59bd, []int{3}
}
func (m *PrivateKeyshareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateKeyshareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateKeyshareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateKeyshareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateKeyshareRequest.Merge(m, src)
}
func (m *PrivateKeyshareRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateKeyshareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateKeyshareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateKeyshareRequest proto.InternalMessageInfo

func (m *PrivateKeyshareRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PrivateKeyshareRequest) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *PrivateKeyshareRequest) GetIbcInfo() *IBCInfo {
	if m != nil {
		return m.IbcInfo
	}
	return nil
}

func (m *PrivateKeyshareRequest) GetCounterparty() *CounterPartyIBCInfo {
	if m != nil {
		return m.Counterparty
	}
	return nil
}

func (m *PrivateKeyshareRequest) GetEncryptedKeyshares() []*types.EncryptedKeyshare {
	if m != nil {
		return m.EncryptedKeyshares
	}
	return nil
}

func (m *PrivateKeyshareRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *PrivateKeyshareRequest) GetSent() bool {
	if m != nil {
		return m.Sent
	}
	return false
}

func init() {
	proto.RegisterType((*KeyShareRequest)(nil), "fairyring.keyshare.KeyShareRequest")
	proto.RegisterType((*IBCInfo)(nil), "fairyring.keyshare.IBCInfo")
	proto.RegisterType((*CounterPartyIBCInfo)(nil), "fairyring.keyshare.CounterPartyIBCInfo")
	proto.RegisterType((*PrivateKeyshareRequest)(nil), "fairyring.keyshare.PrivateKeyshareRequest")
}

func init() {
	proto.RegisterFile("fairyring/keyshare/requested_keyshare.proto", fileDescriptor_e8ed024b19ae59bd)
}

var fileDescriptor_e8ed024b19ae59bd = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xee, 0xb4, 0xdd, 0xa6, 0x7d, 0xad, 0x08, 0xb3, 0xb0, 0x86, 0x5d, 0x8c, 0xa5, 0x3d, 0x58,
	0x10, 0x12, 0x58, 0xc1, 0x1f, 0xb0, 0x8b, 0x42, 0xe8, 0x65, 0xa9, 0x9e, 0xbc, 0x94, 0x64, 0xe6,
	0xb5, 0x1d, 0xda, 0x9d, 0x89, 0x93, 0xa9, 0x98, 0xb3, 0x3f, 0x40, 0xff, 0x93, 0x17, 0x8f, 0x7b,
	0x14, 0x4f, 0xd2, 0xfe, 0x11, 0xc9, 0x24, 0x69, 0xd6, 0x75, 0x3d, 0xcb, 0xde, 0x66, 0xbe, 0xf7,
	0xbd, 0x8f, 0x8f, 0x6f, 0xde, 0x3c, 0x78, 0xb1, 0x88, 0x84, 0xce, 0xb4, 0x90, 0xcb, 0x60, 0x8d,
	0x59, 0xba, 0x8a, 0x34, 0x06, 0x1a, 0x3f, 0x6c, 0x31, 0x35, 0xc8, 0xe7, 0x15, 0xe4, 0x27, 0x5a,
	0x19, 0x45, 0xe9, 0x81, 0xec, 0x57, 0x95, 0xd3, 0x71, 0x2d, 0xc0, 0xd4, 0xf5, 0xb5, 0x92, 0x81,
	0xc5, 0xf9, 0xdc, 0x64, 0x09, 0xa6, 0x45, 0xe3, 0xe8, 0x5b, 0x13, 0x1e, 0x4f, 0x31, 0x7b, 0x9b,
	0x57, 0x66, 0x85, 0x3a, 0x3d, 0x85, 0xae, 0xe0, 0x28, 0x8d, 0x30, 0x99, 0x4b, 0x86, 0x64, 0xd2,
	0x9b, 0x1d, 0xee, 0xf4, 0x04, 0x3a, 0xc9, 0x36, 0x5e, 0x63, 0xe6, 0x36, 0x6d, 0xa5, 0xbc, 0xd1,
	0x57, 0xd0, 0x15, 0x31, 0x9b, 0x0b, 0xb9, 0x50, 0x6e, 0x6b, 0x48, 0x26, 0xfd, 0xf3, 0x33, 0xff,
	0x6f, 0x4f, 0x7e, 0x78, 0x71, 0x19, 0xca, 0x85, 0x9a, 0x39, 0x22, 0x66, 0xf9, 0x81, 0x4e, 0x61,
	0xc0, 0xd4, 0x56, 0x1a, 0xd4, 0x49, 0xa4, 0x4d, 0xe6, 0xb6, 0x6d, 0xef, 0xf3, 0xfb, 0x7a, 0x2f,
	0x0b, 0xde, 0x55, 0xce, 0xab, 0x74, 0xfe, 0x68, 0xa6, 0x63, 0x78, 0x14, 0x2d, 0x97, 0xfa, 0x10,
	0x8e, 0x7b, 0x64, 0x3d, 0x0e, 0x72, 0x70, 0x5a, 0x62, 0xf4, 0x19, 0xf4, 0x13, 0xad, 0x12, 0x95,
	0x46, 0x9b, 0xb9, 0xe0, 0x6e, 0xc7, 0x52, 0xa0, 0x82, 0x42, 0x4e, 0x9f, 0x02, 0x94, 0x39, 0xe7,
	0x75, 0xc7, 0xd6, 0x7b, 0x25, 0x12, 0x72, 0x4a, 0xa1, 0x9d, 0xa2, 0x34, 0x6e, 0x77, 0x48, 0x26,
	0xdd, 0x99, 0x3d, 0x8f, 0x3e, 0x13, 0x70, 0x4a, 0x4b, 0xf4, 0x0c, 0x7a, 0x6c, 0x23, 0x50, 0xda,
	0xee, 0x32, 0xbe, 0x02, 0x08, 0x79, 0xee, 0x90, 0x29, 0x29, 0x91, 0x19, 0xa1, 0x64, 0x4e, 0x28,
	0x52, 0x1c, 0xd4, 0x60, 0x61, 0x80, 0xad, 0x22, 0x29, 0xd1, 0x1a, 0x6c, 0x15, 0x06, 0x4a, 0x24,
	0xe4, 0xf4, 0x09, 0x38, 0x89, 0xd2, 0x56, 0xbe, 0x5d, 0xbe, 0x81, 0xd2, 0x26, 0xe4, 0xa3, 0x2f,
	0x04, 0x8e, 0xef, 0x09, 0xe9, 0x3f, 0x3a, 0xfa, 0xd9, 0x84, 0x93, 0x2b, 0x2d, 0x3e, 0x46, 0x06,
	0xab, 0xfc, 0x1f, 0xfc, 0x90, 0xbd, 0x83, 0x63, 0x94, 0x4c, 0x67, 0xc9, 0xed, 0x6f, 0x98, 0xba,
	0x47, 0xc3, 0xd6, 0xa4, 0x7f, 0x3e, 0xbe, 0xa5, 0x59, 0x7c, 0x3a, 0xff, 0x75, 0x45, 0x3e, 0x24,
	0x40, 0xf1, 0x2e, 0x94, 0xde, 0x19, 0xba, 0xce, 0xbf, 0x86, 0xce, 0xa9, 0x87, 0xee, 0x22, 0xfc,
	0xbe, 0xf3, 0xc8, 0xcd, 0xce, 0x23, 0xbf, 0x76, 0x1e, 0xf9, 0xba, 0xf7, 0x1a, 0x37, 0x7b, 0xaf,
	0xf1, 0x63, 0xef, 0x35, 0xde, 0x07, 0x4b, 0x61, 0x56, 0xdb, 0x38, 0x77, 0x10, 0xbc, 0x89, 0x84,
	0x8e, 0x37, 0x8a, 0xad, 0x83, 0x7a, 0x1d, 0x7c, 0xaa, 0x37, 0x8a, 0xdd, 0x05, 0x71, 0xc7, 0x2e,
	0x83, 0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xfd, 0xd4, 0x29, 0x74, 0x04, 0x00, 0x00,
}

func (m *KeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sent {
		i--
		if m.Sent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AggrKeyshare) > 0 {
		i -= len(m.AggrKeyshare)
		copy(dAtA[i:], m.AggrKeyshare)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.AggrKeyshare)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Counterparty != nil {
		{
			size, err := m.Counterparty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestedKeyshare(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IbcInfo != nil {
		{
			size, err := m.IbcInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestedKeyshare(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IBCInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CounterPartyIBCInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterPartyIBCInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterPartyIBCInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateKeyshareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateKeyshareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateKeyshareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sent {
		i--
		if m.Sent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncryptedKeyshares) > 0 {
		for iNdEx := len(m.EncryptedKeyshares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedKeyshares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestedKeyshare(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Counterparty != nil {
		{
			size, err := m.Counterparty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestedKeyshare(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IbcInfo != nil {
		{
			size, err := m.IbcInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestedKeyshare(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestedKeyshare(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequestedKeyshare(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequestedKeyshare(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	if m.IbcInfo != nil {
		l = m.IbcInfo.Size()
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	if m.Counterparty != nil {
		l = m.Counterparty.Size()
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.AggrKeyshare)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	if m.Sent {
		n += 2
	}
	return n
}

func (m *IBCInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	return n
}

func (m *CounterPartyIBCInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	return n
}

func (m *PrivateKeyshareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	if m.IbcInfo != nil {
		l = m.IbcInfo.Size()
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	if m.Counterparty != nil {
		l = m.Counterparty.Size()
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	if len(m.EncryptedKeyshares) > 0 {
		for _, e := range m.EncryptedKeyshares {
			l = e.Size()
			n += 1 + l + sovRequestedKeyshare(uint64(l))
		}
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestedKeyshare(uint64(l))
	}
	if m.Sent {
		n += 2
	}
	return n
}

func sovRequestedKeyshare(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequestedKeyshare(x uint64) (n int) {
	return sovRequestedKeyshare(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestedKeyshare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcInfo == nil {
				m.IbcInfo = &IBCInfo{}
			}
			if err := m.IbcInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counterparty == nil {
				m.Counterparty = &CounterPartyIBCInfo{}
			}
			if err := m.Counterparty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggrKeyshare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggrKeyshare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestedKeyshare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestedKeyshare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestedKeyshare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CounterPartyIBCInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestedKeyshare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterPartyIBCInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterPartyIBCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestedKeyshare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateKeyshareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestedKeyshare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateKeyshareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateKeyshareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcInfo == nil {
				m.IbcInfo = &IBCInfo{}
			}
			if err := m.IbcInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counterparty == nil {
				m.Counterparty = &CounterPartyIBCInfo{}
			}
			if err := m.Counterparty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKeyshares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedKeyshares = append(m.EncryptedKeyshares, &types.EncryptedKeyshare{})
			if err := m.EncryptedKeyshares[len(m.EncryptedKeyshares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestedKeyshare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequestedKeyshare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestedKeyshare(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestedKeyshare
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestedKeyshare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequestedKeyshare
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequestedKeyshare
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequestedKeyshare
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequestedKeyshare        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestedKeyshare          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequestedKeyshare = fmt.Errorf("proto: unexpected end of group")
)
