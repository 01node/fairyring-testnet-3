// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/keyshare/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryVerifiableRandomnessRequest is the request type for
// the Query/VerifiableRandomness  method
type QueryVerifiableRandomnessRequest struct {
}

func (m *QueryVerifiableRandomnessRequest) Reset()         { *m = QueryVerifiableRandomnessRequest{} }
func (m *QueryVerifiableRandomnessRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifiableRandomnessRequest) ProtoMessage()    {}
func (*QueryVerifiableRandomnessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{0}
}
func (m *QueryVerifiableRandomnessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifiableRandomnessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifiableRandomnessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifiableRandomnessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifiableRandomnessRequest.Merge(m, src)
}
func (m *QueryVerifiableRandomnessRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifiableRandomnessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifiableRandomnessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifiableRandomnessRequest proto.InternalMessageInfo

// QueryVerifiableRandomnessResponse is the response type for
// the Query/VerifiableRandomness  method
type QueryVerifiableRandomnessResponse struct {
	Randomness string `protobuf:"bytes,1,opt,name=randomness,proto3" json:"randomness,omitempty"`
	Round      uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *QueryVerifiableRandomnessResponse) Reset()         { *m = QueryVerifiableRandomnessResponse{} }
func (m *QueryVerifiableRandomnessResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifiableRandomnessResponse) ProtoMessage()    {}
func (*QueryVerifiableRandomnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{1}
}
func (m *QueryVerifiableRandomnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifiableRandomnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifiableRandomnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifiableRandomnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifiableRandomnessResponse.Merge(m, src)
}
func (m *QueryVerifiableRandomnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifiableRandomnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifiableRandomnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifiableRandomnessResponse proto.InternalMessageInfo

func (m *QueryVerifiableRandomnessResponse) GetRandomness() string {
	if m != nil {
		return m.Randomness
	}
	return ""
}

func (m *QueryVerifiableRandomnessResponse) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCommitmentsRequest is request type for the Query/Commitments RPC method.
type QueryCommitmentsRequest struct {
}

func (m *QueryCommitmentsRequest) Reset()         { *m = QueryCommitmentsRequest{} }
func (m *QueryCommitmentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCommitmentsRequest) ProtoMessage()    {}
func (*QueryCommitmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{4}
}
func (m *QueryCommitmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitmentsRequest.Merge(m, src)
}
func (m *QueryCommitmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitmentsRequest proto.InternalMessageInfo

// QueryCommitmentsResponse is response type for the Query/Commitments RPC method
type QueryCommitmentsResponse struct {
	ActiveCommitments *Commitments `protobuf:"bytes,1,opt,name=active_commitments,json=activeCommitments,proto3" json:"active_commitments,omitempty"`
	QueuedCommitments *Commitments `protobuf:"bytes,2,opt,name=queued_commitments,json=queuedCommitments,proto3" json:"queued_commitments,omitempty"`
}

func (m *QueryCommitmentsResponse) Reset()         { *m = QueryCommitmentsResponse{} }
func (m *QueryCommitmentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCommitmentsResponse) ProtoMessage()    {}
func (*QueryCommitmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{5}
}
func (m *QueryCommitmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitmentsResponse.Merge(m, src)
}
func (m *QueryCommitmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitmentsResponse proto.InternalMessageInfo

func (m *QueryCommitmentsResponse) GetActiveCommitments() *Commitments {
	if m != nil {
		return m.ActiveCommitments
	}
	return nil
}

func (m *QueryCommitmentsResponse) GetQueuedCommitments() *Commitments {
	if m != nil {
		return m.QueuedCommitments
	}
	return nil
}

// QueryValidatorSetRequest is request type for the Query/ValidatorSet RPC method.
type QueryValidatorSetRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryValidatorSetRequest) Reset()         { *m = QueryValidatorSetRequest{} }
func (m *QueryValidatorSetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorSetRequest) ProtoMessage()    {}
func (*QueryValidatorSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{6}
}
func (m *QueryValidatorSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorSetRequest.Merge(m, src)
}
func (m *QueryValidatorSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorSetRequest proto.InternalMessageInfo

func (m *QueryValidatorSetRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryValidatorSetResponse is response type for the Query/ValidatorSet RPC method.
type QueryValidatorSetResponse struct {
	ValidatorSet ValidatorSet `protobuf:"bytes,1,opt,name=validator_set,json=validatorSet,proto3" json:"validator_set"`
}

func (m *QueryValidatorSetResponse) Reset()         { *m = QueryValidatorSetResponse{} }
func (m *QueryValidatorSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorSetResponse) ProtoMessage()    {}
func (*QueryValidatorSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{7}
}
func (m *QueryValidatorSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorSetResponse.Merge(m, src)
}
func (m *QueryValidatorSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorSetResponse proto.InternalMessageInfo

func (m *QueryValidatorSetResponse) GetValidatorSet() ValidatorSet {
	if m != nil {
		return m.ValidatorSet
	}
	return ValidatorSet{}
}

// QueryValidatorSetAllRequest is request type for the Query/ValidatorSetAll RPC method.
type QueryValidatorSetAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryValidatorSetAllRequest) Reset()         { *m = QueryValidatorSetAllRequest{} }
func (m *QueryValidatorSetAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorSetAllRequest) ProtoMessage()    {}
func (*QueryValidatorSetAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{8}
}
func (m *QueryValidatorSetAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorSetAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorSetAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorSetAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorSetAllRequest.Merge(m, src)
}
func (m *QueryValidatorSetAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorSetAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorSetAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorSetAllRequest proto.InternalMessageInfo

func (m *QueryValidatorSetAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryValidatorSetAllResponse is response type for the Query/ValidatorSetAll RPC method.
type QueryValidatorSetAllResponse struct {
	ValidatorSet []ValidatorSet      `protobuf:"bytes,1,rep,name=validator_set,json=validatorSet,proto3" json:"validator_set"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryValidatorSetAllResponse) Reset()         { *m = QueryValidatorSetAllResponse{} }
func (m *QueryValidatorSetAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorSetAllResponse) ProtoMessage()    {}
func (*QueryValidatorSetAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{9}
}
func (m *QueryValidatorSetAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorSetAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorSetAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorSetAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorSetAllResponse.Merge(m, src)
}
func (m *QueryValidatorSetAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorSetAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorSetAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorSetAllResponse proto.InternalMessageInfo

func (m *QueryValidatorSetAllResponse) GetValidatorSet() []ValidatorSet {
	if m != nil {
		return m.ValidatorSet
	}
	return nil
}

func (m *QueryValidatorSetAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryKeyShareRequest is request type for the Query/KeyShare RPC method.
type QueryKeyShareRequest struct {
	Validator   string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryKeyShareRequest) Reset()         { *m = QueryKeyShareRequest{} }
func (m *QueryKeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyShareRequest) ProtoMessage()    {}
func (*QueryKeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{10}
}
func (m *QueryKeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyShareRequest.Merge(m, src)
}
func (m *QueryKeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyShareRequest proto.InternalMessageInfo

func (m *QueryKeyShareRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *QueryKeyShareRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// QueryKeyShareResponse is response type for the Query/KeyShare RPC method.
type QueryKeyShareResponse struct {
	KeyShare KeyShare `protobuf:"bytes,1,opt,name=key_share,json=keyShare,proto3" json:"key_share"`
}

func (m *QueryKeyShareResponse) Reset()         { *m = QueryKeyShareResponse{} }
func (m *QueryKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyShareResponse) ProtoMessage()    {}
func (*QueryKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{11}
}
func (m *QueryKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyShareResponse.Merge(m, src)
}
func (m *QueryKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyShareResponse proto.InternalMessageInfo

func (m *QueryKeyShareResponse) GetKeyShare() KeyShare {
	if m != nil {
		return m.KeyShare
	}
	return KeyShare{}
}

// QueryKeyShareAllRequest is request type for the Query/KeyShareAll RPC method.
type QueryKeyShareAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKeyShareAllRequest) Reset()         { *m = QueryKeyShareAllRequest{} }
func (m *QueryKeyShareAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyShareAllRequest) ProtoMessage()    {}
func (*QueryKeyShareAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{12}
}
func (m *QueryKeyShareAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyShareAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyShareAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyShareAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyShareAllRequest.Merge(m, src)
}
func (m *QueryKeyShareAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyShareAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyShareAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyShareAllRequest proto.InternalMessageInfo

func (m *QueryKeyShareAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryKeyShareAllResponse is response type for the Query/KeyShareAll RPC method.
type QueryKeyShareAllResponse struct {
	KeyShare   []KeyShare          `protobuf:"bytes,1,rep,name=key_share,json=keyShare,proto3" json:"key_share"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryKeyShareAllResponse) Reset()         { *m = QueryKeyShareAllResponse{} }
func (m *QueryKeyShareAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyShareAllResponse) ProtoMessage()    {}
func (*QueryKeyShareAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{13}
}
func (m *QueryKeyShareAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyShareAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyShareAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyShareAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyShareAllResponse.Merge(m, src)
}
func (m *QueryKeyShareAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyShareAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyShareAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyShareAllResponse proto.InternalMessageInfo

func (m *QueryKeyShareAllResponse) GetKeyShare() []KeyShare {
	if m != nil {
		return m.KeyShare
	}
	return nil
}

func (m *QueryKeyShareAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDecryptionKeyRequest is request type for the Query/DecryptionKey RPC method.
type QueryDecryptionKeyRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryDecryptionKeyRequest) Reset()         { *m = QueryDecryptionKeyRequest{} }
func (m *QueryDecryptionKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDecryptionKeyRequest) ProtoMessage()    {}
func (*QueryDecryptionKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{14}
}
func (m *QueryDecryptionKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecryptionKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecryptionKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecryptionKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecryptionKeyRequest.Merge(m, src)
}
func (m *QueryDecryptionKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecryptionKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecryptionKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecryptionKeyRequest proto.InternalMessageInfo

func (m *QueryDecryptionKeyRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryDecryptionKeyResponse is response type for the Query/DecryptionKey RPC method.
type QueryDecryptionKeyResponse struct {
	DecryptionKey AggregatedKeyShare `protobuf:"bytes,1,opt,name=decryption_key,json=decryptionKey,proto3" json:"decryption_key"`
}

func (m *QueryDecryptionKeyResponse) Reset()         { *m = QueryDecryptionKeyResponse{} }
func (m *QueryDecryptionKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDecryptionKeyResponse) ProtoMessage()    {}
func (*QueryDecryptionKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{15}
}
func (m *QueryDecryptionKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecryptionKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecryptionKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecryptionKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecryptionKeyResponse.Merge(m, src)
}
func (m *QueryDecryptionKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecryptionKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecryptionKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecryptionKeyResponse proto.InternalMessageInfo

func (m *QueryDecryptionKeyResponse) GetDecryptionKey() AggregatedKeyShare {
	if m != nil {
		return m.DecryptionKey
	}
	return AggregatedKeyShare{}
}

// QueryDecryptionKeyAllRequest is request type for the Query/DecryptionKeyAll RPC method.
type QueryDecryptionKeyAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDecryptionKeyAllRequest) Reset()         { *m = QueryDecryptionKeyAllRequest{} }
func (m *QueryDecryptionKeyAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDecryptionKeyAllRequest) ProtoMessage()    {}
func (*QueryDecryptionKeyAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{16}
}
func (m *QueryDecryptionKeyAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecryptionKeyAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecryptionKeyAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecryptionKeyAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecryptionKeyAllRequest.Merge(m, src)
}
func (m *QueryDecryptionKeyAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecryptionKeyAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecryptionKeyAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecryptionKeyAllRequest proto.InternalMessageInfo

func (m *QueryDecryptionKeyAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAggregatedKeyShareAllResponse is response type for the Query/DecryptionKeyAll RPC method.
type QueryDecryptionKeyAllResponse struct {
	DecryptionKeys []AggregatedKeyShare `protobuf:"bytes,1,rep,name=decryption_keys,json=decryptionKeys,proto3" json:"decryption_keys"`
	Pagination     *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDecryptionKeyAllResponse) Reset()         { *m = QueryDecryptionKeyAllResponse{} }
func (m *QueryDecryptionKeyAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDecryptionKeyAllResponse) ProtoMessage()    {}
func (*QueryDecryptionKeyAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{17}
}
func (m *QueryDecryptionKeyAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecryptionKeyAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecryptionKeyAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecryptionKeyAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecryptionKeyAllResponse.Merge(m, src)
}
func (m *QueryDecryptionKeyAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecryptionKeyAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecryptionKeyAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecryptionKeyAllResponse proto.InternalMessageInfo

func (m *QueryDecryptionKeyAllResponse) GetDecryptionKeys() []AggregatedKeyShare {
	if m != nil {
		return m.DecryptionKeys
	}
	return nil
}

func (m *QueryDecryptionKeyAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPubKeyRequest is request type for the Query/PubKey RPC method.
type QueryPubKeyRequest struct {
}

func (m *QueryPubKeyRequest) Reset()         { *m = QueryPubKeyRequest{} }
func (m *QueryPubKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyRequest) ProtoMessage()    {}
func (*QueryPubKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{18}
}
func (m *QueryPubKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyRequest.Merge(m, src)
}
func (m *QueryPubKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyRequest proto.InternalMessageInfo

// QueryPubKeyResponse is response type for the Query/PubKey RPC method.
type QueryPubKeyResponse struct {
	ActivePubKey ActivePubKey `protobuf:"bytes,1,opt,name=active_pub_key,json=activePubKey,proto3" json:"active_pub_key"`
	QueuedPubKey QueuedPubKey `protobuf:"bytes,2,opt,name=queued_pub_key,json=queuedPubKey,proto3" json:"queued_pub_key"`
}

func (m *QueryPubKeyResponse) Reset()         { *m = QueryPubKeyResponse{} }
func (m *QueryPubKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyResponse) ProtoMessage()    {}
func (*QueryPubKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{19}
}
func (m *QueryPubKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyResponse.Merge(m, src)
}
func (m *QueryPubKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyResponse proto.InternalMessageInfo

func (m *QueryPubKeyResponse) GetActivePubKey() ActivePubKey {
	if m != nil {
		return m.ActivePubKey
	}
	return ActivePubKey{}
}

func (m *QueryPubKeyResponse) GetQueuedPubKey() QueuedPubKey {
	if m != nil {
		return m.QueuedPubKey
	}
	return QueuedPubKey{}
}

// QueryAuthorizedAddressRequest is request type for the Query/AuthorizedAddress RPC method.
type QueryAuthorizedAddressRequest struct {
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *QueryAuthorizedAddressRequest) Reset()         { *m = QueryAuthorizedAddressRequest{} }
func (m *QueryAuthorizedAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuthorizedAddressRequest) ProtoMessage()    {}
func (*QueryAuthorizedAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{20}
}
func (m *QueryAuthorizedAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuthorizedAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuthorizedAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuthorizedAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuthorizedAddressRequest.Merge(m, src)
}
func (m *QueryAuthorizedAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuthorizedAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuthorizedAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuthorizedAddressRequest proto.InternalMessageInfo

func (m *QueryAuthorizedAddressRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

// QueryAuthorizedAddressResponse is response type for the Query/AuthorizedAddress RPC method.
type QueryAuthorizedAddressResponse struct {
	AuthorizedAddress AuthorizedAddress `protobuf:"bytes,1,opt,name=authorized_address,json=authorizedAddress,proto3" json:"authorized_address"`
}

func (m *QueryAuthorizedAddressResponse) Reset()         { *m = QueryAuthorizedAddressResponse{} }
func (m *QueryAuthorizedAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuthorizedAddressResponse) ProtoMessage()    {}
func (*QueryAuthorizedAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{21}
}
func (m *QueryAuthorizedAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuthorizedAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuthorizedAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuthorizedAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuthorizedAddressResponse.Merge(m, src)
}
func (m *QueryAuthorizedAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuthorizedAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuthorizedAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuthorizedAddressResponse proto.InternalMessageInfo

func (m *QueryAuthorizedAddressResponse) GetAuthorizedAddress() AuthorizedAddress {
	if m != nil {
		return m.AuthorizedAddress
	}
	return AuthorizedAddress{}
}

// QueryAuthorizedAddressAllRequest is request type for the Query/AuthorizedAddressAll RPC method.
type QueryAuthorizedAddressAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAuthorizedAddressAllRequest) Reset()         { *m = QueryAuthorizedAddressAllRequest{} }
func (m *QueryAuthorizedAddressAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuthorizedAddressAllRequest) ProtoMessage()    {}
func (*QueryAuthorizedAddressAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{22}
}
func (m *QueryAuthorizedAddressAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuthorizedAddressAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuthorizedAddressAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuthorizedAddressAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuthorizedAddressAllRequest.Merge(m, src)
}
func (m *QueryAuthorizedAddressAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuthorizedAddressAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuthorizedAddressAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuthorizedAddressAllRequest proto.InternalMessageInfo

func (m *QueryAuthorizedAddressAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAuthorizedAddressAllResponse is response type for the Query/AuthorizedAddressAll RPC method.
type QueryAuthorizedAddressAllResponse struct {
	AuthorizedAddress []AuthorizedAddress `protobuf:"bytes,1,rep,name=authorized_address,json=authorizedAddress,proto3" json:"authorized_address"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAuthorizedAddressAllResponse) Reset()         { *m = QueryAuthorizedAddressAllResponse{} }
func (m *QueryAuthorizedAddressAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuthorizedAddressAllResponse) ProtoMessage()    {}
func (*QueryAuthorizedAddressAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{23}
}
func (m *QueryAuthorizedAddressAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuthorizedAddressAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuthorizedAddressAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuthorizedAddressAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuthorizedAddressAllResponse.Merge(m, src)
}
func (m *QueryAuthorizedAddressAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuthorizedAddressAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuthorizedAddressAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuthorizedAddressAllResponse proto.InternalMessageInfo

func (m *QueryAuthorizedAddressAllResponse) GetAuthorizedAddress() []AuthorizedAddress {
	if m != nil {
		return m.AuthorizedAddress
	}
	return nil
}

func (m *QueryAuthorizedAddressAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGeneralKeyShareRequest is request type for the Query/GeneralKeyShare RPC method.
type QueryGeneralKeyShareRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	IdType    string `protobuf:"bytes,2,opt,name=id_type,json=idType,proto3" json:"id_type,omitempty"`
	IdValue   string `protobuf:"bytes,3,opt,name=id_value,json=idValue,proto3" json:"id_value,omitempty"`
}

func (m *QueryGeneralKeyShareRequest) Reset()         { *m = QueryGeneralKeyShareRequest{} }
func (m *QueryGeneralKeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGeneralKeyShareRequest) ProtoMessage()    {}
func (*QueryGeneralKeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{24}
}
func (m *QueryGeneralKeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGeneralKeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGeneralKeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGeneralKeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGeneralKeyShareRequest.Merge(m, src)
}
func (m *QueryGeneralKeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGeneralKeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGeneralKeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGeneralKeyShareRequest proto.InternalMessageInfo

func (m *QueryGeneralKeyShareRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *QueryGeneralKeyShareRequest) GetIdType() string {
	if m != nil {
		return m.IdType
	}
	return ""
}

func (m *QueryGeneralKeyShareRequest) GetIdValue() string {
	if m != nil {
		return m.IdValue
	}
	return ""
}

// QueryGeneralKeyShareResponse is response type for the Query/GeneralKeyShare RPC method.
type QueryGeneralKeyShareResponse struct {
	GeneralKeyShare GeneralKeyShare `protobuf:"bytes,1,opt,name=general_key_share,json=generalKeyShare,proto3" json:"general_key_share"`
}

func (m *QueryGeneralKeyShareResponse) Reset()         { *m = QueryGeneralKeyShareResponse{} }
func (m *QueryGeneralKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGeneralKeyShareResponse) ProtoMessage()    {}
func (*QueryGeneralKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{25}
}
func (m *QueryGeneralKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGeneralKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGeneralKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGeneralKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGeneralKeyShareResponse.Merge(m, src)
}
func (m *QueryGeneralKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGeneralKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGeneralKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGeneralKeyShareResponse proto.InternalMessageInfo

func (m *QueryGeneralKeyShareResponse) GetGeneralKeyShare() GeneralKeyShare {
	if m != nil {
		return m.GeneralKeyShare
	}
	return GeneralKeyShare{}
}

// QueryGeneralKeyShareAllRequest is request type for the Query/GeneralKeyShareAll RPC method.
type QueryGeneralKeyShareAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGeneralKeyShareAllRequest) Reset()         { *m = QueryGeneralKeyShareAllRequest{} }
func (m *QueryGeneralKeyShareAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGeneralKeyShareAllRequest) ProtoMessage()    {}
func (*QueryGeneralKeyShareAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{26}
}
func (m *QueryGeneralKeyShareAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGeneralKeyShareAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGeneralKeyShareAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGeneralKeyShareAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGeneralKeyShareAllRequest.Merge(m, src)
}
func (m *QueryGeneralKeyShareAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGeneralKeyShareAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGeneralKeyShareAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGeneralKeyShareAllRequest proto.InternalMessageInfo

func (m *QueryGeneralKeyShareAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGeneralKeyShareAllResponse is response type for the Query/GeneralKeyShareAll RPC method.
type QueryGeneralKeyShareAllResponse struct {
	GeneralKeyShare []GeneralKeyShare   `protobuf:"bytes,1,rep,name=general_key_share,json=generalKeyShare,proto3" json:"general_key_share"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGeneralKeyShareAllResponse) Reset()         { *m = QueryGeneralKeyShareAllResponse{} }
func (m *QueryGeneralKeyShareAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGeneralKeyShareAllResponse) ProtoMessage()    {}
func (*QueryGeneralKeyShareAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_572603c2d521bf14, []int{27}
}
func (m *QueryGeneralKeyShareAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGeneralKeyShareAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGeneralKeyShareAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGeneralKeyShareAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGeneralKeyShareAllResponse.Merge(m, src)
}
func (m *QueryGeneralKeyShareAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGeneralKeyShareAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGeneralKeyShareAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGeneralKeyShareAllResponse proto.InternalMessageInfo

func (m *QueryGeneralKeyShareAllResponse) GetGeneralKeyShare() []GeneralKeyShare {
	if m != nil {
		return m.GeneralKeyShare
	}
	return nil
}

func (m *QueryGeneralKeyShareAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryVerifiableRandomnessRequest)(nil), "fairyring.keyshare.QueryVerifiableRandomnessRequest")
	proto.RegisterType((*QueryVerifiableRandomnessResponse)(nil), "fairyring.keyshare.QueryVerifiableRandomnessResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "fairyring.keyshare.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "fairyring.keyshare.QueryParamsResponse")
	proto.RegisterType((*QueryCommitmentsRequest)(nil), "fairyring.keyshare.QueryCommitmentsRequest")
	proto.RegisterType((*QueryCommitmentsResponse)(nil), "fairyring.keyshare.QueryCommitmentsResponse")
	proto.RegisterType((*QueryValidatorSetRequest)(nil), "fairyring.keyshare.QueryValidatorSetRequest")
	proto.RegisterType((*QueryValidatorSetResponse)(nil), "fairyring.keyshare.QueryValidatorSetResponse")
	proto.RegisterType((*QueryValidatorSetAllRequest)(nil), "fairyring.keyshare.QueryValidatorSetAllRequest")
	proto.RegisterType((*QueryValidatorSetAllResponse)(nil), "fairyring.keyshare.QueryValidatorSetAllResponse")
	proto.RegisterType((*QueryKeyShareRequest)(nil), "fairyring.keyshare.QueryKeyShareRequest")
	proto.RegisterType((*QueryKeyShareResponse)(nil), "fairyring.keyshare.QueryKeyShareResponse")
	proto.RegisterType((*QueryKeyShareAllRequest)(nil), "fairyring.keyshare.QueryKeyShareAllRequest")
	proto.RegisterType((*QueryKeyShareAllResponse)(nil), "fairyring.keyshare.QueryKeyShareAllResponse")
	proto.RegisterType((*QueryDecryptionKeyRequest)(nil), "fairyring.keyshare.QueryDecryptionKeyRequest")
	proto.RegisterType((*QueryDecryptionKeyResponse)(nil), "fairyring.keyshare.QueryDecryptionKeyResponse")
	proto.RegisterType((*QueryDecryptionKeyAllRequest)(nil), "fairyring.keyshare.QueryDecryptionKeyAllRequest")
	proto.RegisterType((*QueryDecryptionKeyAllResponse)(nil), "fairyring.keyshare.QueryDecryptionKeyAllResponse")
	proto.RegisterType((*QueryPubKeyRequest)(nil), "fairyring.keyshare.QueryPubKeyRequest")
	proto.RegisterType((*QueryPubKeyResponse)(nil), "fairyring.keyshare.QueryPubKeyResponse")
	proto.RegisterType((*QueryAuthorizedAddressRequest)(nil), "fairyring.keyshare.QueryAuthorizedAddressRequest")
	proto.RegisterType((*QueryAuthorizedAddressResponse)(nil), "fairyring.keyshare.QueryAuthorizedAddressResponse")
	proto.RegisterType((*QueryAuthorizedAddressAllRequest)(nil), "fairyring.keyshare.QueryAuthorizedAddressAllRequest")
	proto.RegisterType((*QueryAuthorizedAddressAllResponse)(nil), "fairyring.keyshare.QueryAuthorizedAddressAllResponse")
	proto.RegisterType((*QueryGeneralKeyShareRequest)(nil), "fairyring.keyshare.QueryGeneralKeyShareRequest")
	proto.RegisterType((*QueryGeneralKeyShareResponse)(nil), "fairyring.keyshare.QueryGeneralKeyShareResponse")
	proto.RegisterType((*QueryGeneralKeyShareAllRequest)(nil), "fairyring.keyshare.QueryGeneralKeyShareAllRequest")
	proto.RegisterType((*QueryGeneralKeyShareAllResponse)(nil), "fairyring.keyshare.QueryGeneralKeyShareAllResponse")
}

func init() { proto.RegisterFile("fairyring/keyshare/query.proto", fileDescriptor_572603c2d521bf14) }

var fileDescriptor_572603c2d521bf14 = []byte{
	// 1445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0xcf, 0x24, 0x6d, 0xda, 0x4c, 0xda, 0xe6, 0x9b, 0xf9, 0x06, 0x9a, 0x6e, 0xd3, 0x4d, 0x32,
	0x6d, 0x93, 0xb4, 0x21, 0x3b, 0x4d, 0x02, 0x2a, 0x42, 0x42, 0x90, 0x82, 0xda, 0xa2, 0xa2, 0xaa,
	0xdd, 0x96, 0x02, 0xbd, 0xac, 0x66, 0xe3, 0xa9, 0xd7, 0x64, 0xd7, 0xde, 0xd8, 0xde, 0xa8, 0x4b,
	0x58, 0x0e, 0xfc, 0x03, 0x80, 0xb8, 0x83, 0x50, 0x39, 0x70, 0xe0, 0x00, 0x02, 0x71, 0xe0, 0x82,
	0x90, 0x38, 0xf4, 0x58, 0x89, 0x0b, 0x27, 0x84, 0x5a, 0x24, 0xfe, 0x07, 0x4e, 0xc8, 0xe3, 0x67,
	0xaf, 0xed, 0x1d, 0x7b, 0xbd, 0x34, 0xb9, 0xac, 0xd6, 0x33, 0xef, 0xc7, 0xe7, 0xfd, 0x98, 0x37,
	0x1f, 0x1b, 0x17, 0xef, 0x71, 0xc3, 0x6e, 0xdb, 0x86, 0xa9, 0xb3, 0x2d, 0xd1, 0x76, 0x6a, 0xdc,
	0x16, 0x6c, 0xbb, 0x25, 0xec, 0x76, 0xa9, 0x69, 0x5b, 0xae, 0x45, 0x48, 0xb8, 0x5f, 0x0a, 0xf6,
	0x0b, 0x93, 0xbc, 0x61, 0x98, 0x16, 0x93, 0xbf, 0xbe, 0x58, 0x61, 0x4a, 0xb7, 0x74, 0x4b, 0xfe,
	0x65, 0xde, 0x3f, 0x58, 0x9d, 0xd1, 0x2d, 0x4b, 0xaf, 0x0b, 0xc6, 0x9b, 0x06, 0xe3, 0xa6, 0x69,
	0xb9, 0xdc, 0x35, 0x2c, 0xd3, 0x81, 0xdd, 0xf3, 0x9b, 0x96, 0xd3, 0xb0, 0x1c, 0x56, 0xe5, 0x0e,
	0xf8, 0x64, 0x3b, 0xab, 0x55, 0xe1, 0xf2, 0x55, 0xd6, 0xe4, 0xba, 0x61, 0x4a, 0x61, 0x90, 0x9d,
	0x55, 0xc0, 0x6c, 0x72, 0x9b, 0x37, 0x02, 0x63, 0x0b, 0x0a, 0x81, 0x1d, 0x5e, 0x37, 0x34, 0xee,
	0x5a, 0x76, 0xc5, 0x11, 0x2e, 0xc8, 0x51, 0x85, 0xdc, 0x96, 0x68, 0x57, 0xe4, 0x3f, 0x90, 0x59,
	0x51, 0xc8, 0x70, 0x5d, 0xb7, 0x85, 0xce, 0x5d, 0xa1, 0x55, 0x92, 0xe2, 0x73, 0x2a, 0x6c, 0xad,
	0xaa, 0x27, 0x07, 0x12, 0xcb, 0x2a, 0x83, 0x2d, 0xb7, 0x66, 0xd9, 0xc6, 0xfb, 0x42, 0xab, 0x70,
	0x4d, 0xb3, 0x85, 0x13, 0x44, 0x72, 0x46, 0x21, 0xbc, 0x69, 0x35, 0x1a, 0x86, 0xdb, 0x10, 0xa6,
	0x0b, 0x52, 0x94, 0xe2, 0xb9, 0x9b, 0x5e, 0xca, 0xee, 0x08, 0xdb, 0xb8, 0x67, 0xf0, 0x6a, 0x5d,
	0x94, 0xb9, 0xa9, 0x59, 0x0d, 0x53, 0x38, 0x4e, 0x59, 0x6c, 0xb7, 0x84, 0xe3, 0xd2, 0x77, 0xf1,
	0x7c, 0x86, 0x8c, 0xd3, 0xb4, 0x4c, 0x47, 0x90, 0x22, 0xc6, 0x76, 0xb8, 0x3a, 0x8d, 0xe6, 0xd0,
	0xd2, 0x58, 0x39, 0xb2, 0x42, 0xa6, 0xf0, 0x41, 0xdb, 0x6a, 0x99, 0xda, 0xf4, 0xf0, 0x1c, 0x5a,
	0x3a, 0x50, 0xf6, 0x1f, 0xe8, 0x14, 0x26, 0xd2, 0xf4, 0x0d, 0x59, 0x83, 0xc0, 0xe1, 0x6d, 0xfc,
	0xff, 0xd8, 0x2a, 0xb8, 0x78, 0x19, 0x8f, 0xfa, 0xb5, 0x92, 0xe6, 0xc7, 0xd7, 0x0a, 0xa5, 0xde,
	0xa6, 0x2a, 0xf9, 0x3a, 0x97, 0xc6, 0x1e, 0xfe, 0x31, 0x3b, 0xf4, 0xf5, 0xdf, 0xdf, 0x9e, 0x47,
	0x65, 0x50, 0xa2, 0x27, 0xf0, 0x71, 0x69, 0xf5, 0xb5, 0x6e, 0x12, 0x02, 0x87, 0x3f, 0x21, 0x3c,
	0xdd, 0xbb, 0x07, 0x6e, 0xaf, 0x63, 0xc2, 0x37, 0x5d, 0x63, 0x47, 0x54, 0x22, 0xe9, 0x03, 0x08,
	0xb3, 0x2a, 0x08, 0x51, 0x23, 0x93, 0xbe, 0x6a, 0x64, 0xc9, 0xb3, 0xb7, 0xdd, 0x12, 0x2d, 0xa1,
	0xc5, 0xec, 0x0d, 0xe7, 0xb4, 0xe7, 0xab, 0x46, 0x96, 0xe8, 0x05, 0xc0, 0x7e, 0x27, 0x68, 0xd3,
	0x5b, 0xc2, 0x85, 0xc0, 0xbc, 0xac, 0x1b, 0xa6, 0x26, 0xee, 0x43, 0x41, 0xfc, 0x07, 0x5a, 0xc3,
	0x27, 0x14, 0x1a, 0x10, 0xee, 0x35, 0x7c, 0x34, 0xd6, 0xf0, 0x10, 0xe9, 0x9c, 0x0a, 0x59, 0xd4,
	0xc0, 0xa5, 0x03, 0x5e, 0xca, 0xcb, 0x47, 0x76, 0x22, 0x6b, 0x54, 0xe0, 0x93, 0x3d, 0x9e, 0x36,
	0xea, 0xf5, 0x00, 0xde, 0x65, 0x8c, 0xbb, 0x47, 0x14, 0x1c, 0x2d, 0x94, 0xfc, 0xf3, 0x5c, 0xf2,
	0xce, 0x73, 0xc9, 0x9f, 0x21, 0x70, 0x9e, 0x4b, 0x37, 0xb8, 0x2e, 0x40, 0xb7, 0x1c, 0xd1, 0xa4,
	0x3f, 0x20, 0x3c, 0xa3, 0xf6, 0x93, 0x1e, 0xd4, 0xc8, 0x7f, 0x0d, 0x8a, 0x5c, 0x89, 0xa1, 0xf6,
	0x0b, 0xb7, 0xd8, 0x17, 0xb5, 0x8f, 0x24, 0x06, 0xfb, 0x6d, 0x3c, 0x25, 0x51, 0x5f, 0x13, 0xed,
	0x5b, 0x9e, 0xeb, 0x20, 0x2d, 0x33, 0x78, 0x2c, 0x74, 0x08, 0x95, 0xeb, 0x2e, 0x90, 0x79, 0x7c,
	0xa4, 0x5a, 0xb7, 0x36, 0xb7, 0x2a, 0x35, 0x61, 0xe8, 0x35, 0x17, 0x0e, 0xd4, 0xb8, 0x5c, 0xbb,
	0x2a, 0x97, 0xe8, 0x3b, 0xf8, 0x99, 0x84, 0x61, 0xc8, 0xc3, 0x2b, 0x78, 0x2c, 0x1c, 0x3b, 0x90,
	0xef, 0x19, 0x55, 0x0e, 0x02, 0x45, 0x88, 0xff, 0xf0, 0x16, 0x3c, 0x53, 0x0e, 0x87, 0x28, 0x10,
	0xd8, 0x87, 0x62, 0x7e, 0x15, 0x1c, 0xc6, 0x98, 0x0f, 0x75, 0x00, 0x23, 0x83, 0x06, 0xb0, 0x77,
	0xc5, 0x5b, 0x87, 0x43, 0xf4, 0xba, 0xd8, 0xb4, 0xdb, 0x4d, 0x6f, 0xe9, 0x9a, 0x68, 0x07, 0xb9,
	0x78, 0x16, 0x8f, 0x42, 0x75, 0x90, 0xac, 0x0e, 0x3c, 0xd1, 0x6d, 0x5c, 0x50, 0x29, 0x41, 0x70,
	0xb7, 0xf0, 0x31, 0x2d, 0xdc, 0xf0, 0xe6, 0x7e, 0x98, 0x45, 0x45, 0x84, 0x1b, 0xe1, 0x4d, 0x92,
	0x88, 0xf5, 0xa8, 0x16, 0x35, 0x4e, 0xef, 0xc1, 0xd1, 0x88, 0xb9, 0xdc, 0x87, 0xb2, 0xfd, 0x8c,
	0xf0, 0xa9, 0x14, 0x47, 0x10, 0xde, 0x5b, 0x78, 0x22, 0x1e, 0x9e, 0x03, 0x15, 0x1c, 0x2c, 0xbe,
	0x63, 0xb1, 0xf8, 0x9c, 0xbd, 0xab, 0x68, 0x78, 0x19, 0xb5, 0xaa, 0xdd, 0x52, 0xd2, 0xef, 0x50,
	0x70, 0x1b, 0xc1, 0x32, 0x44, 0xf3, 0x26, 0x3e, 0x06, 0xd7, 0x02, 0x5c, 0xd2, 0x59, 0x83, 0x72,
	0x43, 0x4a, 0xfa, 0x16, 0x82, 0x99, 0xc2, 0x23, 0x6b, 0x9e, 0x35, 0xb8, 0x14, 0x02, 0x6b, 0xc3,
	0xe9, 0xd6, 0x6e, 0x4a, 0xc9, 0xb8, 0xb5, 0xed, 0xc8, 0x1a, 0xbd, 0x08, 0xa5, 0xd8, 0x08, 0xc9,
	0xc1, 0x86, 0xcf, 0x0d, 0x22, 0xfd, 0xe9, 0x72, 0x5b, 0x87, 0xe9, 0x3e, 0x56, 0x86, 0x27, 0xfa,
	0x01, 0x2e, 0xa6, 0x29, 0x42, 0xd8, 0x77, 0x31, 0xe9, 0xa5, 0x1c, 0x10, 0xfa, 0x59, 0x65, 0xe8,
	0x49, 0x53, 0x80, 0x78, 0x92, 0x27, 0x37, 0xe8, 0x7b, 0x40, 0x46, 0x7a, 0x54, 0xf6, 0xa1, 0x5d,
	0x1f, 0x22, 0x60, 0x35, 0x6a, 0x67, 0x7d, 0xa2, 0x1d, 0x79, 0xfa, 0x68, 0xf7, 0xae, 0x6f, 0x2d,
	0xb8, 0x64, 0xaf, 0x08, 0x53, 0xd8, 0xbc, 0x3e, 0xd8, 0x6d, 0x72, 0x1c, 0x1f, 0x32, 0xb4, 0x8a,
	0xdb, 0x6e, 0x0a, 0x09, 0x61, 0xac, 0x3c, 0x6a, 0x68, 0xb7, 0xdb, 0x4d, 0x41, 0x4e, 0xe0, 0xc3,
	0x86, 0x56, 0xd9, 0xe1, 0xf5, 0x96, 0x98, 0x1e, 0x91, 0x3b, 0x87, 0x0c, 0xed, 0x8e, 0xf7, 0x48,
	0x5b, 0x30, 0x52, 0x7a, 0x1c, 0x86, 0x07, 0x7d, 0x52, 0xf7, 0xb7, 0x2a, 0xc9, 0xdb, 0xe6, 0xb4,
	0x2a, 0x69, 0x09, 0x3b, 0x90, 0xb2, 0x09, 0x3d, 0xbe, 0x4c, 0x6b, 0xd0, 0x9c, 0x09, 0xf1, 0x7d,
	0x68, 0x8e, 0x5f, 0x10, 0x9e, 0x4d, 0x75, 0x95, 0x1d, 0xe4, 0xc8, 0xd3, 0x05, 0xb9, 0x67, 0x5d,
	0xb1, 0xf6, 0xcf, 0x24, 0x3e, 0x28, 0x63, 0x20, 0x1d, 0x3c, 0xea, 0xb3, 0x62, 0xb2, 0x90, 0x32,
	0x4d, 0x12, 0x04, 0xbc, 0xb0, 0xd8, 0x57, 0xce, 0x77, 0x48, 0xe9, 0x47, 0xbf, 0xfd, 0xf5, 0xd9,
	0xf0, 0x0c, 0x29, 0xb0, 0xd4, 0x17, 0x2b, 0xf2, 0x29, 0xc2, 0xe3, 0x51, 0xfe, 0xbb, 0x9c, 0x6a,
	0xbc, 0x97, 0x99, 0x17, 0x9e, 0xcb, 0x27, 0x0c, 0x70, 0x16, 0x25, 0x9c, 0x79, 0x32, 0xcb, 0xb2,
	0x5f, 0x7e, 0xc8, 0xe7, 0x08, 0x1f, 0x89, 0xf2, 0x3c, 0x92, 0xee, 0x47, 0x41, 0xab, 0x0b, 0x2b,
	0x39, 0xa5, 0x01, 0xd6, 0xaa, 0x84, 0xb5, 0x4c, 0xce, 0xb1, 0x7e, 0x6f, 0x97, 0x6c, 0x57, 0x32,
	0xf4, 0x0e, 0xf9, 0x02, 0xe1, 0x89, 0x04, 0x99, 0x25, 0x2c, 0x97, 0xd7, 0xee, 0x71, 0x28, 0x5c,
	0xc8, 0xaf, 0x00, 0x48, 0xcf, 0x49, 0xa4, 0xa7, 0xc9, 0x7c, 0x5f, 0xa4, 0xe4, 0x4b, 0x84, 0x0f,
	0x87, 0x5d, 0xbb, 0x94, 0xea, 0x29, 0x31, 0x8d, 0x0a, 0xe7, 0x72, 0x48, 0x02, 0x98, 0x57, 0x25,
	0x98, 0x97, 0xc8, 0x8b, 0x2c, 0xeb, 0x65, 0x9b, 0xed, 0x86, 0xb8, 0x3a, 0x6c, 0x37, 0xca, 0x8c,
	0x3b, 0xe4, 0x63, 0x84, 0xc7, 0x23, 0x67, 0x37, 0xa3, 0xf5, 0x7a, 0x87, 0x49, 0x46, 0xeb, 0x29,
	0xc6, 0x01, 0x3d, 0x2b, 0xc1, 0xce, 0x92, 0x53, 0x99, 0x60, 0xc9, 0x03, 0x84, 0x8f, 0xc6, 0x08,
	0x12, 0x49, 0xef, 0x25, 0x15, 0xb3, 0x2c, 0x94, 0xf2, 0x8a, 0x03, 0xae, 0x75, 0x89, 0x6b, 0x85,
	0x2c, 0xab, 0x70, 0xc5, 0xe9, 0x18, 0xdb, 0x0d, 0xf2, 0xf6, 0x00, 0xe1, 0xff, 0x25, 0x69, 0x1c,
	0xb9, 0x90, 0xcf, 0x73, 0x24, 0x83, 0xab, 0x03, 0x68, 0x00, 0xdc, 0xf3, 0x12, 0xee, 0x19, 0x42,
	0xfb, 0xc3, 0x25, 0x1f, 0xe2, 0x51, 0x60, 0x4f, 0x19, 0x73, 0x2d, 0xca, 0xe5, 0xb2, 0xe6, 0x5a,
	0x8c, 0xdc, 0xd1, 0xd3, 0x12, 0xc6, 0x29, 0x72, 0x92, 0xa5, 0x7f, 0x94, 0x21, 0xdf, 0x23, 0x3c,
	0xd9, 0x73, 0xdf, 0x93, 0xf4, 0xa0, 0xd3, 0xd8, 0x58, 0x61, 0x6d, 0x10, 0x15, 0x40, 0x78, 0x51,
	0x22, 0x5c, 0x25, 0x8c, 0xe5, 0xfa, 0x28, 0xc4, 0x76, 0x7d, 0x86, 0xd7, 0xf1, 0x50, 0x4f, 0xa9,
	0x38, 0x0f, 0x79, 0x3e, 0x3f, 0x8a, 0x48, 0x8d, 0x5f, 0x18, 0x50, 0x0b, 0xe0, 0x97, 0x24, 0xfc,
	0x25, 0xb2, 0x90, 0x0f, 0x3e, 0xf9, 0x15, 0xe1, 0x89, 0xc4, 0x0d, 0x9a, 0x31, 0x0f, 0xd5, 0x4c,
	0x28, 0x63, 0x1e, 0xa6, 0x30, 0x19, 0x7a, 0x5d, 0xc2, 0xbc, 0x4a, 0x2e, 0xab, 0x60, 0xf6, 0x5c,
	0xff, 0xf1, 0x51, 0x04, 0xb4, 0xca, 0xff, 0x27, 0x79, 0x54, 0x87, 0x7c, 0x83, 0x30, 0xe9, 0xe5,
	0x14, 0x64, 0x2d, 0x2f, 0xb0, 0x48, 0xe2, 0xd7, 0x07, 0xd2, 0x81, 0x78, 0x56, 0x64, 0x3c, 0x8b,
	0xe4, 0x6c, 0xae, 0x78, 0xc8, 0x8f, 0x08, 0x4f, 0xa9, 0xbe, 0xfa, 0x65, 0xf4, 0x4a, 0xc6, 0x87,
	0xc4, 0x8c, 0x5e, 0xc9, 0xfa, 0xb4, 0xd8, 0xe7, 0xfa, 0x0c, 0x35, 0x2b, 0xdd, 0xaf, 0x8d, 0x97,
	0xde, 0x78, 0xf8, 0xb8, 0x88, 0x1e, 0x3d, 0x2e, 0xa2, 0x3f, 0x1f, 0x17, 0xd1, 0x27, 0x4f, 0x8a,
	0x43, 0x8f, 0x9e, 0x14, 0x87, 0x7e, 0x7f, 0x52, 0x1c, 0xba, 0xcb, 0x74, 0xc3, 0xad, 0xb5, 0xaa,
	0xa5, 0x4d, 0xab, 0xc1, 0x2e, 0x73, 0xc3, 0x96, 0x17, 0x46, 0xc4, 0xf0, 0xfd, 0xae, 0x69, 0xaf,
	0x7a, 0x4e, 0x75, 0x54, 0x7e, 0x28, 0x5d, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x74, 0xa3, 0xd1,
	0x9d, 0xe2, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Commitments queries the lists of active and queued commitments
	Commitments(ctx context.Context, in *QueryCommitmentsRequest, opts ...grpc.CallOption) (*QueryCommitmentsResponse, error)
	// Queries a ValidatorSet by index.
	ValidatorSet(ctx context.Context, in *QueryValidatorSetRequest, opts ...grpc.CallOption) (*QueryValidatorSetResponse, error)
	// Queries a list of ValidatorSet items.
	ValidatorSetAll(ctx context.Context, in *QueryValidatorSetAllRequest, opts ...grpc.CallOption) (*QueryValidatorSetAllResponse, error)
	// Queries a KeyShare by index.
	KeyShare(ctx context.Context, in *QueryKeyShareRequest, opts ...grpc.CallOption) (*QueryKeyShareResponse, error)
	// Queries a list of KeyShare items.
	KeyShareAll(ctx context.Context, in *QueryKeyShareAllRequest, opts ...grpc.CallOption) (*QueryKeyShareAllResponse, error)
	// DecryptionKey queries a DecryptionKey item by height.
	DecryptionKey(ctx context.Context, in *QueryDecryptionKeyRequest, opts ...grpc.CallOption) (*QueryDecryptionKeyResponse, error)
	// DecryptionKeyAll Queries a list of DecryptionKey items.
	DecryptionKeyAll(ctx context.Context, in *QueryDecryptionKeyAllRequest, opts ...grpc.CallOption) (*QueryDecryptionKeyAllResponse, error)
	// Queries the public keys
	PubKey(ctx context.Context, in *QueryPubKeyRequest, opts ...grpc.CallOption) (*QueryPubKeyResponse, error)
	// Queries a AuthorizedAddress item by target.
	AuthorizedAddress(ctx context.Context, in *QueryAuthorizedAddressRequest, opts ...grpc.CallOption) (*QueryAuthorizedAddressResponse, error)
	// Queries a list of AuthorizedAddress items
	AuthorizedAddressAll(ctx context.Context, in *QueryAuthorizedAddressAllRequest, opts ...grpc.CallOption) (*QueryAuthorizedAddressAllResponse, error)
	// Queries a GeneralKeyShare item by validator address and identity.
	GeneralKeyShare(ctx context.Context, in *QueryGeneralKeyShareRequest, opts ...grpc.CallOption) (*QueryGeneralKeyShareResponse, error)
	// Queries a list of GeneralKeyShare items
	GeneralKeyShareAll(ctx context.Context, in *QueryGeneralKeyShareAllRequest, opts ...grpc.CallOption) (*QueryGeneralKeyShareAllResponse, error)
	// Queries verifiable randomness
	VerifiableRandomness(ctx context.Context, in *QueryVerifiableRandomnessRequest, opts ...grpc.CallOption) (*QueryVerifiableRandomnessResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Commitments(ctx context.Context, in *QueryCommitmentsRequest, opts ...grpc.CallOption) (*QueryCommitmentsResponse, error) {
	out := new(QueryCommitmentsResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/Commitments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorSet(ctx context.Context, in *QueryValidatorSetRequest, opts ...grpc.CallOption) (*QueryValidatorSetResponse, error) {
	out := new(QueryValidatorSetResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/ValidatorSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorSetAll(ctx context.Context, in *QueryValidatorSetAllRequest, opts ...grpc.CallOption) (*QueryValidatorSetAllResponse, error) {
	out := new(QueryValidatorSetAllResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/ValidatorSetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyShare(ctx context.Context, in *QueryKeyShareRequest, opts ...grpc.CallOption) (*QueryKeyShareResponse, error) {
	out := new(QueryKeyShareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/KeyShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyShareAll(ctx context.Context, in *QueryKeyShareAllRequest, opts ...grpc.CallOption) (*QueryKeyShareAllResponse, error) {
	out := new(QueryKeyShareAllResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/KeyShareAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DecryptionKey(ctx context.Context, in *QueryDecryptionKeyRequest, opts ...grpc.CallOption) (*QueryDecryptionKeyResponse, error) {
	out := new(QueryDecryptionKeyResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/DecryptionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DecryptionKeyAll(ctx context.Context, in *QueryDecryptionKeyAllRequest, opts ...grpc.CallOption) (*QueryDecryptionKeyAllResponse, error) {
	out := new(QueryDecryptionKeyAllResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/DecryptionKeyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PubKey(ctx context.Context, in *QueryPubKeyRequest, opts ...grpc.CallOption) (*QueryPubKeyResponse, error) {
	out := new(QueryPubKeyResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/PubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuthorizedAddress(ctx context.Context, in *QueryAuthorizedAddressRequest, opts ...grpc.CallOption) (*QueryAuthorizedAddressResponse, error) {
	out := new(QueryAuthorizedAddressResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/AuthorizedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuthorizedAddressAll(ctx context.Context, in *QueryAuthorizedAddressAllRequest, opts ...grpc.CallOption) (*QueryAuthorizedAddressAllResponse, error) {
	out := new(QueryAuthorizedAddressAllResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/AuthorizedAddressAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GeneralKeyShare(ctx context.Context, in *QueryGeneralKeyShareRequest, opts ...grpc.CallOption) (*QueryGeneralKeyShareResponse, error) {
	out := new(QueryGeneralKeyShareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/GeneralKeyShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GeneralKeyShareAll(ctx context.Context, in *QueryGeneralKeyShareAllRequest, opts ...grpc.CallOption) (*QueryGeneralKeyShareAllResponse, error) {
	out := new(QueryGeneralKeyShareAllResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/GeneralKeyShareAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifiableRandomness(ctx context.Context, in *QueryVerifiableRandomnessRequest, opts ...grpc.CallOption) (*QueryVerifiableRandomnessResponse, error) {
	out := new(QueryVerifiableRandomnessResponse)
	err := c.cc.Invoke(ctx, "/fairyring.keyshare.Query/VerifiableRandomness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Commitments queries the lists of active and queued commitments
	Commitments(context.Context, *QueryCommitmentsRequest) (*QueryCommitmentsResponse, error)
	// Queries a ValidatorSet by index.
	ValidatorSet(context.Context, *QueryValidatorSetRequest) (*QueryValidatorSetResponse, error)
	// Queries a list of ValidatorSet items.
	ValidatorSetAll(context.Context, *QueryValidatorSetAllRequest) (*QueryValidatorSetAllResponse, error)
	// Queries a KeyShare by index.
	KeyShare(context.Context, *QueryKeyShareRequest) (*QueryKeyShareResponse, error)
	// Queries a list of KeyShare items.
	KeyShareAll(context.Context, *QueryKeyShareAllRequest) (*QueryKeyShareAllResponse, error)
	// DecryptionKey queries a DecryptionKey item by height.
	DecryptionKey(context.Context, *QueryDecryptionKeyRequest) (*QueryDecryptionKeyResponse, error)
	// DecryptionKeyAll Queries a list of DecryptionKey items.
	DecryptionKeyAll(context.Context, *QueryDecryptionKeyAllRequest) (*QueryDecryptionKeyAllResponse, error)
	// Queries the public keys
	PubKey(context.Context, *QueryPubKeyRequest) (*QueryPubKeyResponse, error)
	// Queries a AuthorizedAddress item by target.
	AuthorizedAddress(context.Context, *QueryAuthorizedAddressRequest) (*QueryAuthorizedAddressResponse, error)
	// Queries a list of AuthorizedAddress items
	AuthorizedAddressAll(context.Context, *QueryAuthorizedAddressAllRequest) (*QueryAuthorizedAddressAllResponse, error)
	// Queries a GeneralKeyShare item by validator address and identity.
	GeneralKeyShare(context.Context, *QueryGeneralKeyShareRequest) (*QueryGeneralKeyShareResponse, error)
	// Queries a list of GeneralKeyShare items
	GeneralKeyShareAll(context.Context, *QueryGeneralKeyShareAllRequest) (*QueryGeneralKeyShareAllResponse, error)
	// Queries verifiable randomness
	VerifiableRandomness(context.Context, *QueryVerifiableRandomnessRequest) (*QueryVerifiableRandomnessResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Commitments(ctx context.Context, req *QueryCommitmentsRequest) (*QueryCommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commitments not implemented")
}
func (*UnimplementedQueryServer) ValidatorSet(ctx context.Context, req *QueryValidatorSetRequest) (*QueryValidatorSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorSet not implemented")
}
func (*UnimplementedQueryServer) ValidatorSetAll(ctx context.Context, req *QueryValidatorSetAllRequest) (*QueryValidatorSetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorSetAll not implemented")
}
func (*UnimplementedQueryServer) KeyShare(ctx context.Context, req *QueryKeyShareRequest) (*QueryKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyShare not implemented")
}
func (*UnimplementedQueryServer) KeyShareAll(ctx context.Context, req *QueryKeyShareAllRequest) (*QueryKeyShareAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyShareAll not implemented")
}
func (*UnimplementedQueryServer) DecryptionKey(ctx context.Context, req *QueryDecryptionKeyRequest) (*QueryDecryptionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptionKey not implemented")
}
func (*UnimplementedQueryServer) DecryptionKeyAll(ctx context.Context, req *QueryDecryptionKeyAllRequest) (*QueryDecryptionKeyAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptionKeyAll not implemented")
}
func (*UnimplementedQueryServer) PubKey(ctx context.Context, req *QueryPubKeyRequest) (*QueryPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubKey not implemented")
}
func (*UnimplementedQueryServer) AuthorizedAddress(ctx context.Context, req *QueryAuthorizedAddressRequest) (*QueryAuthorizedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizedAddress not implemented")
}
func (*UnimplementedQueryServer) AuthorizedAddressAll(ctx context.Context, req *QueryAuthorizedAddressAllRequest) (*QueryAuthorizedAddressAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizedAddressAll not implemented")
}
func (*UnimplementedQueryServer) GeneralKeyShare(ctx context.Context, req *QueryGeneralKeyShareRequest) (*QueryGeneralKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralKeyShare not implemented")
}
func (*UnimplementedQueryServer) GeneralKeyShareAll(ctx context.Context, req *QueryGeneralKeyShareAllRequest) (*QueryGeneralKeyShareAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralKeyShareAll not implemented")
}
func (*UnimplementedQueryServer) VerifiableRandomness(ctx context.Context, req *QueryVerifiableRandomnessRequest) (*QueryVerifiableRandomnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableRandomness not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Commitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Commitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/Commitments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Commitments(ctx, req.(*QueryCommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/ValidatorSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorSet(ctx, req.(*QueryValidatorSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorSetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorSetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorSetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/ValidatorSetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorSetAll(ctx, req.(*QueryValidatorSetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/KeyShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyShare(ctx, req.(*QueryKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyShareAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyShareAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyShareAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/KeyShareAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyShareAll(ctx, req.(*QueryKeyShareAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DecryptionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDecryptionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DecryptionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/DecryptionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DecryptionKey(ctx, req.(*QueryDecryptionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DecryptionKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDecryptionKeyAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DecryptionKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/DecryptionKeyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DecryptionKeyAll(ctx, req.(*QueryDecryptionKeyAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/PubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PubKey(ctx, req.(*QueryPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuthorizedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuthorizedAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuthorizedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/AuthorizedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuthorizedAddress(ctx, req.(*QueryAuthorizedAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuthorizedAddressAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuthorizedAddressAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuthorizedAddressAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/AuthorizedAddressAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuthorizedAddressAll(ctx, req.(*QueryAuthorizedAddressAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GeneralKeyShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGeneralKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GeneralKeyShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/GeneralKeyShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GeneralKeyShare(ctx, req.(*QueryGeneralKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GeneralKeyShareAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGeneralKeyShareAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GeneralKeyShareAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/GeneralKeyShareAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GeneralKeyShareAll(ctx, req.(*QueryGeneralKeyShareAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifiableRandomness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifiableRandomnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifiableRandomness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.keyshare.Query/VerifiableRandomness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifiableRandomness(ctx, req.(*QueryVerifiableRandomnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairyring.keyshare.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Commitments",
			Handler:    _Query_Commitments_Handler,
		},
		{
			MethodName: "ValidatorSet",
			Handler:    _Query_ValidatorSet_Handler,
		},
		{
			MethodName: "ValidatorSetAll",
			Handler:    _Query_ValidatorSetAll_Handler,
		},
		{
			MethodName: "KeyShare",
			Handler:    _Query_KeyShare_Handler,
		},
		{
			MethodName: "KeyShareAll",
			Handler:    _Query_KeyShareAll_Handler,
		},
		{
			MethodName: "DecryptionKey",
			Handler:    _Query_DecryptionKey_Handler,
		},
		{
			MethodName: "DecryptionKeyAll",
			Handler:    _Query_DecryptionKeyAll_Handler,
		},
		{
			MethodName: "PubKey",
			Handler:    _Query_PubKey_Handler,
		},
		{
			MethodName: "AuthorizedAddress",
			Handler:    _Query_AuthorizedAddress_Handler,
		},
		{
			MethodName: "AuthorizedAddressAll",
			Handler:    _Query_AuthorizedAddressAll_Handler,
		},
		{
			MethodName: "GeneralKeyShare",
			Handler:    _Query_GeneralKeyShare_Handler,
		},
		{
			MethodName: "GeneralKeyShareAll",
			Handler:    _Query_GeneralKeyShareAll_Handler,
		},
		{
			MethodName: "VerifiableRandomness",
			Handler:    _Query_VerifiableRandomness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fairyring/keyshare/query.proto",
}

func (m *QueryVerifiableRandomnessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifiableRandomnessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifiableRandomnessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVerifiableRandomnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifiableRandomnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifiableRandomnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Randomness) > 0 {
		i -= len(m.Randomness)
		copy(dAtA[i:], m.Randomness)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Randomness)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCommitmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCommitmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueuedCommitments != nil {
		{
			size, err := m.QueuedCommitments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ActiveCommitments != nil {
		{
			size, err := m.ActiveCommitments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValidatorSet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValidatorSetAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorSetAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorSetAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorSetAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorSetAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorSetAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorSet) > 0 {
		for iNdEx := len(m.ValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KeyShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryKeyShareAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyShareAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyShareAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyShareAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyShareAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyShareAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyShare) > 0 {
		for iNdEx := len(m.KeyShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecryptionKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecryptionKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecryptionKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecryptionKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecryptionKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecryptionKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DecryptionKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDecryptionKeyAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecryptionKeyAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecryptionKeyAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecryptionKeyAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecryptionKeyAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecryptionKeyAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DecryptionKeys) > 0 {
		for iNdEx := len(m.DecryptionKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DecryptionKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.QueuedPubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ActivePubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAuthorizedAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuthorizedAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuthorizedAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuthorizedAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuthorizedAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuthorizedAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AuthorizedAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAuthorizedAddressAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuthorizedAddressAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuthorizedAddressAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuthorizedAddressAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuthorizedAddressAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuthorizedAddressAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthorizedAddress) > 0 {
		for iNdEx := len(m.AuthorizedAddress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthorizedAddress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGeneralKeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGeneralKeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGeneralKeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IdValue) > 0 {
		i -= len(m.IdValue)
		copy(dAtA[i:], m.IdValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IdValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IdType) > 0 {
		i -= len(m.IdType)
		copy(dAtA[i:], m.IdType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IdType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGeneralKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGeneralKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGeneralKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GeneralKeyShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGeneralKeyShareAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGeneralKeyShareAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGeneralKeyShareAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGeneralKeyShareAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGeneralKeyShareAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGeneralKeyShareAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GeneralKeyShare) > 0 {
		for iNdEx := len(m.GeneralKeyShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GeneralKeyShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryVerifiableRandomnessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVerifiableRandomnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Randomness)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovQuery(uint64(m.Round))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCommitmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCommitmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveCommitments != nil {
		l = m.ActiveCommitments.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.QueuedCommitments != nil {
		l = m.QueuedCommitments.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValidatorSet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryValidatorSetAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorSetAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorSet) > 0 {
		for _, e := range m.ValidatorSet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KeyShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryKeyShareAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyShareAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyShare) > 0 {
		for _, e := range m.KeyShare {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDecryptionKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryDecryptionKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DecryptionKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDecryptionKeyAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDecryptionKeyAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DecryptionKeys) > 0 {
		for _, e := range m.DecryptionKeys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPubKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPubKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActivePubKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.QueuedPubKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAuthorizedAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuthorizedAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AuthorizedAddress.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAuthorizedAddressAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuthorizedAddressAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthorizedAddress) > 0 {
		for _, e := range m.AuthorizedAddress {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGeneralKeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IdType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IdValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGeneralKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GeneralKeyShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGeneralKeyShareAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGeneralKeyShareAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GeneralKeyShare) > 0 {
		for _, e := range m.GeneralKeyShare {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryVerifiableRandomnessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifiableRandomnessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifiableRandomnessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifiableRandomnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifiableRandomnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifiableRandomnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomness", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Randomness = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCommitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveCommitments == nil {
				m.ActiveCommitments = &Commitments{}
			}
			if err := m.ActiveCommitments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedCommitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueuedCommitments == nil {
				m.QueuedCommitments = &Commitments{}
			}
			if err := m.QueuedCommitments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorSetAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorSetAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorSetAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorSetAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorSetAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorSetAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSet = append(m.ValidatorSet, ValidatorSet{})
			if err := m.ValidatorSet[len(m.ValidatorSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KeyShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyShareAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyShareAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyShareAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyShareAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyShareAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyShareAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyShare = append(m.KeyShare, KeyShare{})
			if err := m.KeyShare[len(m.KeyShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecryptionKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecryptionKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecryptionKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecryptionKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecryptionKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecryptionKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DecryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecryptionKeyAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecryptionKeyAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecryptionKeyAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecryptionKeyAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecryptionKeyAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecryptionKeyAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecryptionKeys = append(m.DecryptionKeys, AggregatedKeyShare{})
			if err := m.DecryptionKeys[len(m.DecryptionKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActivePubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedPubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueuedPubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuthorizedAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuthorizedAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuthorizedAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuthorizedAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuthorizedAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuthorizedAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuthorizedAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuthorizedAddressAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuthorizedAddressAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuthorizedAddressAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuthorizedAddressAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuthorizedAddressAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuthorizedAddressAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedAddress = append(m.AuthorizedAddress, AuthorizedAddress{})
			if err := m.AuthorizedAddress[len(m.AuthorizedAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGeneralKeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGeneralKeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGeneralKeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGeneralKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGeneralKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGeneralKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneralKeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GeneralKeyShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGeneralKeyShareAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGeneralKeyShareAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGeneralKeyShareAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGeneralKeyShareAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGeneralKeyShareAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGeneralKeyShareAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneralKeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeneralKeyShare = append(m.GeneralKeyShare, GeneralKeyShare{})
			if err := m.GeneralKeyShare[len(m.GeneralKeyShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
