// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/pep/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/Fairblock/fairyring/x/common/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryKeyshareRequest struct {
	ReqId string `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (m *QueryKeyshareRequest) Reset()         { *m = QueryKeyshareRequest{} }
func (m *QueryKeyshareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyshareRequest) ProtoMessage()    {}
func (*QueryKeyshareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{2}
}
func (m *QueryKeyshareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyshareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyshareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyshareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyshareRequest.Merge(m, src)
}
func (m *QueryKeyshareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyshareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyshareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyshareRequest proto.InternalMessageInfo

func (m *QueryKeyshareRequest) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type QueryKeyshareResponse struct {
	Keyshare *GenEncTxExecutionQueue `protobuf:"bytes,1,opt,name=keyshare,proto3" json:"keyshare,omitempty"`
}

func (m *QueryKeyshareResponse) Reset()         { *m = QueryKeyshareResponse{} }
func (m *QueryKeyshareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyshareResponse) ProtoMessage()    {}
func (*QueryKeyshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{3}
}
func (m *QueryKeyshareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyshareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyshareResponse.Merge(m, src)
}
func (m *QueryKeyshareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyshareResponse proto.InternalMessageInfo

func (m *QueryKeyshareResponse) GetKeyshare() *GenEncTxExecutionQueue {
	if m != nil {
		return m.Keyshare
	}
	return nil
}

type QueryAllKeyshareRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKeyshareRequest) Reset()         { *m = QueryAllKeyshareRequest{} }
func (m *QueryAllKeyshareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKeyshareRequest) ProtoMessage()    {}
func (*QueryAllKeyshareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{4}
}
func (m *QueryAllKeyshareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKeyshareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKeyshareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKeyshareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKeyshareRequest.Merge(m, src)
}
func (m *QueryAllKeyshareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKeyshareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKeyshareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKeyshareRequest proto.InternalMessageInfo

func (m *QueryAllKeyshareRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKeyshareResponse struct {
	Keyshares  []*GenEncTxExecutionQueue `protobuf:"bytes,1,rep,name=keyshares,proto3" json:"keyshares,omitempty"`
	Pagination *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKeyshareResponse) Reset()         { *m = QueryAllKeyshareResponse{} }
func (m *QueryAllKeyshareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKeyshareResponse) ProtoMessage()    {}
func (*QueryAllKeyshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{5}
}
func (m *QueryAllKeyshareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKeyshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKeyshareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKeyshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKeyshareResponse.Merge(m, src)
}
func (m *QueryAllKeyshareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKeyshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKeyshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKeyshareResponse proto.InternalMessageInfo

func (m *QueryAllKeyshareResponse) GetKeyshares() []*GenEncTxExecutionQueue {
	if m != nil {
		return m.Keyshares
	}
	return nil
}

func (m *QueryAllKeyshareResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncryptedTxRequest struct {
	TargetHeight uint64 `protobuf:"varint,1,opt,name=targetHeight,proto3" json:"targetHeight,omitempty"`
	Index        uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetEncryptedTxRequest) Reset()         { *m = QueryGetEncryptedTxRequest{} }
func (m *QueryGetEncryptedTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncryptedTxRequest) ProtoMessage()    {}
func (*QueryGetEncryptedTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{6}
}
func (m *QueryGetEncryptedTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncryptedTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncryptedTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncryptedTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncryptedTxRequest.Merge(m, src)
}
func (m *QueryGetEncryptedTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncryptedTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncryptedTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncryptedTxRequest proto.InternalMessageInfo

func (m *QueryGetEncryptedTxRequest) GetTargetHeight() uint64 {
	if m != nil {
		return m.TargetHeight
	}
	return 0
}

func (m *QueryGetEncryptedTxRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryGetEncryptedTxResponse struct {
	EncryptedTx EncryptedTx `protobuf:"bytes,1,opt,name=encryptedTx,proto3" json:"encryptedTx"`
}

func (m *QueryGetEncryptedTxResponse) Reset()         { *m = QueryGetEncryptedTxResponse{} }
func (m *QueryGetEncryptedTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncryptedTxResponse) ProtoMessage()    {}
func (*QueryGetEncryptedTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{7}
}
func (m *QueryGetEncryptedTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncryptedTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncryptedTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncryptedTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncryptedTxResponse.Merge(m, src)
}
func (m *QueryGetEncryptedTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncryptedTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncryptedTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncryptedTxResponse proto.InternalMessageInfo

func (m *QueryGetEncryptedTxResponse) GetEncryptedTx() EncryptedTx {
	if m != nil {
		return m.EncryptedTx
	}
	return EncryptedTx{}
}

type QueryAllEncryptedTxRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEncryptedTxRequest) Reset()         { *m = QueryAllEncryptedTxRequest{} }
func (m *QueryAllEncryptedTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptedTxRequest) ProtoMessage()    {}
func (*QueryAllEncryptedTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{8}
}
func (m *QueryAllEncryptedTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptedTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptedTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptedTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptedTxRequest.Merge(m, src)
}
func (m *QueryAllEncryptedTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptedTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptedTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptedTxRequest proto.InternalMessageInfo

func (m *QueryAllEncryptedTxRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEncryptedTxResponse struct {
	EncryptedTxArray []EncryptedTxArray  `protobuf:"bytes,1,rep,name=encryptedTxArray,proto3" json:"encryptedTxArray"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEncryptedTxResponse) Reset()         { *m = QueryAllEncryptedTxResponse{} }
func (m *QueryAllEncryptedTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptedTxResponse) ProtoMessage()    {}
func (*QueryAllEncryptedTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{9}
}
func (m *QueryAllEncryptedTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptedTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptedTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptedTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptedTxResponse.Merge(m, src)
}
func (m *QueryAllEncryptedTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptedTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptedTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptedTxResponse proto.InternalMessageInfo

func (m *QueryAllEncryptedTxResponse) GetEncryptedTxArray() []EncryptedTxArray {
	if m != nil {
		return m.EncryptedTxArray
	}
	return nil
}

func (m *QueryAllEncryptedTxResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEncryptedTxFromHeightRequest struct {
	TargetHeight uint64 `protobuf:"varint,1,opt,name=targetHeight,proto3" json:"targetHeight,omitempty"`
}

func (m *QueryAllEncryptedTxFromHeightRequest) Reset()         { *m = QueryAllEncryptedTxFromHeightRequest{} }
func (m *QueryAllEncryptedTxFromHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptedTxFromHeightRequest) ProtoMessage()    {}
func (*QueryAllEncryptedTxFromHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{10}
}
func (m *QueryAllEncryptedTxFromHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptedTxFromHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptedTxFromHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptedTxFromHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptedTxFromHeightRequest.Merge(m, src)
}
func (m *QueryAllEncryptedTxFromHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptedTxFromHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptedTxFromHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptedTxFromHeightRequest proto.InternalMessageInfo

func (m *QueryAllEncryptedTxFromHeightRequest) GetTargetHeight() uint64 {
	if m != nil {
		return m.TargetHeight
	}
	return 0
}

type QueryAllEncryptedTxFromHeightResponse struct {
	EncryptedTxArray EncryptedTxArray `protobuf:"bytes,1,opt,name=encryptedTxArray,proto3" json:"encryptedTxArray"`
}

func (m *QueryAllEncryptedTxFromHeightResponse) Reset()         { *m = QueryAllEncryptedTxFromHeightResponse{} }
func (m *QueryAllEncryptedTxFromHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptedTxFromHeightResponse) ProtoMessage()    {}
func (*QueryAllEncryptedTxFromHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{11}
}
func (m *QueryAllEncryptedTxFromHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptedTxFromHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptedTxFromHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptedTxFromHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptedTxFromHeightResponse.Merge(m, src)
}
func (m *QueryAllEncryptedTxFromHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptedTxFromHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptedTxFromHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptedTxFromHeightResponse proto.InternalMessageInfo

func (m *QueryAllEncryptedTxFromHeightResponse) GetEncryptedTxArray() EncryptedTxArray {
	if m != nil {
		return m.EncryptedTxArray
	}
	return EncryptedTxArray{}
}

type QueryLatestHeightRequest struct {
}

func (m *QueryLatestHeightRequest) Reset()         { *m = QueryLatestHeightRequest{} }
func (m *QueryLatestHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestHeightRequest) ProtoMessage()    {}
func (*QueryLatestHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{12}
}
func (m *QueryLatestHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestHeightRequest.Merge(m, src)
}
func (m *QueryLatestHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestHeightRequest proto.InternalMessageInfo

type QueryLatestHeightResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryLatestHeightResponse) Reset()         { *m = QueryLatestHeightResponse{} }
func (m *QueryLatestHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestHeightResponse) ProtoMessage()    {}
func (*QueryLatestHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{13}
}
func (m *QueryLatestHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestHeightResponse.Merge(m, src)
}
func (m *QueryLatestHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestHeightResponse proto.InternalMessageInfo

func (m *QueryLatestHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetPepNonceRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetPepNonceRequest) Reset()         { *m = QueryGetPepNonceRequest{} }
func (m *QueryGetPepNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPepNonceRequest) ProtoMessage()    {}
func (*QueryGetPepNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{14}
}
func (m *QueryGetPepNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPepNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPepNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPepNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPepNonceRequest.Merge(m, src)
}
func (m *QueryGetPepNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPepNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPepNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPepNonceRequest proto.InternalMessageInfo

func (m *QueryGetPepNonceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetPepNonceResponse struct {
	PepNonce PepNonce `protobuf:"bytes,1,opt,name=pepNonce,proto3" json:"pepNonce"`
}

func (m *QueryGetPepNonceResponse) Reset()         { *m = QueryGetPepNonceResponse{} }
func (m *QueryGetPepNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPepNonceResponse) ProtoMessage()    {}
func (*QueryGetPepNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{15}
}
func (m *QueryGetPepNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPepNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPepNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPepNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPepNonceResponse.Merge(m, src)
}
func (m *QueryGetPepNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPepNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPepNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPepNonceResponse proto.InternalMessageInfo

func (m *QueryGetPepNonceResponse) GetPepNonce() PepNonce {
	if m != nil {
		return m.PepNonce
	}
	return PepNonce{}
}

type QueryAllPepNonceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPepNonceRequest) Reset()         { *m = QueryAllPepNonceRequest{} }
func (m *QueryAllPepNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPepNonceRequest) ProtoMessage()    {}
func (*QueryAllPepNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{16}
}
func (m *QueryAllPepNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPepNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPepNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPepNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPepNonceRequest.Merge(m, src)
}
func (m *QueryAllPepNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPepNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPepNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPepNonceRequest proto.InternalMessageInfo

func (m *QueryAllPepNonceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPepNonceResponse struct {
	PepNonce   []PepNonce          `protobuf:"bytes,1,rep,name=pepNonce,proto3" json:"pepNonce"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPepNonceResponse) Reset()         { *m = QueryAllPepNonceResponse{} }
func (m *QueryAllPepNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPepNonceResponse) ProtoMessage()    {}
func (*QueryAllPepNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{17}
}
func (m *QueryAllPepNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPepNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPepNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPepNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPepNonceResponse.Merge(m, src)
}
func (m *QueryAllPepNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPepNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPepNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPepNonceResponse proto.InternalMessageInfo

func (m *QueryAllPepNonceResponse) GetPepNonce() []PepNonce {
	if m != nil {
		return m.PepNonce
	}
	return nil
}

func (m *QueryAllPepNonceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPubKeyRequest struct {
}

func (m *QueryPubKeyRequest) Reset()         { *m = QueryPubKeyRequest{} }
func (m *QueryPubKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyRequest) ProtoMessage()    {}
func (*QueryPubKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{18}
}
func (m *QueryPubKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyRequest.Merge(m, src)
}
func (m *QueryPubKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyRequest proto.InternalMessageInfo

type QueryPubKeyResponse struct {
	ActivePubKey types.ActivePublicKey `protobuf:"bytes,1,opt,name=activePubKey,proto3" json:"activePubKey"`
	QueuedPubKey types.QueuedPublicKey `protobuf:"bytes,2,opt,name=queuedPubKey,proto3" json:"queuedPubKey"`
}

func (m *QueryPubKeyResponse) Reset()         { *m = QueryPubKeyResponse{} }
func (m *QueryPubKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPubKeyResponse) ProtoMessage()    {}
func (*QueryPubKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{19}
}
func (m *QueryPubKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubKeyResponse.Merge(m, src)
}
func (m *QueryPubKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubKeyResponse proto.InternalMessageInfo

func (m *QueryPubKeyResponse) GetActivePubKey() types.ActivePublicKey {
	if m != nil {
		return m.ActivePubKey
	}
	return types.ActivePublicKey{}
}

func (m *QueryPubKeyResponse) GetQueuedPubKey() types.QueuedPublicKey {
	if m != nil {
		return m.QueuedPubKey
	}
	return types.QueuedPublicKey{}
}

type QueryShowPrivateKeyshareReqRequest struct {
	ReqId string `protobuf:"bytes,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (m *QueryShowPrivateKeyshareReqRequest) Reset()         { *m = QueryShowPrivateKeyshareReqRequest{} }
func (m *QueryShowPrivateKeyshareReqRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowPrivateKeyshareReqRequest) ProtoMessage()    {}
func (*QueryShowPrivateKeyshareReqRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{20}
}
func (m *QueryShowPrivateKeyshareReqRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowPrivateKeyshareReqRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowPrivateKeyshareReqRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowPrivateKeyshareReqRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowPrivateKeyshareReqRequest.Merge(m, src)
}
func (m *QueryShowPrivateKeyshareReqRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowPrivateKeyshareReqRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowPrivateKeyshareReqRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowPrivateKeyshareReqRequest proto.InternalMessageInfo

func (m *QueryShowPrivateKeyshareReqRequest) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

type QueryShowPrivateKeyshareReqResponse struct {
	Creator            string                         `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ReqId              string                         `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Pubkey             string                         `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Amount             types1.Coin                    `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
	EncryptedKeyshares map[string]*types.KeyshareList `protobuf:"bytes,5,rep,name=encrypted_keyshares,json=encryptedKeyshares,proto3" json:"encrypted_keyshares,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryShowPrivateKeyshareReqResponse) Reset()         { *m = QueryShowPrivateKeyshareReqResponse{} }
func (m *QueryShowPrivateKeyshareReqResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowPrivateKeyshareReqResponse) ProtoMessage()    {}
func (*QueryShowPrivateKeyshareReqResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{21}
}
func (m *QueryShowPrivateKeyshareReqResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowPrivateKeyshareReqResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowPrivateKeyshareReqResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowPrivateKeyshareReqResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowPrivateKeyshareReqResponse.Merge(m, src)
}
func (m *QueryShowPrivateKeyshareReqResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowPrivateKeyshareReqResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowPrivateKeyshareReqResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowPrivateKeyshareReqResponse proto.InternalMessageInfo

func (m *QueryShowPrivateKeyshareReqResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryShowPrivateKeyshareReqResponse) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *QueryShowPrivateKeyshareReqResponse) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *QueryShowPrivateKeyshareReqResponse) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

func (m *QueryShowPrivateKeyshareReqResponse) GetEncryptedKeyshares() map[string]*types.KeyshareList {
	if m != nil {
		return m.EncryptedKeyshares
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "fairyring.pep.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "fairyring.pep.QueryParamsResponse")
	proto.RegisterType((*QueryKeyshareRequest)(nil), "fairyring.pep.QueryKeyshareRequest")
	proto.RegisterType((*QueryKeyshareResponse)(nil), "fairyring.pep.QueryKeyshareResponse")
	proto.RegisterType((*QueryAllKeyshareRequest)(nil), "fairyring.pep.QueryAllKeyshareRequest")
	proto.RegisterType((*QueryAllKeyshareResponse)(nil), "fairyring.pep.QueryAllKeyshareResponse")
	proto.RegisterType((*QueryGetEncryptedTxRequest)(nil), "fairyring.pep.QueryGetEncryptedTxRequest")
	proto.RegisterType((*QueryGetEncryptedTxResponse)(nil), "fairyring.pep.QueryGetEncryptedTxResponse")
	proto.RegisterType((*QueryAllEncryptedTxRequest)(nil), "fairyring.pep.QueryAllEncryptedTxRequest")
	proto.RegisterType((*QueryAllEncryptedTxResponse)(nil), "fairyring.pep.QueryAllEncryptedTxResponse")
	proto.RegisterType((*QueryAllEncryptedTxFromHeightRequest)(nil), "fairyring.pep.QueryAllEncryptedTxFromHeightRequest")
	proto.RegisterType((*QueryAllEncryptedTxFromHeightResponse)(nil), "fairyring.pep.QueryAllEncryptedTxFromHeightResponse")
	proto.RegisterType((*QueryLatestHeightRequest)(nil), "fairyring.pep.QueryLatestHeightRequest")
	proto.RegisterType((*QueryLatestHeightResponse)(nil), "fairyring.pep.QueryLatestHeightResponse")
	proto.RegisterType((*QueryGetPepNonceRequest)(nil), "fairyring.pep.QueryGetPepNonceRequest")
	proto.RegisterType((*QueryGetPepNonceResponse)(nil), "fairyring.pep.QueryGetPepNonceResponse")
	proto.RegisterType((*QueryAllPepNonceRequest)(nil), "fairyring.pep.QueryAllPepNonceRequest")
	proto.RegisterType((*QueryAllPepNonceResponse)(nil), "fairyring.pep.QueryAllPepNonceResponse")
	proto.RegisterType((*QueryPubKeyRequest)(nil), "fairyring.pep.QueryPubKeyRequest")
	proto.RegisterType((*QueryPubKeyResponse)(nil), "fairyring.pep.QueryPubKeyResponse")
	proto.RegisterType((*QueryShowPrivateKeyshareReqRequest)(nil), "fairyring.pep.QueryShowPrivateKeyshareReqRequest")
	proto.RegisterType((*QueryShowPrivateKeyshareReqResponse)(nil), "fairyring.pep.QueryShowPrivateKeyshareReqResponse")
	proto.RegisterMapType((map[string]*types.KeyshareList)(nil), "fairyring.pep.QueryShowPrivateKeyshareReqResponse.EncryptedKeysharesEntry")
}

func init() { proto.RegisterFile("fairyring/pep/query.proto", fileDescriptor_dd36cf23112e8be0) }

var fileDescriptor_dd36cf23112e8be0 = []byte{
	// 1317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xc7, 0x59, 0x7e, 0x38, 0xf0, 0xa0, 0x51, 0x3a, 0xe1, 0x87, 0xd9, 0x04, 0x43, 0x06, 0x02,
	0xd4, 0x6a, 0xbd, 0xe2, 0x87, 0xd4, 0x14, 0xf5, 0x02, 0x29, 0xd0, 0x84, 0xa8, 0x05, 0x37, 0xed,
	0x21, 0x17, 0x6b, 0x6c, 0x4f, 0xd7, 0x2b, 0xec, 0x9d, 0xf5, 0xee, 0x9a, 0xd8, 0x45, 0x48, 0x55,
	0x2e, 0x3d, 0xb4, 0x87, 0x4a, 0xbd, 0x57, 0x3d, 0xe6, 0xd6, 0x5e, 0x73, 0xe8, 0xa9, 0x97, 0x1c,
	0x23, 0xf5, 0xd2, 0x53, 0x55, 0x41, 0xa5, 0xfe, 0x1b, 0xd5, 0xce, 0xbe, 0xc5, 0xbb, 0xcb, 0xda,
	0x06, 0x85, 0x0b, 0x62, 0x67, 0xde, 0xbc, 0xf7, 0x79, 0xef, 0x8d, 0xdf, 0x77, 0x17, 0xa6, 0xbf,
	0x66, 0x86, 0xdd, 0xb2, 0x0d, 0x53, 0xd7, 0x2c, 0x6e, 0x69, 0xf5, 0x06, 0xb7, 0x5b, 0x39, 0xcb,
	0x16, 0xae, 0x20, 0xef, 0x9c, 0x6f, 0xe5, 0x2c, 0x6e, 0xa9, 0xef, 0xb2, 0x9a, 0x61, 0x0a, 0x4d,
	0xfe, 0xf5, 0x2d, 0xd4, 0x71, 0x5d, 0xe8, 0x42, 0xfe, 0xab, 0x79, 0xff, 0xe1, 0xea, 0x5d, 0x5d,
	0x08, 0xbd, 0xca, 0x35, 0x66, 0x19, 0x1a, 0x33, 0x4d, 0xe1, 0x32, 0xd7, 0x10, 0xa6, 0x83, 0xbb,
	0xd9, 0x92, 0x70, 0x6a, 0xc2, 0xd1, 0x8a, 0xcc, 0xe1, 0x7e, 0x38, 0xed, 0x68, 0xa5, 0xc8, 0x5d,
	0xb6, 0xa2, 0x59, 0x4c, 0x37, 0x4c, 0x69, 0x8c, 0xb6, 0x6a, 0x14, 0xce, 0x62, 0x36, 0xab, 0x05,
	0x7e, 0xe6, 0xa2, 0x7b, 0xdc, 0x2c, 0xd9, 0x2d, 0xcb, 0xe5, 0xe5, 0x82, 0xdb, 0x44, 0x8b, 0x99,
	0xd8, 0x69, 0x6e, 0x15, 0x4c, 0x61, 0x96, 0x38, 0x6e, 0x2f, 0x47, 0xb7, 0x99, 0xae, 0xdb, 0x5c,
	0x67, 0x9e, 0x87, 0x43, 0xde, 0x2a, 0x38, 0x15, 0x66, 0x07, 0x96, 0xf3, 0x6d, 0xcb, 0x92, 0xa8,
	0xd5, 0x84, 0xa9, 0xc9, 0xdd, 0x72, 0xc1, 0x6d, 0x59, 0x3c, 0xe0, 0xc9, 0x84, 0xf3, 0x0a, 0x32,
	0x2a, 0x09, 0x03, 0x73, 0xa1, 0xe3, 0x40, 0x0e, 0xbc, 0x6c, 0xf7, 0x65, 0x12, 0x79, 0x5e, 0x6f,
	0x70, 0xc7, 0xa5, 0x9f, 0xc3, 0xed, 0xc8, 0xaa, 0x63, 0x09, 0xd3, 0xe1, 0xe4, 0x01, 0xa4, 0xfc,
	0x64, 0xd3, 0xca, 0x9c, 0xb2, 0x3c, 0xba, 0x3a, 0x91, 0x8b, 0xf4, 0x22, 0xe7, 0x9b, 0x6f, 0x8d,
	0xbc, 0xfe, 0x7b, 0xb6, 0xef, 0xe5, 0x7f, 0xbf, 0x65, 0x95, 0x3c, 0xda, 0xd3, 0x0f, 0x60, 0x5c,
	0x3a, 0xdc, 0xe3, 0x2d, 0x09, 0x89, 0x81, 0xc8, 0x04, 0xa4, 0x6c, 0x5e, 0x2f, 0x18, 0x65, 0xe9,
	0x71, 0x24, 0x3f, 0x64, 0xf3, 0xfa, 0xa3, 0x32, 0x7d, 0x06, 0x13, 0x31, 0x73, 0x24, 0xd8, 0x84,
	0xe1, 0x43, 0x5c, 0x43, 0x86, 0xfb, 0x31, 0x86, 0x5d, 0x6e, 0x6e, 0x9b, 0xa5, 0xa7, 0xcd, 0xed,
	0x26, 0x2f, 0x35, 0xbc, 0xa6, 0x1d, 0x34, 0x78, 0x83, 0xe7, 0xcf, 0x8f, 0x51, 0x06, 0x53, 0xd2,
	0xf7, 0x66, 0xb5, 0x1a, 0xa7, 0xd9, 0x01, 0x68, 0x37, 0x1b, 0xfd, 0x2f, 0xe6, 0xfc, 0x0a, 0xe6,
	0xbc, 0x0a, 0xe6, 0xfc, 0x8b, 0x88, 0x75, 0xcc, 0xed, 0x33, 0x3d, 0x38, 0x9b, 0x0f, 0x9d, 0xa4,
	0x2f, 0x15, 0x48, 0x5f, 0x8c, 0x81, 0x29, 0x3c, 0x84, 0x91, 0x80, 0xc5, 0xab, 0xe3, 0xc0, 0xe5,
	0x73, 0x68, 0x9f, 0x23, 0xbb, 0x11, 0xd2, 0x7e, 0x49, 0xba, 0xd4, 0x93, 0xd4, 0x27, 0x88, 0xa0,
	0x7e, 0x05, 0xaa, 0x24, 0xdd, 0xe5, 0xee, 0x76, 0x70, 0x57, 0x9f, 0x36, 0x83, 0x82, 0x50, 0x18,
	0x73, 0x99, 0xad, 0x73, 0xf7, 0x53, 0x6e, 0xe8, 0x15, 0x57, 0x96, 0x64, 0x30, 0x1f, 0x59, 0x23,
	0xe3, 0x30, 0x64, 0x98, 0x65, 0xde, 0x94, 0x14, 0x83, 0x79, 0xff, 0x81, 0x32, 0xb8, 0x93, 0xe8,
	0x17, 0x8b, 0xb0, 0x05, 0xa3, 0xbc, 0xbd, 0x8c, 0xa5, 0x56, 0x63, 0x65, 0x08, 0x1d, 0xdc, 0x1a,
	0xf4, 0xee, 0x54, 0x3e, 0x7c, 0x88, 0x96, 0x11, 0x7d, 0xb3, 0x5a, 0x4d, 0x40, 0xbf, 0xae, 0x5e,
	0xbe, 0x52, 0x30, 0x93, 0x78, 0x18, 0xcc, 0xe4, 0x00, 0x6e, 0x85, 0xa0, 0x36, 0x6d, 0x9b, 0xb5,
	0xb0, 0xab, 0xb3, 0x9d, 0xd3, 0x91, 0x66, 0x98, 0xd3, 0x85, 0xe3, 0xd7, 0xd7, 0xdc, 0xc7, 0xb0,
	0x90, 0x80, 0xbe, 0x63, 0x8b, 0x9a, 0xdf, 0xbb, 0x2b, 0xb4, 0x99, 0x7e, 0x03, 0xf7, 0x7b, 0xf8,
	0xea, 0x5a, 0x10, 0xe5, 0x2d, 0x0a, 0x42, 0x55, 0xfc, 0x39, 0x3d, 0x61, 0x2e, 0x77, 0xdc, 0x08,
	0x3b, 0x5d, 0x83, 0xe9, 0x84, 0x3d, 0x64, 0x99, 0x84, 0x54, 0x25, 0x9c, 0x12, 0x3e, 0xd1, 0x35,
	0x9c, 0x01, 0xbb, 0xdc, 0xdd, 0xe7, 0xd6, 0x67, 0xde, 0xf8, 0x0d, 0x6a, 0x91, 0x86, 0x1b, 0xac,
	0x5c, 0xb6, 0xb9, 0xe3, 0xe0, 0x48, 0x0a, 0x1e, 0xe9, 0x97, 0x48, 0x11, 0x39, 0x84, 0x81, 0x3e,
	0x82, 0x61, 0x0b, 0xd7, 0x30, 0xd9, 0xa9, 0xf8, 0x6c, 0xc4, 0x6d, 0x4c, 0xf2, 0xdc, 0x3c, 0x3c,
	0x8f, 0xe2, 0x2c, 0xd7, 0x75, 0x87, 0x7f, 0x0e, 0xcd, 0xa3, 0x1e, 0xe8, 0x03, 0x57, 0x40, 0xbf,
	0xbe, 0x8b, 0x7a, 0xae, 0x42, 0x8d, 0xe2, 0x1e, 0x6f, 0x05, 0xad, 0xfd, 0x55, 0x09, 0x64, 0x08,
	0x97, 0x91, 0x78, 0x0f, 0xc6, 0x58, 0xc9, 0x35, 0x8e, 0xb8, 0xbf, 0x8e, 0x85, 0xb9, 0x17, 0xa2,
	0xf6, 0xf5, 0x30, 0xb7, 0x19, 0x58, 0x55, 0x8d, 0xd2, 0x1e, 0x0f, 0xee, 0x57, 0xe4, 0xb0, 0xe7,
	0xac, 0xee, 0x4d, 0xd7, 0x32, 0x3a, 0xeb, 0xef, 0xe4, 0xec, 0x20, 0xb0, 0x8a, 0x3a, 0x0b, 0x1f,
	0xa6, 0x1b, 0x40, 0x25, 0xf0, 0x17, 0x15, 0xf1, 0x7c, 0xdf, 0x36, 0x8e, 0x98, 0xcb, 0x43, 0x1a,
	0x13, 0xb4, 0x75, 0x1c, 0x7c, 0x99, 0x8b, 0x6a, 0xde, 0xf7, 0x03, 0x30, 0xdf, 0xf5, 0x30, 0x66,
	0x9f, 0x86, 0x1b, 0x25, 0x9b, 0x33, 0x57, 0xd8, 0xc1, 0x05, 0xc5, 0xc7, 0x90, 0x98, 0xf6, 0x87,
	0x1c, 0x7b, 0x3f, 0x02, 0xab, 0x51, 0x3c, 0xe4, 0xad, 0xf4, 0x80, 0x5c, 0xc6, 0x27, 0xf2, 0x21,
	0xa4, 0x58, 0x4d, 0x34, 0x4c, 0x37, 0x3d, 0x28, 0x73, 0x9e, 0x8e, 0x74, 0x2e, 0xe8, 0xd9, 0x43,
	0x61, 0x98, 0x98, 0x2b, 0x9a, 0x93, 0x63, 0xb8, 0xdd, 0x7e, 0xaf, 0x69, 0x6b, 0xd9, 0x90, 0xbc,
	0x3c, 0x8f, 0x63, 0x97, 0xe7, 0x12, 0x29, 0xb5, 0x07, 0x41, 0xb0, 0xe9, 0x6c, 0x9b, 0xae, 0xdd,
	0xca, 0x13, 0x7e, 0x61, 0x43, 0xe5, 0x30, 0xd5, 0xc1, 0x9c, 0xdc, 0x82, 0x81, 0x43, 0xbc, 0x0e,
	0x23, 0x79, 0xef, 0x5f, 0xb2, 0x0e, 0x43, 0x47, 0xac, 0xda, 0xe0, 0xd8, 0xd5, 0xcc, 0xc5, 0xae,
	0x06, 0x2e, 0x9e, 0x18, 0x8e, 0x9b, 0xf7, 0x8d, 0x37, 0xfa, 0x1f, 0x28, 0xab, 0xbf, 0x8f, 0xc1,
	0x90, 0x44, 0x27, 0x26, 0xa4, 0xfc, 0xf7, 0x1a, 0x72, 0x2f, 0x29, 0xb5, 0xc8, 0x8b, 0x93, 0x4a,
	0xbb, 0x99, 0xf8, 0xd9, 0xd2, 0x99, 0x17, 0x7f, 0xfe, 0xfb, 0x53, 0xff, 0x14, 0x99, 0xd0, 0x92,
	0xde, 0x23, 0xc9, 0x2f, 0x0a, 0x8c, 0x86, 0x26, 0x23, 0x79, 0x2f, 0xc9, 0x65, 0xa2, 0x5c, 0xab,
	0xd9, 0xcb, 0x98, 0x22, 0xc5, 0x86, 0xa4, 0x58, 0x27, 0xab, 0x5a, 0xe7, 0x37, 0x56, 0xed, 0x38,
	0x2c, 0x01, 0x27, 0xda, 0xb1, 0xd4, 0xf6, 0x13, 0xf2, 0x83, 0x02, 0x37, 0xc3, 0xc3, 0xbb, 0x5a,
	0x4d, 0xa6, 0x4c, 0x54, 0xe6, 0x64, 0xca, 0x64, 0x75, 0xa5, 0xf3, 0x92, 0x72, 0x86, 0xdc, 0xe9,
	0x42, 0x49, 0x5e, 0x29, 0x90, 0x8e, 0xe2, 0xb4, 0x65, 0x89, 0xac, 0xf5, 0x8e, 0x76, 0x41, 0x10,
	0xd5, 0xf5, 0xab, 0x1d, 0x42, 0xd8, 0x55, 0x09, 0xfb, 0x3e, 0xc9, 0x5e, 0xbe, 0xa4, 0xe4, 0x3b,
	0x05, 0xc6, 0xc2, 0xd2, 0x45, 0x96, 0x92, 0x42, 0x27, 0x08, 0x9f, 0xba, 0xdc, 0xdb, 0x10, 0xb9,
	0x16, 0x24, 0x57, 0x86, 0xdc, 0x8d, 0x71, 0x55, 0xa5, 0x71, 0xc1, 0xd7, 0x44, 0x8f, 0x64, 0x38,
	0x98, 0xf4, 0x64, 0xb1, 0xc3, 0x4d, 0x8a, 0x29, 0x94, 0xba, 0xd4, 0xd3, 0x0e, 0x19, 0xb2, 0x92,
	0x61, 0x81, 0x50, 0xad, 0xc3, 0xe7, 0x8f, 0x76, 0x8c, 0x3a, 0x7b, 0x42, 0xbe, 0x55, 0x60, 0x34,
	0x70, 0xe0, 0xdd, 0xad, 0xc5, 0x0e, 0xdd, 0xb8, 0x14, 0x4c, 0x82, 0xe4, 0xd1, 0x39, 0x09, 0xa3,
	0x92, 0x74, 0x27, 0x18, 0x22, 0x20, 0x85, 0xfa, 0x90, 0xfc, 0xa3, 0x0f, 0xeb, 0x54, 0x87, 0x1f,
	0x7d, 0x44, 0xb3, 0x68, 0x46, 0x86, 0x4c, 0x93, 0xc9, 0x78, 0xc8, 0x46, 0xd1, 0x1b, 0xa1, 0xe4,
	0x85, 0x02, 0xa3, 0xa1, 0xd1, 0x48, 0xe6, 0x93, 0x7c, 0xc6, 0xbe, 0x57, 0xd4, 0x85, 0xee, 0x46,
	0x18, 0x7a, 0x59, 0x86, 0xa6, 0x64, 0x2e, 0x16, 0x3a, 0x98, 0xdc, 0xda, 0xb1, 0xaf, 0x1a, 0x27,
	0x1e, 0xc4, 0xcd, 0x50, 0x8c, 0x6e, 0xb5, 0x8f, 0xa3, 0x2c, 0xf5, 0xb4, 0x43, 0x9a, 0x59, 0x49,
	0x33, 0x4d, 0xa6, 0x3a, 0xd0, 0x90, 0x3f, 0x14, 0x98, 0x4c, 0xd6, 0x0b, 0xb2, 0x72, 0x15, 0x6d,
	0xf1, 0xb9, 0x56, 0xaf, 0x2e, 0x47, 0x74, 0x4b, 0x22, 0x7e, 0x4c, 0x36, 0xb4, 0x1d, 0x66, 0xd8,
	0xc5, 0xaa, 0x28, 0x1d, 0xc6, 0x60, 0x9d, 0x8a, 0x78, 0x5e, 0xb0, 0x7c, 0x0f, 0xe7, 0x0a, 0x58,
	0xb0, 0x79, 0x5d, 0xd6, 0xf2, 0x51, 0xf9, 0x64, 0xeb, 0x93, 0xd7, 0xa7, 0x19, 0xe5, 0xcd, 0x69,
	0x46, 0xf9, 0xe7, 0x34, 0xa3, 0xfc, 0x78, 0x96, 0xe9, 0x7b, 0x73, 0x96, 0xe9, 0xfb, 0xeb, 0x2c,
	0xd3, 0xf7, 0x2c, 0xab, 0x1b, 0x6e, 0xa5, 0x51, 0xf4, 0x04, 0x28, 0xd1, 0x7f, 0x53, 0x46, 0x90,
	0xdf, 0xf0, 0xc5, 0x94, 0xfc, 0x48, 0x5f, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x27, 0xea,
	0x58, 0x0f, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a EncryptedTx by index.
	EncryptedTx(ctx context.Context, in *QueryGetEncryptedTxRequest, opts ...grpc.CallOption) (*QueryGetEncryptedTxResponse, error)
	// Queries a list of EncryptedTx items.
	EncryptedTxAll(ctx context.Context, in *QueryAllEncryptedTxRequest, opts ...grpc.CallOption) (*QueryAllEncryptedTxResponse, error)
	// Queries a list of EncryptedTx items.
	EncryptedTxAllFromHeight(ctx context.Context, in *QueryAllEncryptedTxFromHeightRequest, opts ...grpc.CallOption) (*QueryAllEncryptedTxFromHeightResponse, error)
	// Queries a list of LatestHeight items.
	LatestHeight(ctx context.Context, in *QueryLatestHeightRequest, opts ...grpc.CallOption) (*QueryLatestHeightResponse, error)
	// Queries a PepNonce by index.
	PepNonce(ctx context.Context, in *QueryGetPepNonceRequest, opts ...grpc.CallOption) (*QueryGetPepNonceResponse, error)
	// Queries a list of PepNonce items.
	PepNonceAll(ctx context.Context, in *QueryAllPepNonceRequest, opts ...grpc.CallOption) (*QueryAllPepNonceResponse, error)
	// Queries the public keys
	PubKey(ctx context.Context, in *QueryPubKeyRequest, opts ...grpc.CallOption) (*QueryPubKeyResponse, error)
	KeyshareReq(ctx context.Context, in *QueryKeyshareRequest, opts ...grpc.CallOption) (*QueryKeyshareResponse, error)
	KeyshareReqAll(ctx context.Context, in *QueryAllKeyshareRequest, opts ...grpc.CallOption) (*QueryAllKeyshareResponse, error)
	// Queries a list of ShowPrivateKeyshareReq items.
	ShowPrivateKeyshareReq(ctx context.Context, in *QueryShowPrivateKeyshareReqRequest, opts ...grpc.CallOption) (*QueryShowPrivateKeyshareReqResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedTx(ctx context.Context, in *QueryGetEncryptedTxRequest, opts ...grpc.CallOption) (*QueryGetEncryptedTxResponse, error) {
	out := new(QueryGetEncryptedTxResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/EncryptedTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedTxAll(ctx context.Context, in *QueryAllEncryptedTxRequest, opts ...grpc.CallOption) (*QueryAllEncryptedTxResponse, error) {
	out := new(QueryAllEncryptedTxResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/EncryptedTxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedTxAllFromHeight(ctx context.Context, in *QueryAllEncryptedTxFromHeightRequest, opts ...grpc.CallOption) (*QueryAllEncryptedTxFromHeightResponse, error) {
	out := new(QueryAllEncryptedTxFromHeightResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/EncryptedTxAllFromHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestHeight(ctx context.Context, in *QueryLatestHeightRequest, opts ...grpc.CallOption) (*QueryLatestHeightResponse, error) {
	out := new(QueryLatestHeightResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/LatestHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PepNonce(ctx context.Context, in *QueryGetPepNonceRequest, opts ...grpc.CallOption) (*QueryGetPepNonceResponse, error) {
	out := new(QueryGetPepNonceResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/PepNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PepNonceAll(ctx context.Context, in *QueryAllPepNonceRequest, opts ...grpc.CallOption) (*QueryAllPepNonceResponse, error) {
	out := new(QueryAllPepNonceResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/PepNonceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PubKey(ctx context.Context, in *QueryPubKeyRequest, opts ...grpc.CallOption) (*QueryPubKeyResponse, error) {
	out := new(QueryPubKeyResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/PubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyshareReq(ctx context.Context, in *QueryKeyshareRequest, opts ...grpc.CallOption) (*QueryKeyshareResponse, error) {
	out := new(QueryKeyshareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/KeyshareReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyshareReqAll(ctx context.Context, in *QueryAllKeyshareRequest, opts ...grpc.CallOption) (*QueryAllKeyshareResponse, error) {
	out := new(QueryAllKeyshareResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/KeyshareReqAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowPrivateKeyshareReq(ctx context.Context, in *QueryShowPrivateKeyshareReqRequest, opts ...grpc.CallOption) (*QueryShowPrivateKeyshareReqResponse, error) {
	out := new(QueryShowPrivateKeyshareReqResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/ShowPrivateKeyshareReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a EncryptedTx by index.
	EncryptedTx(context.Context, *QueryGetEncryptedTxRequest) (*QueryGetEncryptedTxResponse, error)
	// Queries a list of EncryptedTx items.
	EncryptedTxAll(context.Context, *QueryAllEncryptedTxRequest) (*QueryAllEncryptedTxResponse, error)
	// Queries a list of EncryptedTx items.
	EncryptedTxAllFromHeight(context.Context, *QueryAllEncryptedTxFromHeightRequest) (*QueryAllEncryptedTxFromHeightResponse, error)
	// Queries a list of LatestHeight items.
	LatestHeight(context.Context, *QueryLatestHeightRequest) (*QueryLatestHeightResponse, error)
	// Queries a PepNonce by index.
	PepNonce(context.Context, *QueryGetPepNonceRequest) (*QueryGetPepNonceResponse, error)
	// Queries a list of PepNonce items.
	PepNonceAll(context.Context, *QueryAllPepNonceRequest) (*QueryAllPepNonceResponse, error)
	// Queries the public keys
	PubKey(context.Context, *QueryPubKeyRequest) (*QueryPubKeyResponse, error)
	KeyshareReq(context.Context, *QueryKeyshareRequest) (*QueryKeyshareResponse, error)
	KeyshareReqAll(context.Context, *QueryAllKeyshareRequest) (*QueryAllKeyshareResponse, error)
	// Queries a list of ShowPrivateKeyshareReq items.
	ShowPrivateKeyshareReq(context.Context, *QueryShowPrivateKeyshareReqRequest) (*QueryShowPrivateKeyshareReqResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EncryptedTx(ctx context.Context, req *QueryGetEncryptedTxRequest) (*QueryGetEncryptedTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedTx not implemented")
}
func (*UnimplementedQueryServer) EncryptedTxAll(ctx context.Context, req *QueryAllEncryptedTxRequest) (*QueryAllEncryptedTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedTxAll not implemented")
}
func (*UnimplementedQueryServer) EncryptedTxAllFromHeight(ctx context.Context, req *QueryAllEncryptedTxFromHeightRequest) (*QueryAllEncryptedTxFromHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedTxAllFromHeight not implemented")
}
func (*UnimplementedQueryServer) LatestHeight(ctx context.Context, req *QueryLatestHeightRequest) (*QueryLatestHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestHeight not implemented")
}
func (*UnimplementedQueryServer) PepNonce(ctx context.Context, req *QueryGetPepNonceRequest) (*QueryGetPepNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PepNonce not implemented")
}
func (*UnimplementedQueryServer) PepNonceAll(ctx context.Context, req *QueryAllPepNonceRequest) (*QueryAllPepNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PepNonceAll not implemented")
}
func (*UnimplementedQueryServer) PubKey(ctx context.Context, req *QueryPubKeyRequest) (*QueryPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubKey not implemented")
}
func (*UnimplementedQueryServer) KeyshareReq(ctx context.Context, req *QueryKeyshareRequest) (*QueryKeyshareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyshareReq not implemented")
}
func (*UnimplementedQueryServer) KeyshareReqAll(ctx context.Context, req *QueryAllKeyshareRequest) (*QueryAllKeyshareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyshareReqAll not implemented")
}
func (*UnimplementedQueryServer) ShowPrivateKeyshareReq(ctx context.Context, req *QueryShowPrivateKeyshareReqRequest) (*QueryShowPrivateKeyshareReqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPrivateKeyshareReq not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncryptedTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/EncryptedTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedTx(ctx, req.(*QueryGetEncryptedTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedTxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEncryptedTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedTxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/EncryptedTxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedTxAll(ctx, req.(*QueryAllEncryptedTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedTxAllFromHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEncryptedTxFromHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedTxAllFromHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/EncryptedTxAllFromHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedTxAllFromHeight(ctx, req.(*QueryAllEncryptedTxFromHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/LatestHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestHeight(ctx, req.(*QueryLatestHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PepNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPepNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PepNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/PepNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PepNonce(ctx, req.(*QueryGetPepNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PepNonceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPepNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PepNonceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/PepNonceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PepNonceAll(ctx, req.(*QueryAllPepNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/PubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PubKey(ctx, req.(*QueryPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyshareReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyshareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyshareReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/KeyshareReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyshareReq(ctx, req.(*QueryKeyshareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyshareReqAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKeyshareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyshareReqAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/KeyshareReqAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyshareReqAll(ctx, req.(*QueryAllKeyshareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowPrivateKeyshareReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowPrivateKeyshareReqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowPrivateKeyshareReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/ShowPrivateKeyshareReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowPrivateKeyshareReq(ctx, req.(*QueryShowPrivateKeyshareReqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairyring.pep.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EncryptedTx",
			Handler:    _Query_EncryptedTx_Handler,
		},
		{
			MethodName: "EncryptedTxAll",
			Handler:    _Query_EncryptedTxAll_Handler,
		},
		{
			MethodName: "EncryptedTxAllFromHeight",
			Handler:    _Query_EncryptedTxAllFromHeight_Handler,
		},
		{
			MethodName: "LatestHeight",
			Handler:    _Query_LatestHeight_Handler,
		},
		{
			MethodName: "PepNonce",
			Handler:    _Query_PepNonce_Handler,
		},
		{
			MethodName: "PepNonceAll",
			Handler:    _Query_PepNonceAll_Handler,
		},
		{
			MethodName: "PubKey",
			Handler:    _Query_PubKey_Handler,
		},
		{
			MethodName: "KeyshareReq",
			Handler:    _Query_KeyshareReq_Handler,
		},
		{
			MethodName: "KeyshareReqAll",
			Handler:    _Query_KeyshareReqAll_Handler,
		},
		{
			MethodName: "ShowPrivateKeyshareReq",
			Handler:    _Query_ShowPrivateKeyshareReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fairyring/pep/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryKeyshareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyshareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyshareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReqId) > 0 {
		i -= len(m.ReqId)
		copy(dAtA[i:], m.ReqId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReqId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyshareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyshareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyshareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Keyshare != nil {
		{
			size, err := m.Keyshare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKeyshareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKeyshareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKeyshareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKeyshareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKeyshareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKeyshareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keyshares) > 0 {
		for iNdEx := len(m.Keyshares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keyshares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncryptedTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncryptedTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncryptedTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.TargetHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TargetHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncryptedTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncryptedTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncryptedTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncryptedTx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptedTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptedTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptedTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptedTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptedTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptedTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedTxArray) > 0 {
		for iNdEx := len(m.EncryptedTxArray) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedTxArray[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptedTxFromHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptedTxFromHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptedTxFromHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TargetHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptedTxFromHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptedTxFromHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptedTxFromHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncryptedTxArray.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLatestHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPepNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPepNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPepNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPepNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPepNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPepNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PepNonce.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPepNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPepNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPepNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPepNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPepNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPepNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PepNonce) > 0 {
		for iNdEx := len(m.PepNonce) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PepNonce[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPubKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.QueuedPubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ActivePubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryShowPrivateKeyshareReqRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowPrivateKeyshareReqRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowPrivateKeyshareReqRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReqId) > 0 {
		i -= len(m.ReqId)
		copy(dAtA[i:], m.ReqId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReqId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowPrivateKeyshareReqResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowPrivateKeyshareReqResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowPrivateKeyshareReqResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedKeyshares) > 0 {
		for k := range m.EncryptedKeyshares {
			v := m.EncryptedKeyshares[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReqId) > 0 {
		i -= len(m.ReqId)
		copy(dAtA[i:], m.ReqId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReqId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryKeyshareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeyshareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Keyshare != nil {
		l = m.Keyshare.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKeyshareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKeyshareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keyshares) > 0 {
		for _, e := range m.Keyshares {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncryptedTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetHeight != 0 {
		n += 1 + sovQuery(uint64(m.TargetHeight))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryGetEncryptedTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EncryptedTx.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEncryptedTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEncryptedTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptedTxArray) > 0 {
		for _, e := range m.EncryptedTxArray {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEncryptedTxFromHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetHeight != 0 {
		n += 1 + sovQuery(uint64(m.TargetHeight))
	}
	return n
}

func (m *QueryAllEncryptedTxFromHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EncryptedTxArray.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLatestHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetPepNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPepNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PepNonce.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPepNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPepNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PepNonce) > 0 {
		for _, e := range m.PepNonce {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPubKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPubKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActivePubKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.QueuedPubKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryShowPrivateKeyshareReqRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowPrivateKeyshareReqResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.EncryptedKeyshares) > 0 {
		for k, v := range m.EncryptedKeyshares {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyshareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyshareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyshareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyshareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyshareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyshareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyshare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keyshare == nil {
				m.Keyshare = &GenEncTxExecutionQueue{}
			}
			if err := m.Keyshare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKeyshareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKeyshareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKeyshareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKeyshareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKeyshareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKeyshareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyshares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyshares = append(m.Keyshares, &GenEncTxExecutionQueue{})
			if err := m.Keyshares[len(m.Keyshares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncryptedTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncryptedTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncryptedTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetHeight", wireType)
			}
			m.TargetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncryptedTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncryptedTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncryptedTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncryptedTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptedTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptedTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptedTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptedTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptedTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptedTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTxArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedTxArray = append(m.EncryptedTxArray, EncryptedTxArray{})
			if err := m.EncryptedTxArray[len(m.EncryptedTxArray)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptedTxFromHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptedTxFromHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptedTxFromHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetHeight", wireType)
			}
			m.TargetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptedTxFromHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptedTxFromHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptedTxFromHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTxArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncryptedTxArray.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPepNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPepNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPepNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPepNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPepNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPepNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PepNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PepNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPepNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPepNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPepNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPepNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPepNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPepNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PepNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PepNonce = append(m.PepNonce, PepNonce{})
			if err := m.PepNonce[len(m.PepNonce)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActivePubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedPubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueuedPubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowPrivateKeyshareReqRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowPrivateKeyshareReqRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowPrivateKeyshareReqRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowPrivateKeyshareReqResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowPrivateKeyshareReqResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowPrivateKeyshareReqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKeyshares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptedKeyshares == nil {
				m.EncryptedKeyshares = make(map[string]*types.KeyshareList)
			}
			var mapkey string
			var mapvalue *types.KeyshareList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.KeyshareList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EncryptedKeyshares[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
