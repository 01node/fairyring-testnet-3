// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/pep/encrypted_tx.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EncryptedTx struct {
	TargetHeight           uint64      `protobuf:"varint,1,opt,name=targetHeight,proto3" json:"targetHeight,omitempty"`
	Index                  uint64      `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Data                   string      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Creator                string      `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	ChargedGas             *types.Coin `protobuf:"bytes,5,opt,name=chargedGas,proto3" json:"chargedGas,omitempty"`
	ProcessedAtChainHeight uint64      `protobuf:"varint,6,opt,name=processedAtChainHeight,proto3" json:"processedAtChainHeight,omitempty"`
	Expired                bool        `protobuf:"varint,7,opt,name=expired,proto3" json:"expired,omitempty"`
}

func (m *EncryptedTx) Reset()         { *m = EncryptedTx{} }
func (m *EncryptedTx) String() string { return proto.CompactTextString(m) }
func (*EncryptedTx) ProtoMessage()    {}
func (*EncryptedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c124d687cde8326, []int{0}
}
func (m *EncryptedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedTx.Merge(m, src)
}
func (m *EncryptedTx) XXX_Size() int {
	return m.Size()
}
func (m *EncryptedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedTx.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedTx proto.InternalMessageInfo

func (m *EncryptedTx) GetTargetHeight() uint64 {
	if m != nil {
		return m.TargetHeight
	}
	return 0
}

func (m *EncryptedTx) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *EncryptedTx) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *EncryptedTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EncryptedTx) GetChargedGas() *types.Coin {
	if m != nil {
		return m.ChargedGas
	}
	return nil
}

func (m *EncryptedTx) GetProcessedAtChainHeight() uint64 {
	if m != nil {
		return m.ProcessedAtChainHeight
	}
	return 0
}

func (m *EncryptedTx) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

type EncryptedTxArray struct {
	EncryptedTx []EncryptedTx `protobuf:"bytes,1,rep,name=encryptedTx,proto3" json:"encryptedTx"`
}

func (m *EncryptedTxArray) Reset()         { *m = EncryptedTxArray{} }
func (m *EncryptedTxArray) String() string { return proto.CompactTextString(m) }
func (*EncryptedTxArray) ProtoMessage()    {}
func (*EncryptedTxArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c124d687cde8326, []int{1}
}
func (m *EncryptedTxArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptedTxArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptedTxArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptedTxArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedTxArray.Merge(m, src)
}
func (m *EncryptedTxArray) XXX_Size() int {
	return m.Size()
}
func (m *EncryptedTxArray) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedTxArray.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedTxArray proto.InternalMessageInfo

func (m *EncryptedTxArray) GetEncryptedTx() []EncryptedTx {
	if m != nil {
		return m.EncryptedTx
	}
	return nil
}

type GeneralEncryptedTx struct {
	Identity   string      `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Index      uint64      `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Data       string      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Creator    string      `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	ChargedGas *types.Coin `protobuf:"bytes,5,opt,name=chargedGas,proto3" json:"chargedGas,omitempty"`
}

func (m *GeneralEncryptedTx) Reset()         { *m = GeneralEncryptedTx{} }
func (m *GeneralEncryptedTx) String() string { return proto.CompactTextString(m) }
func (*GeneralEncryptedTx) ProtoMessage()    {}
func (*GeneralEncryptedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c124d687cde8326, []int{2}
}
func (m *GeneralEncryptedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneralEncryptedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeneralEncryptedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeneralEncryptedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralEncryptedTx.Merge(m, src)
}
func (m *GeneralEncryptedTx) XXX_Size() int {
	return m.Size()
}
func (m *GeneralEncryptedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralEncryptedTx.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralEncryptedTx proto.InternalMessageInfo

func (m *GeneralEncryptedTx) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *GeneralEncryptedTx) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GeneralEncryptedTx) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *GeneralEncryptedTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GeneralEncryptedTx) GetChargedGas() *types.Coin {
	if m != nil {
		return m.ChargedGas
	}
	return nil
}

type GeneralEncryptedTxArray struct {
	EncryptedTx []GeneralEncryptedTx `protobuf:"bytes,1,rep,name=encryptedTx,proto3" json:"encryptedTx"`
}

func (m *GeneralEncryptedTxArray) Reset()         { *m = GeneralEncryptedTxArray{} }
func (m *GeneralEncryptedTxArray) String() string { return proto.CompactTextString(m) }
func (*GeneralEncryptedTxArray) ProtoMessage()    {}
func (*GeneralEncryptedTxArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c124d687cde8326, []int{3}
}
func (m *GeneralEncryptedTxArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneralEncryptedTxArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeneralEncryptedTxArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeneralEncryptedTxArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralEncryptedTxArray.Merge(m, src)
}
func (m *GeneralEncryptedTxArray) XXX_Size() int {
	return m.Size()
}
func (m *GeneralEncryptedTxArray) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralEncryptedTxArray.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralEncryptedTxArray proto.InternalMessageInfo

func (m *GeneralEncryptedTxArray) GetEncryptedTx() []GeneralEncryptedTx {
	if m != nil {
		return m.EncryptedTx
	}
	return nil
}

type GenEncTxExecutionQueue struct {
	Creator      string                   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequestId    string                   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Identity     string                   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey       string                   `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	TxList       *GeneralEncryptedTxArray `protobuf:"bytes,5,opt,name=tx_list,json=txList,proto3" json:"tx_list,omitempty"`
	AggrKeyshare string                   `protobuf:"bytes,6,opt,name=aggr_keyshare,json=aggrKeyshare,proto3" json:"aggr_keyshare,omitempty"`
}

func (m *GenEncTxExecutionQueue) Reset()         { *m = GenEncTxExecutionQueue{} }
func (m *GenEncTxExecutionQueue) String() string { return proto.CompactTextString(m) }
func (*GenEncTxExecutionQueue) ProtoMessage()    {}
func (*GenEncTxExecutionQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c124d687cde8326, []int{4}
}
func (m *GenEncTxExecutionQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenEncTxExecutionQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenEncTxExecutionQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenEncTxExecutionQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenEncTxExecutionQueue.Merge(m, src)
}
func (m *GenEncTxExecutionQueue) XXX_Size() int {
	return m.Size()
}
func (m *GenEncTxExecutionQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_GenEncTxExecutionQueue.DiscardUnknown(m)
}

var xxx_messageInfo_GenEncTxExecutionQueue proto.InternalMessageInfo

func (m *GenEncTxExecutionQueue) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GenEncTxExecutionQueue) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *GenEncTxExecutionQueue) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *GenEncTxExecutionQueue) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *GenEncTxExecutionQueue) GetTxList() *GeneralEncryptedTxArray {
	if m != nil {
		return m.TxList
	}
	return nil
}

func (m *GenEncTxExecutionQueue) GetAggrKeyshare() string {
	if m != nil {
		return m.AggrKeyshare
	}
	return ""
}

func init() {
	proto.RegisterType((*EncryptedTx)(nil), "fairyring.pep.EncryptedTx")
	proto.RegisterType((*EncryptedTxArray)(nil), "fairyring.pep.EncryptedTxArray")
	proto.RegisterType((*GeneralEncryptedTx)(nil), "fairyring.pep.GeneralEncryptedTx")
	proto.RegisterType((*GeneralEncryptedTxArray)(nil), "fairyring.pep.GeneralEncryptedTxArray")
	proto.RegisterType((*GenEncTxExecutionQueue)(nil), "fairyring.pep.GenEncTxExecutionQueue")
}

func init() { proto.RegisterFile("fairyring/pep/encrypted_tx.proto", fileDescriptor_7c124d687cde8326) }

var fileDescriptor_7c124d687cde8326 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x4d, 0x9a, 0x34, 0x9b, 0x56, 0x42, 0xab, 0x2a, 0x98, 0x48, 0x18, 0x13, 0x24,
	0x14, 0x71, 0xb0, 0xd5, 0x22, 0x21, 0x71, 0x42, 0x4d, 0x09, 0xa1, 0x82, 0x0b, 0x56, 0xc5, 0x81,
	0x4b, 0xb4, 0xb6, 0x07, 0x67, 0x95, 0x74, 0xd7, 0xec, 0xae, 0x91, 0x7d, 0xe5, 0x09, 0x78, 0x13,
	0x5e, 0xa3, 0xc7, 0x1e, 0x39, 0x21, 0x94, 0x1c, 0x79, 0x09, 0x94, 0xb5, 0xd3, 0x3a, 0x6d, 0x11,
	0xc7, 0xde, 0xfc, 0xff, 0x33, 0xb3, 0xfa, 0xe7, 0x93, 0x07, 0x3b, 0x9f, 0x29, 0x93, 0xb9, 0x64,
	0x3c, 0xf6, 0x12, 0x48, 0x3c, 0xe0, 0xa1, 0xcc, 0x13, 0x0d, 0xd1, 0x44, 0x67, 0x6e, 0x22, 0x85,
	0x16, 0x64, 0xef, 0xb2, 0xc3, 0x4d, 0x20, 0xe9, 0xed, 0xc7, 0x22, 0x16, 0xa6, 0xe2, 0xad, 0xbe,
	0x8a, 0xa6, 0x9e, 0x1d, 0x0a, 0x75, 0x26, 0x94, 0x17, 0x50, 0x05, 0xde, 0xd7, 0x83, 0x00, 0x34,
	0x3d, 0xf0, 0x42, 0xc1, 0x78, 0x51, 0xef, 0x7f, 0xdb, 0xc2, 0x9d, 0xd1, 0xfa, 0xed, 0xd3, 0x8c,
	0xf4, 0xf1, 0xae, 0xa6, 0x32, 0x06, 0xfd, 0x16, 0x58, 0x3c, 0xd5, 0x16, 0x72, 0xd0, 0xa0, 0xe1,
	0x6f, 0x78, 0x64, 0x1f, 0x6f, 0x33, 0x1e, 0x41, 0x66, 0x6d, 0x99, 0x62, 0x21, 0x08, 0xc1, 0x8d,
	0x88, 0x6a, 0x6a, 0xd5, 0x1d, 0x34, 0x68, 0xfb, 0xe6, 0x9b, 0x58, 0xb8, 0x15, 0x4a, 0xa0, 0x5a,
	0x48, 0xab, 0x61, 0xec, 0xb5, 0x24, 0x2f, 0x31, 0x0e, 0xa7, 0xab, 0x47, 0xa3, 0x31, 0x55, 0xd6,
	0xb6, 0x83, 0x06, 0x9d, 0xc3, 0x07, 0x6e, 0x11, 0xd6, 0x5d, 0x85, 0x75, 0xcb, 0xb0, 0xee, 0xb1,
	0x60, 0xdc, 0xaf, 0x34, 0x93, 0x17, 0xb8, 0x9b, 0x48, 0x11, 0x82, 0x52, 0x10, 0x1d, 0xe9, 0xe3,
	0x29, 0x65, 0xbc, 0x0c, 0xdb, 0x34, 0x79, 0xfe, 0x51, 0x5d, 0x85, 0x81, 0x2c, 0x61, 0x12, 0x22,
	0xab, 0xe5, 0xa0, 0xc1, 0x8e, 0xbf, 0x96, 0xfd, 0x8f, 0xf8, 0x5e, 0x85, 0xc1, 0x91, 0x94, 0x34,
	0x27, 0x43, 0xdc, 0x81, 0x2b, 0xcf, 0x42, 0x4e, 0x7d, 0xd0, 0x39, 0xec, 0xb9, 0x1b, 0xcc, 0xdd,
	0xca, 0xd4, 0xb0, 0x71, 0xfe, 0xeb, 0x51, 0xcd, 0xaf, 0x0e, 0xf5, 0x7f, 0x20, 0x4c, 0xc6, 0xc0,
	0x41, 0xd2, 0x79, 0x95, 0x71, 0x0f, 0xef, 0xb0, 0x08, 0xb8, 0x66, 0x3a, 0x37, 0x7c, 0xdb, 0xfe,
	0xa5, 0xbe, 0x63, 0xb6, 0xfd, 0x08, 0xdf, 0xbf, 0x19, 0xb8, 0x00, 0x72, 0x72, 0x1b, 0x90, 0xc7,
	0xd7, 0x80, 0xdc, 0x1c, 0xbe, 0x8d, 0xcb, 0x1f, 0x84, 0xbb, 0x63, 0xe0, 0x23, 0x1e, 0x9e, 0x66,
	0xa3, 0x0c, 0xc2, 0x54, 0x33, 0xc1, 0x3f, 0xa4, 0x90, 0x42, 0x75, 0x2b, 0xb4, 0xb9, 0xd5, 0x43,
	0x8c, 0x25, 0x7c, 0x49, 0x41, 0xe9, 0x09, 0x8b, 0x0c, 0x9e, 0xb6, 0xdf, 0x2e, 0x9d, 0x93, 0x68,
	0x03, 0x6a, 0xfd, 0x1a, 0xd4, 0x2e, 0x6e, 0x26, 0x69, 0x30, 0x83, 0xbc, 0x24, 0x55, 0x2a, 0xf2,
	0x0a, 0xb7, 0x74, 0x36, 0x99, 0x33, 0xa5, 0x4b, 0x4a, 0x4f, 0xff, 0xbb, 0x8e, 0x61, 0xe1, 0x37,
	0x75, 0xf6, 0x9e, 0x29, 0x4d, 0x9e, 0xe0, 0x3d, 0x1a, 0xc7, 0x72, 0x32, 0x83, 0x5c, 0x4d, 0xa9,
	0x04, 0xf3, 0x07, 0xb6, 0xfd, 0xdd, 0x95, 0xf9, 0xae, 0xf4, 0x86, 0xaf, 0xcf, 0x17, 0x36, 0xba,
	0x58, 0xd8, 0xe8, 0xf7, 0xc2, 0x46, 0xdf, 0x97, 0x76, 0xed, 0x62, 0x69, 0xd7, 0x7e, 0x2e, 0xed,
	0xda, 0xa7, 0x67, 0x31, 0xd3, 0xd3, 0x34, 0x70, 0x43, 0x71, 0xe6, 0xbd, 0xa1, 0x4c, 0x06, 0x73,
	0x11, 0xce, 0xbc, 0xab, 0xc3, 0xcf, 0xcc, 0xe9, 0xeb, 0x3c, 0x01, 0x15, 0x34, 0xcd, 0xbd, 0x3e,
	0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x64, 0xa5, 0xcd, 0xa6, 0x18, 0x04, 0x00, 0x00,
}

func (m *EncryptedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expired {
		i--
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ProcessedAtChainHeight != 0 {
		i = encodeVarintEncryptedTx(dAtA, i, uint64(m.ProcessedAtChainHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.ChargedGas != nil {
		{
			size, err := m.ChargedGas.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEncryptedTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintEncryptedTx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.TargetHeight != 0 {
		i = encodeVarintEncryptedTx(dAtA, i, uint64(m.TargetHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncryptedTxArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptedTxArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedTxArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedTx) > 0 {
		for iNdEx := len(m.EncryptedTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEncryptedTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GeneralEncryptedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneralEncryptedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneralEncryptedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChargedGas != nil {
		{
			size, err := m.ChargedGas.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEncryptedTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintEncryptedTx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeneralEncryptedTxArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneralEncryptedTxArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneralEncryptedTxArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedTx) > 0 {
		for iNdEx := len(m.EncryptedTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEncryptedTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenEncTxExecutionQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenEncTxExecutionQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenEncTxExecutionQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggrKeyshare) > 0 {
		i -= len(m.AggrKeyshare)
		copy(dAtA[i:], m.AggrKeyshare)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.AggrKeyshare)))
		i--
		dAtA[i] = 0x32
	}
	if m.TxList != nil {
		{
			size, err := m.TxList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEncryptedTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEncryptedTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEncryptedTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovEncryptedTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EncryptedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetHeight != 0 {
		n += 1 + sovEncryptedTx(uint64(m.TargetHeight))
	}
	if m.Index != 0 {
		n += 1 + sovEncryptedTx(uint64(m.Index))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	if m.ChargedGas != nil {
		l = m.ChargedGas.Size()
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	if m.ProcessedAtChainHeight != 0 {
		n += 1 + sovEncryptedTx(uint64(m.ProcessedAtChainHeight))
	}
	if m.Expired {
		n += 2
	}
	return n
}

func (m *EncryptedTxArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptedTx) > 0 {
		for _, e := range m.EncryptedTx {
			l = e.Size()
			n += 1 + l + sovEncryptedTx(uint64(l))
		}
	}
	return n
}

func (m *GeneralEncryptedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovEncryptedTx(uint64(m.Index))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	if m.ChargedGas != nil {
		l = m.ChargedGas.Size()
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	return n
}

func (m *GeneralEncryptedTxArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptedTx) > 0 {
		for _, e := range m.EncryptedTx {
			l = e.Size()
			n += 1 + l + sovEncryptedTx(uint64(l))
		}
	}
	return n
}

func (m *GenEncTxExecutionQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	if m.TxList != nil {
		l = m.TxList.Size()
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	l = len(m.AggrKeyshare)
	if l > 0 {
		n += 1 + l + sovEncryptedTx(uint64(l))
	}
	return n
}

func sovEncryptedTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEncryptedTx(x uint64) (n int) {
	return sovEncryptedTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EncryptedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptedTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetHeight", wireType)
			}
			m.TargetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedGas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargedGas == nil {
				m.ChargedGas = &types.Coin{}
			}
			if err := m.ChargedGas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedAtChainHeight", wireType)
			}
			m.ProcessedAtChainHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessedAtChainHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptedTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptedTxArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptedTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptedTxArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptedTxArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedTx = append(m.EncryptedTx, EncryptedTx{})
			if err := m.EncryptedTx[len(m.EncryptedTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptedTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneralEncryptedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptedTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneralEncryptedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneralEncryptedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedGas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargedGas == nil {
				m.ChargedGas = &types.Coin{}
			}
			if err := m.ChargedGas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptedTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneralEncryptedTxArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptedTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneralEncryptedTxArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneralEncryptedTxArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedTx = append(m.EncryptedTx, GeneralEncryptedTx{})
			if err := m.EncryptedTx[len(m.EncryptedTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptedTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenEncTxExecutionQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEncryptedTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenEncTxExecutionQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenEncTxExecutionQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxList == nil {
				m.TxList = &GeneralEncryptedTxArray{}
			}
			if err := m.TxList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggrKeyshare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggrKeyshare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEncryptedTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEncryptedTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEncryptedTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEncryptedTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEncryptedTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEncryptedTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEncryptedTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEncryptedTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEncryptedTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEncryptedTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEncryptedTx = fmt.Errorf("proto: unexpected end of group")
)
