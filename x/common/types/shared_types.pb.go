// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/common/shared_types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RequestAggrKeyshare defines a struct for the data payload
type RequestAggrKeyshare struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// id can either be a rwquest id or a proposal id
	//
	// Types that are valid to be assigned to Id:
	//
	//	*RequestAggrKeyshare_ProposalId
	//	*RequestAggrKeyshare_RequestId
	Id             isRequestAggrKeyshare_Id `protobuf_oneof:"id"`
	EstimatedDelay *time.Duration           `protobuf:"bytes,4,opt,name=estimated_delay,json=estimatedDelay,proto3,stdduration" json:"estimated_delay,omitempty"`
}

func (m *RequestAggrKeyshare) Reset()         { *m = RequestAggrKeyshare{} }
func (m *RequestAggrKeyshare) String() string { return proto.CompactTextString(m) }
func (*RequestAggrKeyshare) ProtoMessage()    {}
func (*RequestAggrKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{0}
}
func (m *RequestAggrKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestAggrKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestAggrKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestAggrKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAggrKeyshare.Merge(m, src)
}
func (m *RequestAggrKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *RequestAggrKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAggrKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAggrKeyshare proto.InternalMessageInfo

type isRequestAggrKeyshare_Id interface {
	isRequestAggrKeyshare_Id()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestAggrKeyshare_ProposalId struct {
	ProposalId string `protobuf:"bytes,2,opt,name=proposal_id,json=proposalId,proto3,oneof" json:"proposal_id,omitempty"`
}
type RequestAggrKeyshare_RequestId struct {
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (*RequestAggrKeyshare_ProposalId) isRequestAggrKeyshare_Id() {}
func (*RequestAggrKeyshare_RequestId) isRequestAggrKeyshare_Id()  {}

func (m *RequestAggrKeyshare) GetId() isRequestAggrKeyshare_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestAggrKeyshare) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *RequestAggrKeyshare) GetProposalId() string {
	if x, ok := m.GetId().(*RequestAggrKeyshare_ProposalId); ok {
		return x.ProposalId
	}
	return ""
}

func (m *RequestAggrKeyshare) GetRequestId() string {
	if x, ok := m.GetId().(*RequestAggrKeyshare_RequestId); ok {
		return x.RequestId
	}
	return ""
}

func (m *RequestAggrKeyshare) GetEstimatedDelay() *time.Duration {
	if m != nil {
		return m.EstimatedDelay
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestAggrKeyshare) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestAggrKeyshare_ProposalId)(nil),
		(*RequestAggrKeyshare_RequestId)(nil),
	}
}

// RequestAggrKeyshareResponse defines the response to the RequestAggrKeyshare message
type RequestAggrKeyshareResponse struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey   string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *RequestAggrKeyshareResponse) Reset()         { *m = RequestAggrKeyshareResponse{} }
func (m *RequestAggrKeyshareResponse) String() string { return proto.CompactTextString(m) }
func (*RequestAggrKeyshareResponse) ProtoMessage()    {}
func (*RequestAggrKeyshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{1}
}
func (m *RequestAggrKeyshareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestAggrKeyshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestAggrKeyshareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestAggrKeyshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAggrKeyshareResponse.Merge(m, src)
}
func (m *RequestAggrKeyshareResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequestAggrKeyshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAggrKeyshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAggrKeyshareResponse proto.InternalMessageInfo

func (m *RequestAggrKeyshareResponse) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RequestAggrKeyshareResponse) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

// GetAggrKeyshare defines a struct for the data payload
type GetAggrKeyshare struct {
	// id can either be a rwquest id or a proposal id
	//
	// Types that are valid to be assigned to Id:
	//
	//	*GetAggrKeyshare_ProposalId
	//	*GetAggrKeyshare_RequestId
	Id       isGetAggrKeyshare_Id `protobuf_oneof:"id"`
	Identity string               `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *GetAggrKeyshare) Reset()         { *m = GetAggrKeyshare{} }
func (m *GetAggrKeyshare) String() string { return proto.CompactTextString(m) }
func (*GetAggrKeyshare) ProtoMessage()    {}
func (*GetAggrKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{2}
}
func (m *GetAggrKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAggrKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAggrKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAggrKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAggrKeyshare.Merge(m, src)
}
func (m *GetAggrKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *GetAggrKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAggrKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_GetAggrKeyshare proto.InternalMessageInfo

type isGetAggrKeyshare_Id interface {
	isGetAggrKeyshare_Id()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetAggrKeyshare_ProposalId struct {
	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3,oneof" json:"proposal_id,omitempty"`
}
type GetAggrKeyshare_RequestId struct {
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (*GetAggrKeyshare_ProposalId) isGetAggrKeyshare_Id() {}
func (*GetAggrKeyshare_RequestId) isGetAggrKeyshare_Id()  {}

func (m *GetAggrKeyshare) GetId() isGetAggrKeyshare_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetAggrKeyshare) GetProposalId() string {
	if x, ok := m.GetId().(*GetAggrKeyshare_ProposalId); ok {
		return x.ProposalId
	}
	return ""
}

func (m *GetAggrKeyshare) GetRequestId() string {
	if x, ok := m.GetId().(*GetAggrKeyshare_RequestId); ok {
		return x.RequestId
	}
	return ""
}

func (m *GetAggrKeyshare) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetAggrKeyshare) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetAggrKeyshare_ProposalId)(nil),
		(*GetAggrKeyshare_RequestId)(nil),
	}
}

// GetAggrKeyshareResponse defines the response to the GetAggrKeyshare message
type GetAggrKeyshareResponse struct {
}

func (m *GetAggrKeyshareResponse) Reset()         { *m = GetAggrKeyshareResponse{} }
func (m *GetAggrKeyshareResponse) String() string { return proto.CompactTextString(m) }
func (*GetAggrKeyshareResponse) ProtoMessage()    {}
func (*GetAggrKeyshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{3}
}
func (m *GetAggrKeyshareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAggrKeyshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAggrKeyshareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAggrKeyshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAggrKeyshareResponse.Merge(m, src)
}
func (m *GetAggrKeyshareResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAggrKeyshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAggrKeyshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAggrKeyshareResponse proto.InternalMessageInfo

// GetPrivateKeyshare defines a struct for the data payload
type GetPrivateKeyshare struct {
	RequestId  string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Identity   string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Requester  string `protobuf:"bytes,3,opt,name=requester,proto3" json:"requester,omitempty"`
	SecpPubkey string `protobuf:"bytes,4,opt,name=secp_pubkey,json=secpPubkey,proto3" json:"secp_pubkey,omitempty"`
}

func (m *GetPrivateKeyshare) Reset()         { *m = GetPrivateKeyshare{} }
func (m *GetPrivateKeyshare) String() string { return proto.CompactTextString(m) }
func (*GetPrivateKeyshare) ProtoMessage()    {}
func (*GetPrivateKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{4}
}
func (m *GetPrivateKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrivateKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrivateKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPrivateKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrivateKeyshare.Merge(m, src)
}
func (m *GetPrivateKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *GetPrivateKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrivateKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrivateKeyshare proto.InternalMessageInfo

func (m *GetPrivateKeyshare) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *GetPrivateKeyshare) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *GetPrivateKeyshare) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *GetPrivateKeyshare) GetSecpPubkey() string {
	if m != nil {
		return m.SecpPubkey
	}
	return ""
}

// GetPrivateKeyshareResponse defines the response to the GetPrivateKeyshare message
type GetPrivateKeyshareResponse struct {
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *GetPrivateKeyshareResponse) Reset()         { *m = GetPrivateKeyshareResponse{} }
func (m *GetPrivateKeyshareResponse) String() string { return proto.CompactTextString(m) }
func (*GetPrivateKeyshareResponse) ProtoMessage()    {}
func (*GetPrivateKeyshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{5}
}
func (m *GetPrivateKeyshareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrivateKeyshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrivateKeyshareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPrivateKeyshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrivateKeyshareResponse.Merge(m, src)
}
func (m *GetPrivateKeyshareResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPrivateKeyshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrivateKeyshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrivateKeyshareResponse proto.InternalMessageInfo

func (m *GetPrivateKeyshareResponse) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

// ActivePublicKey defines the pubkey currently in use
type ActivePublicKey struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Creator   string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Expiry    uint64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (m *ActivePublicKey) Reset()         { *m = ActivePublicKey{} }
func (m *ActivePublicKey) String() string { return proto.CompactTextString(m) }
func (*ActivePublicKey) ProtoMessage()    {}
func (*ActivePublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{6}
}
func (m *ActivePublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivePublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivePublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivePublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivePublicKey.Merge(m, src)
}
func (m *ActivePublicKey) XXX_Size() int {
	return m.Size()
}
func (m *ActivePublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivePublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_ActivePublicKey proto.InternalMessageInfo

func (m *ActivePublicKey) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *ActivePublicKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ActivePublicKey) GetExpiry() uint64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

// QueuedPublicKey defines the pubkey that (when set) will replace the acive pubkey
// when it expires
type QueuedPublicKey struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Creator   string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Expiry    uint64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (m *QueuedPublicKey) Reset()         { *m = QueuedPublicKey{} }
func (m *QueuedPublicKey) String() string { return proto.CompactTextString(m) }
func (*QueuedPublicKey) ProtoMessage()    {}
func (*QueuedPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{7}
}
func (m *QueuedPublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedPublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedPublicKey.Merge(m, src)
}
func (m *QueuedPublicKey) XXX_Size() int {
	return m.Size()
}
func (m *QueuedPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedPublicKey proto.InternalMessageInfo

func (m *QueuedPublicKey) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *QueuedPublicKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueuedPublicKey) GetExpiry() uint64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

// RequestEncryptedKeyshare defines the structure to request for
// encrypted and unaggregated keyshares
type RequestEncryptedKeyshare struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *RequestEncryptedKeyshare) Reset()         { *m = RequestEncryptedKeyshare{} }
func (m *RequestEncryptedKeyshare) String() string { return proto.CompactTextString(m) }
func (*RequestEncryptedKeyshare) ProtoMessage()    {}
func (*RequestEncryptedKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{8}
}
func (m *RequestEncryptedKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEncryptedKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEncryptedKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEncryptedKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEncryptedKeyshare.Merge(m, src)
}
func (m *RequestEncryptedKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *RequestEncryptedKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEncryptedKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEncryptedKeyshare proto.InternalMessageInfo

func (m *RequestEncryptedKeyshare) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *RequestEncryptedKeyshare) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// EncryptedKeyshare defines the storage structure for
// the list of encrypted keyshares (unaggregated)
type EncryptedKeyshare struct {
	Requester        string                      `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	PrivateKeyshares []*IndexedEncryptedKeyshare `protobuf:"bytes,2,rep,name=private_keyshares,json=privateKeyshares,proto3" json:"private_keyshares,omitempty"`
}

func (m *EncryptedKeyshare) Reset()         { *m = EncryptedKeyshare{} }
func (m *EncryptedKeyshare) String() string { return proto.CompactTextString(m) }
func (*EncryptedKeyshare) ProtoMessage()    {}
func (*EncryptedKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{9}
}
func (m *EncryptedKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptedKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptedKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptedKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedKeyshare.Merge(m, src)
}
func (m *EncryptedKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *EncryptedKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedKeyshare proto.InternalMessageInfo

func (m *EncryptedKeyshare) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *EncryptedKeyshare) GetPrivateKeyshares() []*IndexedEncryptedKeyshare {
	if m != nil {
		return m.PrivateKeyshares
	}
	return nil
}

// IndexedEncryptedKeyshare defines the storage of submitted encrypted
// keyshares along with their indices (can be decrypted and aggregated)
type IndexedEncryptedKeyshare struct {
	EncryptedKeyshareValue string `protobuf:"bytes,1,opt,name=encrypted_keyshare_value,json=encryptedKeyshareValue,proto3" json:"encrypted_keyshare_value,omitempty"`
	EncryptedKeyshareIndex uint64 `protobuf:"varint,2,opt,name=encrypted_keyshare_index,json=encryptedKeyshareIndex,proto3" json:"encrypted_keyshare_index,omitempty"`
}

func (m *IndexedEncryptedKeyshare) Reset()         { *m = IndexedEncryptedKeyshare{} }
func (m *IndexedEncryptedKeyshare) String() string { return proto.CompactTextString(m) }
func (*IndexedEncryptedKeyshare) ProtoMessage()    {}
func (*IndexedEncryptedKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{10}
}
func (m *IndexedEncryptedKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedEncryptedKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedEncryptedKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedEncryptedKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedEncryptedKeyshare.Merge(m, src)
}
func (m *IndexedEncryptedKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *IndexedEncryptedKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedEncryptedKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedEncryptedKeyshare proto.InternalMessageInfo

func (m *IndexedEncryptedKeyshare) GetEncryptedKeyshareValue() string {
	if m != nil {
		return m.EncryptedKeyshareValue
	}
	return ""
}

func (m *IndexedEncryptedKeyshare) GetEncryptedKeyshareIndex() uint64 {
	if m != nil {
		return m.EncryptedKeyshareIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestAggrKeyshare)(nil), "fairyring.common.RequestAggrKeyshare")
	proto.RegisterType((*RequestAggrKeyshareResponse)(nil), "fairyring.common.RequestAggrKeyshareResponse")
	proto.RegisterType((*GetAggrKeyshare)(nil), "fairyring.common.GetAggrKeyshare")
	proto.RegisterType((*GetAggrKeyshareResponse)(nil), "fairyring.common.GetAggrKeyshareResponse")
	proto.RegisterType((*GetPrivateKeyshare)(nil), "fairyring.common.GetPrivateKeyshare")
	proto.RegisterType((*GetPrivateKeyshareResponse)(nil), "fairyring.common.GetPrivateKeyshareResponse")
	proto.RegisterType((*ActivePublicKey)(nil), "fairyring.common.ActivePublicKey")
	proto.RegisterType((*QueuedPublicKey)(nil), "fairyring.common.QueuedPublicKey")
	proto.RegisterType((*RequestEncryptedKeyshare)(nil), "fairyring.common.RequestEncryptedKeyshare")
	proto.RegisterType((*EncryptedKeyshare)(nil), "fairyring.common.EncryptedKeyshare")
	proto.RegisterType((*IndexedEncryptedKeyshare)(nil), "fairyring.common.IndexedEncryptedKeyshare")
}

func init() {
	proto.RegisterFile("fairyring/common/shared_types.proto", fileDescriptor_b708507d1b3951ff)
}

var fileDescriptor_b708507d1b3951ff = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4f, 0x4f, 0xd4, 0x40,
	0x14, 0xdf, 0x59, 0x36, 0x28, 0x6f, 0x13, 0x81, 0x6a, 0xb0, 0xac, 0x52, 0x70, 0xbd, 0x10, 0x13,
	0xdb, 0x04, 0x3d, 0x78, 0x85, 0xa0, 0x40, 0xb8, 0x40, 0x4d, 0x34, 0xf1, 0xd2, 0xb4, 0x9d, 0x47,
	0x99, 0x50, 0x3a, 0xe3, 0x74, 0x8a, 0xf4, 0x2b, 0x78, 0x30, 0x1e, 0xfd, 0x3e, 0x5e, 0x3c, 0x72,
	0xf4, 0xa6, 0x81, 0x2f, 0x62, 0xa6, 0xff, 0x96, 0x76, 0x21, 0x7a, 0xf1, 0xd6, 0xf7, 0x6f, 0x7e,
	0xef, 0xf7, 0x7b, 0xaf, 0x0f, 0x9e, 0x1e, 0xf9, 0x4c, 0xe6, 0x92, 0x25, 0x91, 0x13, 0xf2, 0xd3,
	0x53, 0x9e, 0x38, 0xe9, 0xb1, 0x2f, 0x91, 0x7a, 0x2a, 0x17, 0x98, 0xda, 0x42, 0x72, 0xc5, 0x8d,
	0x85, 0x26, 0xc9, 0x2e, 0x93, 0x46, 0x56, 0xc4, 0x79, 0x14, 0xa3, 0x53, 0xc4, 0x83, 0xec, 0xc8,
	0xa1, 0x99, 0xf4, 0x15, 0xe3, 0x49, 0x59, 0x31, 0x7a, 0x10, 0xf1, 0x88, 0x17, 0x9f, 0x8e, 0xfe,
	0x2a, 0xbd, 0xe3, 0xef, 0x04, 0xee, 0xbb, 0xf8, 0x31, 0xc3, 0x54, 0x6d, 0x46, 0x91, 0xdc, 0xc7,
	0xbc, 0x00, 0x33, 0x4c, 0xb8, 0x13, 0x4a, 0xf4, 0x15, 0x97, 0x26, 0x59, 0x23, 0xeb, 0x73, 0x6e,
	0x6d, 0x1a, 0x4f, 0x60, 0x28, 0x24, 0x17, 0x3c, 0xf5, 0x63, 0x8f, 0x51, 0xb3, 0xaf, 0xa3, 0xbb,
	0x3d, 0x17, 0x6a, 0xe7, 0x1e, 0x35, 0x56, 0x01, 0x64, 0xf9, 0xa6, 0xce, 0x98, 0xa9, 0x32, 0xe6,
	0x2a, 0xdf, 0x1e, 0x35, 0x76, 0x61, 0x1e, 0x53, 0xc5, 0x4e, 0x7d, 0x85, 0xd4, 0xa3, 0x18, 0xfb,
	0xb9, 0x39, 0x58, 0x23, 0xeb, 0xc3, 0x8d, 0x65, 0xbb, 0x64, 0x61, 0xd7, 0x2c, 0xec, 0xed, 0x8a,
	0xc5, 0xd6, 0xe0, 0xdb, 0xaf, 0x55, 0xe2, 0xde, 0x6b, 0xea, 0xb6, 0x75, 0xd9, 0xd6, 0x00, 0xfa,
	0x8c, 0x8e, 0x0f, 0xe1, 0xd1, 0x0d, 0x24, 0x5c, 0x4c, 0x05, 0x4f, 0x52, 0x34, 0x46, 0x70, 0x97,
	0x51, 0x4c, 0x14, 0x53, 0x79, 0xc5, 0xa6, 0xb1, 0x8d, 0x25, 0x98, 0x15, 0x59, 0x70, 0x82, 0x79,
	0xc9, 0xc4, 0xad, 0xac, 0xf1, 0x27, 0x98, 0xdf, 0xc1, 0xb6, 0x26, 0x1d, 0xe6, 0xe4, 0xaf, 0xcc,
	0xfb, 0xd3, 0xcc, 0xaf, 0xb7, 0x32, 0xd3, 0x6e, 0xa5, 0xe2, 0xb2, 0x0c, 0x0f, 0x3b, 0xc0, 0x35,
	0x8f, 0xf1, 0x17, 0x02, 0xc6, 0x0e, 0xaa, 0x03, 0xc9, 0xce, 0x7c, 0x85, 0x4d, 0x5f, 0x2b, 0x2d,
	0xd0, 0x92, 0xe0, 0x2d, 0x90, 0xfd, 0x0e, 0xfb, 0xc7, 0x50, 0x27, 0xa2, 0xac, 0xfa, 0x99, 0x38,
	0x8c, 0x55, 0x18, 0xa6, 0x18, 0x0a, 0xaf, 0x12, 0x68, 0x50, 0xc4, 0x41, 0xbb, 0x0e, 0x4a, 0x91,
	0x5e, 0xc2, 0x68, 0xba, 0x9f, 0x46, 0xf6, 0x89, 0xb4, 0xa4, 0x25, 0x6d, 0x00, 0xf3, 0x9b, 0xa1,
	0x62, 0x67, 0x78, 0x90, 0x05, 0x31, 0x0b, 0xf7, 0x31, 0xd7, 0x14, 0x44, 0x61, 0x78, 0x93, 0xf4,
	0x39, 0xd1, 0x84, 0xaf, 0x6d, 0x63, 0xbf, 0xbd, 0x8d, 0x4b, 0x30, 0x8b, 0xe7, 0x82, 0xc9, 0x52,
	0xcd, 0x81, 0x5b, 0x59, 0x1a, 0xe3, 0x30, 0xc3, 0x0c, 0xe9, 0x7f, 0xc4, 0x78, 0x0b, 0x66, 0xb5,
	0x75, 0xaf, 0x93, 0x50, 0xe6, 0x42, 0x21, 0xfd, 0x87, 0xff, 0x67, 0x65, 0x7a, 0x45, 0xae, 0x4d,
	0x6b, 0xfc, 0x99, 0xc0, 0xe2, 0xf4, 0x73, 0xad, 0x39, 0x91, 0xee, 0x9c, 0xde, 0xc3, 0xa2, 0x28,
	0x67, 0xa0, 0xa9, 0x15, 0x15, 0xa9, 0xd9, 0x5f, 0x9b, 0x59, 0x1f, 0x6e, 0x3c, 0xb3, 0xbb, 0x87,
	0xc2, 0xde, 0x4b, 0x28, 0x9e, 0x23, 0x9d, 0x02, 0x71, 0x17, 0x44, 0x7b, 0x90, 0xa9, 0x5e, 0x38,
	0xf3, 0xb6, 0x74, 0xe3, 0x15, 0x98, 0x58, 0x3b, 0x1b, 0x5c, 0xef, 0xcc, 0x8f, 0x33, 0xac, 0x5a,
	0x5c, 0xc2, 0x6e, 0xd1, 0x3b, 0x1d, 0xbd, 0xa5, 0x92, 0x69, 0xa0, 0x42, 0x90, 0xc1, 0x0d, 0x95,
	0x45, 0x1b, 0x5b, 0x3b, 0x3f, 0x2e, 0x2d, 0x72, 0x71, 0x69, 0x91, 0xdf, 0x97, 0x16, 0xf9, 0x7a,
	0x65, 0xf5, 0x2e, 0xae, 0xac, 0xde, 0xcf, 0x2b, 0xab, 0xf7, 0xe1, 0x79, 0xc4, 0xd4, 0x71, 0x16,
	0x68, 0x92, 0xce, 0x1b, 0x9f, 0xc9, 0x20, 0xe6, 0xe1, 0x89, 0x33, 0x39, 0xa5, 0xe7, 0xf5, 0x31,
	0x2d, 0xae, 0x68, 0x30, 0x5b, 0x1c, 0x98, 0x17, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x10,
	0x56, 0xff, 0x6d, 0x05, 0x00, 0x00,
}

func (m *RequestAggrKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAggrKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestAggrKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EstimatedDelay != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.EstimatedDelay, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.EstimatedDelay):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintSharedTypes(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestAggrKeyshare_ProposalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestAggrKeyshare_ProposalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ProposalId)
	copy(dAtA[i:], m.ProposalId)
	i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.ProposalId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *RequestAggrKeyshare_RequestId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestAggrKeyshare_RequestId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RequestId)
	copy(dAtA[i:], m.RequestId)
	i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.RequestId)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *RequestAggrKeyshareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAggrKeyshareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestAggrKeyshareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAggrKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAggrKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAggrKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAggrKeyshare_ProposalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAggrKeyshare_ProposalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ProposalId)
	copy(dAtA[i:], m.ProposalId)
	i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.ProposalId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *GetAggrKeyshare_RequestId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAggrKeyshare_RequestId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RequestId)
	copy(dAtA[i:], m.RequestId)
	i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.RequestId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *GetAggrKeyshareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAggrKeyshareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAggrKeyshareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPrivateKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivateKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPrivateKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecpPubkey) > 0 {
		i -= len(m.SecpPubkey)
		copy(dAtA[i:], m.SecpPubkey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.SecpPubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPrivateKeyshareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivateKeyshareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPrivateKeyshareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivePublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivePublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivePublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != 0 {
		i = encodeVarintSharedTypes(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueuedPublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedPublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedPublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != 0 {
		i = encodeVarintSharedTypes(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestEncryptedKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEncryptedKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEncryptedKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EncryptedKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptedKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivateKeyshares) > 0 {
		for iNdEx := len(m.PrivateKeyshares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateKeyshares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSharedTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexedEncryptedKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedEncryptedKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedEncryptedKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncryptedKeyshareIndex != 0 {
		i = encodeVarintSharedTypes(dAtA, i, uint64(m.EncryptedKeyshareIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EncryptedKeyshareValue) > 0 {
		i -= len(m.EncryptedKeyshareValue)
		copy(dAtA[i:], m.EncryptedKeyshareValue)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.EncryptedKeyshareValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSharedTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovSharedTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestAggrKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.Id != nil {
		n += m.Id.Size()
	}
	if m.EstimatedDelay != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.EstimatedDelay)
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *RequestAggrKeyshare_ProposalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	n += 1 + l + sovSharedTypes(uint64(l))
	return n
}
func (m *RequestAggrKeyshare_RequestId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	n += 1 + l + sovSharedTypes(uint64(l))
	return n
}
func (m *RequestAggrKeyshareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *GetAggrKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += m.Id.Size()
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *GetAggrKeyshare_ProposalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	n += 1 + l + sovSharedTypes(uint64(l))
	return n
}
func (m *GetAggrKeyshare_RequestId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	n += 1 + l + sovSharedTypes(uint64(l))
	return n
}
func (m *GetAggrKeyshareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPrivateKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.SecpPubkey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *GetPrivateKeyshareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *ActivePublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovSharedTypes(uint64(m.Expiry))
	}
	return n
}

func (m *QueuedPublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovSharedTypes(uint64(m.Expiry))
	}
	return n
}

func (m *RequestEncryptedKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *EncryptedKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if len(m.PrivateKeyshares) > 0 {
		for _, e := range m.PrivateKeyshares {
			l = e.Size()
			n += 1 + l + sovSharedTypes(uint64(l))
		}
	}
	return n
}

func (m *IndexedEncryptedKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedKeyshareValue)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.EncryptedKeyshareIndex != 0 {
		n += 1 + sovSharedTypes(uint64(m.EncryptedKeyshareIndex))
	}
	return n
}

func sovSharedTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSharedTypes(x uint64) (n int) {
	return sovSharedTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestAggrKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAggrKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAggrKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &RequestAggrKeyshare_ProposalId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &RequestAggrKeyshare_RequestId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedDelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EstimatedDelay == nil {
				m.EstimatedDelay = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.EstimatedDelay, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAggrKeyshareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAggrKeyshareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAggrKeyshareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAggrKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAggrKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAggrKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &GetAggrKeyshare_ProposalId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &GetAggrKeyshare_RequestId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAggrKeyshareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAggrKeyshareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAggrKeyshareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivateKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivateKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivateKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecpPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecpPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivateKeyshareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivateKeyshareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivateKeyshareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivePublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivePublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivePublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedPublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedPublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedPublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEncryptedKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEncryptedKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEncryptedKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptedKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptedKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptedKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeyshares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKeyshares = append(m.PrivateKeyshares, &IndexedEncryptedKeyshare{})
			if err := m.PrivateKeyshares[len(m.PrivateKeyshares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexedEncryptedKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedEncryptedKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedEncryptedKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKeyshareValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedKeyshareValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKeyshareIndex", wireType)
			}
			m.EncryptedKeyshareIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptedKeyshareIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSharedTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSharedTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSharedTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSharedTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSharedTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSharedTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSharedTypes = fmt.Errorf("proto: unexpected end of group")
)
